searchState.loadedDescShard("revm_primitives", 0, "revm-primitives\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAn Ethereum address, 20 bytes in length.\nAn unsigned EIP-7702 authorization.\n32-byte fixed byte-array type.\nControls the maximum rate of change for blob gas price.\nControls the maximum rate of change for blob gas price …\nEIP-2935: Serve historical block hashes from state\nEIP-2935: Serve historical block hashes from state\nNumber of block hashes that EVM can access in the past …\nState of the <code>Bytecode</code> analysis.\nEOF decode errors.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nA transaction that creates a contract.\nEOF Magic in u16 form.\nEOF magic number in array form.\nHash of EF00 bytes that is used for EXTCODEHASH when …\nEIP-7702 delegated bytecode\nEIP-7702 decode error\nEVM Object Format (EOF) container.\nEthereum Object Format\nEOF decode error\nA byte array of fixed length (<code>[u8; N]</code>).\nGas consumption of a single data blob (== blob byte size).\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\nIndicates a failed recovery attempt where no valid address …\nA map of valid <code>jump</code> destinations.\nStores the setup and parameters needed for computing KZG …\nThe bytecode has been analyzed for valid jump destinations.\nLegacy analyzed\nNo analysis has been performed.\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nEIP-170: Contract code size limit\nEIP-3860: Limit and meter initcode\nMinimum gas price for data blobs.\nThe address of precompile 3, which is handled specially in …\nAn Ethereum ECDSA signature.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nA signed EIP-7702 authorization.\nThe <code>to</code> field of a transaction. Either a target address, or …\n256-bit unsigned integer type, consisting of 4, 64-bit …\nFirst version of the blob.\nIndicates a successfully recovered authority address.\nArray of Zero bytes.\nArray of Zero bytes.\nAdds an address to the access list and returns <code>true</code> if the …\nReturns an optional address if valid.\nGet the <code>address</code> for the authorization.\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nReturns the byte-array representation of this signature.\nReturns the ERC-2098 compact representation of this …\nReturns a mutable slice containing the entire array. …\nGet the raw bytes of the jump map\nReturns a slice containing the entire array. Equivalent to …\nReturns an optional address based on the current state of …\nConverts a sequence of string literals containing …\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise AND of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise OR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nComputes the bitwise XOR of two <code>FixedBytes</code>.\nReturns a reference to the bytecode.\nReturns a reference to the bytecode.\nReturns bytes\nConverts a sequence of string literals containing …\nReturns bytes slice\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nConcatenate two <code>FixedBytes</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nCompile-time equality. NOT constant-time equality.\nCompile-time equality. NOT constant-time equality.\nReturns <code>true</code> if no bits are set.\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nCreates a new <code>Bytes</code> instance from a slice by copying it.\nReturns <code>true</code> if all bits set in <code>b</code> are also set in <code>self</code>.\nReturns <code>true</code> if all bits set in <code>self</code> are also set in <code>b</code>.\nComputes the <code>create</code> address for this address and nonce:\nComputes the <code>CREATE2</code> address of a smart contract as …\nComputes the <code>CREATE2</code> address of a smart contract as …\nReturns a slice of the data section.\nThe plain data.\nThe log data.\nReturns a slice of the raw bytes. If offset is greater …\nDecode EOF from raw bytes.\nDecode EOF that have additional dangling bytes. Assume …\nDecode an RLP-encoded VRS signature. Accepts <code>decode_parity</code> …\nCreates a new empty log.\nCreates a new empty log.\nSlow encode EOF bytes.\nReturn reference to the EOF if bytecode is EOF.\nConverts a sequence of string literals containing …\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nReturns the argument unchanged.\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nConverts a fixed-width unsigned integer into a fixed byte …\nReturns the argument unchanged.\nCreates a <code>TxKind::Call</code> with the given address.\nCreates a <code>TxKind::Call</code> with the <code>Some</code> address, <code>None</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a signature from a byte slice, with a v value\nDecode the signature from the ERC-2098 compact …\nConverts an ECDSA signing key to its corresponding …\nConverts an ECDSA verifying key to its corresponding …\nParses a 65-byte long raw signature.\nParses a 65-byte long raw signature.\nInstantiate by hashing public key bytes.\nCreates a <code>PrimitiveSignature</code> from the serialized <code>r</code> and <code>s</code> …\nInstantiate from a signature and recovery id\nConstruct a jump map from raw bytes\nCreate a new byte array from the given slice <code>src</code>.\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>.\nCreates a new <code>Bytes</code> from a static slice.\nCreates an Ethereum address from an EVM word’s upper 20 …\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nCalculate hash of the bytecode.\nMacro for converting sequence of string literals …\nReturns the inner <code>Authorization</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner bytes array.\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nReturns the inner ECDSA signature.\nSplits the authorization into parts.\nRecover the authority and transform the signed …\nConvert to a signed authorization by adding a signature.\nConsumes the type and returns the address of the contract …\nLeft-pads the address to 32 bytes (EVM word size).\nReturns true if the transaction is a contract call.\nReturns true if the transaction is a contract creation.\nReturns true if bytecode is EIP-7702.\nReturns whether the bytecode is empty.\nReturns true if bytecode is EOF.\nReturns false if bytecode can’t be executed in …\nReturns true if the authority is invalid.\nReturns true if the authority is valid.\nCheck if <code>pc</code> is a valid jump destination.\nTrue if valid, false otherwise.\nReturns <code>true</code> if no bits are set.\nJumptable of analyzed bytes.\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nReturn jump table if bytecode is analyzed\nReturns the length of the original bytes.\nReturns the size of this array in bytes.\nReturns the size of this byte array (<code>N</code>).\nInitializes a trusted setup from <code>FIELD_ELEMENTS_PER_BLOB</code> …\nLoads the trusted setup parameters from a file. The file …\nLoads the trusted setup parameters from a file.\nRe-exports of map types and utilities.\nCreates a new EOF container from the given body.\nCreate new analyzed bytecode.\nWraps the given byte array in this type.\nWraps the given byte array in <code>FixedBytes</code>.\nCreates a new empty <code>Bytes</code>.\nCreates a new log.\nCreates a new log.\nInstantiate a new signature from <code>r</code>, <code>s</code>, and <code>v</code> values.\nCreate new checked bytecode.\nCreates a new EIP-7702 <code>Bytecode</code> from <code>Address</code>.\nCreates a new log from an deserialized event.\nCreates a new log.\nCreates a new legacy <code>Bytecode</code>.\nCreates a new raw <code>Bytecode</code>.\nCreates a new raw <code>Bytecode</code>.\nCreates a new signed authorization from raw signature …\nInstantiate without performing recovery. This should be …\nCreates a new log, without length-checking. This allows …\nCreates a new log.\nGet the <code>nonce</code> for the authorization.\nThe nonce for the authorization.\nNormalizes the signature into “low S” form as …\nNormalizes the signature into “low S” form as …\nOriginal bytes without padding.\nReturns the original bytecode as a byte slice.\nOriginal bytes without padding.\nReturns a reference to the original bytecode.\nOriginal bytes length.\nParse an Ethereum address, verifying its EIP-55 checksum.\nParses the contents of a KZG trusted setup file into a …\nReturns the signature <code>r</code> value.\nReturns the <code>r</code> component of this signature.\nReturn raw EOF bytes.\nReturns the recovery ID.\nRecovers an <code>Address</code> from this signature and the given …\nRecovers an <code>Address</code> from this signature and the given …\nRecover the authority for the authorization.\nRecovers a <code>VerifyingKey</code> from this signature and the given …\nRecovers a <code>VerifyingKey</code> from this signature and the given …\nCreates a new byte array where all bytes are set to <code>byte</code>.\nCreates a new <code>FixedBytes</code> where all bytes are set to <code>byte</code>.\nReserialize the data.\nCreate a new byte array from the given slice <code>src</code>, …\nCreate a new <code>FixedBytes</code> from the given slice <code>src</code>, …\nLength of RLP RS field encoding\nReturns the signature <code>s</code> value.\nReturns the <code>s</code> component of this signature.\nSet the topic list, truncating to 4 topics.\nSet the topic list, without length-checking. This allows …\nGets the <code>signature</code> for the authorization. Returns …\nComputes the signature hash used to sign the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nReturns len of the header and body in bytes.\nCalculates a heuristic for the in-memory size of this …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nConsumes the log data, returning the topic list and the …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nKeys of storage that would be loaded at the start of …\nReturns the inner <code>Authorization</code>.\nReturns the address of the contract that will be called or …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into …\nReturns the inner ECDSA signature.\nGet the topic list.\nGet the topic list, mutably. This gives access to the …\nGet a mutable reference to the topic list. This allows …\nParses a 65-byte long raw signature.\nReturns the recovery ID as a <code>bool</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.\nSets the recovery ID by normalizing a <code>v</code> value.\nWrite R and S to an RLP buffer in progress.\nWrite the VRS to the output.\nReturns the signature parity value.\nEVM database interface.\nEVM database commit interface.\nEVM database interface.\nThe database error type.\nThe database error type.\nWraps a <code>DatabaseRef</code> to provide a <code>Database</code> implementation.\nGet basic account information.\nGet basic account information.\nGet block hash by block number.\nGet block hash by block number.\nGet account code by its hash.\nGet account code by its hash.\nCommit changes to the database.\nDatabase that is split on State and BlockHash traits.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet storage value of address at index.\nGet storage value of address at index.\nBlockHash database component from <code>crate::db::Database</code> it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nState database component from <code>crate::db::Database</code> it is …\nGet block hash by block number\nGet block hash by block number\nGet basic account information.\nGet basic account information.\nGet account code by its hash\nGet account code by its hash\nGet storage value of address at index.\nGet storage value of address at index.\nAn unsigned EIP-7702 authorization.\nIndicates a failed recovery attempt where no valid address …\nCost of creating authorized account that was previously …\nAn Ethereum ECDSA signature.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nA signed EIP-7702 authorization.\nIndicates a successfully recovered authority address.\nThe address of the authorization.\nThe chain ID of the authorization.\nThe nonce for the authorization.\nAn unsigned EIP-7702 authorization.\nAuthorization list for EIP-7702 transaction type.\nIndicates a failed recovery attempt where no valid address …\nAn Ethereum ECDSA signature.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nA signed EIP-7702 authorization.\nIndicates a successfully recovered authority address.\nThe address of the authorization.\nThe chain ID of the authorization.\nReturn empty authorization list.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns recovered authorizations list.\nReturns true if the authorization list is empty.\nReturns length of the authorization list.\nThe nonce for the authorization.\nReturns iterator of recovered Authorizations.\nEIP-7702 Version Magic in u16 form.\nEIP-7702 magic number in array form.\nHash of EF01 bytes that is used for EXTCODEHASH when …\nEIP-7702 first version of bytecode.\nBytecode of delegated account, specified in EIP-7702\nBytecode errors.\nInvalid length of the raw bytecode. It should be 23 bytes.\nAll Eip7702 bytecodes should start with the magic number …\nOnly supported version is version 0x00.\nReturn the address of the delegated contract.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new EIP-7702 bytecode with the given address.\nCreates a new EIP-7702 bytecode or returns None if the raw …\nReturn the raw bytecode with version MAGIC number.\nPerform bytecode analysis.\nWhat bytecode analysis to perform.\nStructure holding block blob excess gas and it calculates …\nThe block environment.\nA transaction that calls a contract or transfer.\nEVM configuration.\nA transaction that creates a contract.\nLegacy create scheme of <code>CREATE</code>.\nCreate scheme of <code>CREATE2</code>.\nCreate scheme.\nEVM environment configuration.\nDo not perform bytecode analysis.\nTransaction destination\nThe transaction environment.\nA list of addresses and storage keys that the transaction …\nList of authorizations, that contains the signature that …\nThe base fee per gas, added in the London upgrade with …\nExcess blob gas and blob gasprice. See also …\nThe calculated blob gas price based on the <code>excess_blob_gas</code>…\nThe list of blob versioned hashes. Per EIP there should be …\nReturns the blob target and max count for the given spec …\nBlob target count. EIP-7840 Add blob schedule to EL config …\nConfiguration of the block the transaction is in.\nCreate boxed Env.\nCalculates the EIP-4844 <code>data_fee</code> of the transaction.\nCalculates the maximum [EIP-4844] <code>data_fee</code> of the …\nCaller aka Author aka transaction signer.\nConfiguration of the EVM itself.\nChain ID of the EVM, it will be compared to the transaction…\nThe chain ID of the transaction. If set to <code>None</code>, no checks …\nResets environment to default values.\nClears environment and resets fields to default values.\nClears environment and resets fields to default values.\nCoinbase or miner or address that created and signed the …\nThe data of the transaction.\nThe difficulty of the block.\nCalculates the effective gas price of the transaction.\nThe excess blob gas of the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalculate this block excess gas and price from the parent …\nThe gas limit of the block.\nThe gas limit of the transaction.\nThe gas price of the transaction.\nThe priority fee per gas.\nReturn <code>blob_excess_gas</code> header field. See EIP-4844.\nSee EIP-4844 and <code>crate::calc_blob_gasprice</code>.\nSee EIP-4844, <code>Env::calc_data_fee</code>, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKZG Settings for point evaluation precompile. By default, …\nIf some it will effects EIP-170: Contract code size limit. …\nReturns max code size from <code>Self::limit_contract_code_size</code> …\nThe max fee per blob gas.\nCreates a new instance by calculating the blob gas price …\nThe nonce of the transaction.\nThe number of ancestor blocks of this block (block height).\nBytecode that is created with CREATE/CREATE2 is by default …\nThe output of the randomness beacon provided by the beacon …\nTakes <code>blob_excess_gas</code> saves it inside env and calculates …\nSets the blob target and max count over hardforks.\nThe timestamp of the block in seconds since the UNIX epoch.\nThe destination of the transaction.\nConfiguration of the transaction that is being executed.\nValidate the block environment.\nValidate transaction data that is set inside ENV and …\nValidate transaction against state.\nThe value sent to <code>transact_to</code>.\nSalt.\nConfiguration environment with the chain spec id.\nEvm environment with the chain spec id.\nHandler configuration fields. It is used to configure the …\nConfiguration environment.\nEvm environment.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandler configuration fields.\nHandler configuration fields.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the optimism feature is enabled and flag …\nCreates new <code>HandlerCfg</code> instance.\nReturns new instance of <code>CfgEnvWithHandlerCfg</code> with the …\nReturns new <code>EnvWithHandlerCfg</code> instance.\nTakes <code>CfgEnvWithHandlerCfg</code> and returns new …\nReturns new <code>CfgEnvWithHandlerCfg</code> instance with the chain …\nReturns new <code>EnvWithHandlerCfg</code> instance with the chain spec …\nReturns the specification id.\nSpecification identification.\nBody size is more than specified in the header.\nEOF Magic in u16 form.\nEOF magic number in array form.\nHash of EF00 bytes that is used for EXTCODEHASH when …\nEVM Object Format (EOF) container.\nEOF container body.\nEOF decode errors.\nEOF Header containing\nInvalid number for code kind\nInvalid data kind\nInvalid EOF magic number.\nInvalid initcode size.\nInvalid EOF version.\nInvalid kind after code\nInvalid terminal code\nInvalid number for types kind\nInvalid types section data.\nInvalid types section size.\nMismatch of code and types sizes.\nShort body while processing EOF.\nShort input while processing EOF.\nThere should be at least one size.\nMissing size.\nInvalid code number.\nInvalid container number.\nTypes section that contains stack information for matching …\nInvalid number of code sections.\nSize cant be zero\nReturns body size. It is sum of code sizes, container …\nReturns the code section at the given index.\nSizes of EOF code section. Code size can’t be zero.\nEOF Container size. Container size can be zero.\nEOF data size.\nReturn index where data size starts. Data size is two …\nDecodes an EOF container body from the given buffer and …\nDecodes EOF header from binary form.\nDecode the section from the input.\nEncodes this body into the given buffer.\nEncodes EOF header into binary form.\nEncode the section into the buffer.\nReturns raw size of the EOF.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninputs - 1 byte - <code>0x00-0x7F</code> number of stack elements the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates an EOF container from this body.\nCalculates the difference between the number of input and …\nTrue if section is non-returning.\nmax_stack_height - 2 bytes - <code>0x0000-0x03FF</code> maximum number …\nReturns new <code>TypesSection</code> with the given inputs, outputs, …\noutputs - 1 byte - <code>0x00-0x80</code> number of stack elements the …\nLength of the header in bytes.\nsum code sizes\nsum container sizes\nReturns number of types.\nSize of EOF types section. types section includes num of …\nValidate the section.\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA builder for computing where in a HashMap a key-value …\nA builder for computing where in a HashMap a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nConstructs a new <code>RandomState</code>.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nThe entry in the map that was already occupied.\nCreates an iterator which uses a closure to determine if …\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash.\nAccess an entry by hash.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an entry by a key and its hash.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nReturns the key-value pair corresponding to the supplied …\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the keys in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nGets a reference to the key in the entry.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreates a new <code>DefaultHasher</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it.\nRemoves a key from the map, returning the stored key and …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map.\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nThe value which was not inserted, because the entry was …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the set can hold without …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains a value.\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the set, returning all elements as an iterator. …\nGets the given value’s corresponding entry in the set …\nCreates an iterator which uses a closure to determine if a …\nConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value in the set, if any, that …\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nReturns a reference to the set’s <code>BuildHasher</code>.\nAdds a value to the set.\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nTake ownership of the value.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all elements in arbitrary order. The …\nReturns the number of elements in the set.\nCreates an empty <code>HashSet</code>.\nEnsures a value is in the entry by inserting if it was …\nRemoves a value from the set. Returns whether the value was\nTakes the value out of the entry, and returns it. Keeps …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates a new empty hash set which will use the given …\nCustom trusted setup.\nDefault mainnet trusted setup\nKZG Settings that allow us to specify a custom trusted …\nStores the setup and parameters needed for computing KZG …\nReturns the argument unchanged.\nReturn set KZG settings.\nCalls <code>U::from(self)</code>.\nA map of valid <code>jump</code> destinations.\nLegacy analyzed\n<code>HashMap</code> optimized for hashing <code>Address</code>.\n<code>HashSet</code> optimized for hashing <code>Address</code>.\n<code>HashMap</code> optimized for hashing <code>B256</code>.\n<code>HashSet</code> optimized for hashing <code>B256</code>.\nThe default <code>BuildHasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nThe default <code>Hasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nA view into a single entry in a map, which may either be …\n<code>BuildHasher</code> optimized for hashing fixed-size byte arrays.\n<code>Hasher</code> optimized for hashing fixed-size byte arrays.\n<code>HashMap</code> optimized for hashing fixed-size byte arrays.\n<code>HashSet</code> optimized for hashing fixed-size byte arrays.\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\nAn occupied entry.\n<code>HashMap</code> optimized for hashing <code>Selector</code>.\n<code>HashSet</code> optimized for hashing <code>Selector</code>.\nA vacant entry.\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to this entry’s key.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA builder for computing where in a HashMap a key-value …\nA builder for computing where in a HashMap a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nThe input length is not exactly 192 bytes.\nThe commitment does not match the versioned hash.\nThe proof verification failed.\nSimilar to Standard but takes reference to environment.\nContains the error value\nContains the success value\nCatch-all variant for other errors.\nout of gas is the main error. Others are here just for …\nPrecompile and its handlers.\nPrecompile errors.\nPrecompile execution output\nA precompile operation result.\nStandard simple precompile that takes input and gas limit.\nStateful precompile that is Arc over <code>StatefulPrecompile</code> …\nMutable stateful precompile that is Box over …\nStateful precompile trait. It is used to create a arc …\nArc over stateful precompile.\nBox over mutable stateful precompile\nMutable stateful precompile trait. It is used to create a …\nOutput bytes.\nCall the precompile with the given input and gas limit and …\nCall the precompile with the given input and gas limit and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGas used by the precompile.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the error is out of gas.\nReturns new precompile output with the given gas used and …\nCreate a new stateful precompile.\nCreate a new mutable stateful precompile.\nReturns an other error with the given message.\nAccess list is not supported for blocks before the Berlin …\nEIP-7702 transaction has invalid fields set.\nEIP-7702 is not enabled.\nBlob transaction can’t be a create transaction. <code>to</code> must …\nBlock <code>blob_gas_price</code> is greater than tx-specified …\nBlob transaction contains a versioned hash with an …\n<code>blob_hashes</code>/<code>blob_versioned_hashes</code> is not supported for …\nInitial gas for a Call is bigger than <code>gas_limit</code>.\n<code>gas_limit</code> in the tx is bigger than <code>block_gas_limit</code>.\nCreate init code size exceeds limit (runtime).\nError on created contract that begins with EF\nEIP-3860: Limit and meter initcode\nEIP-3860: Limit and meter initcode. Initcode size limit …\nCustom error.\nDatabase error.\nEOF Subroutine stack overflow\nMain EVM error.\nResult of EVM execution.\nGeneric result of EVM execution. Used to represent error …\nEmpty Authorization List is not allowed.\nThere should be at least one blob in Blob transaction.\nAux data overflow, new aux data is larger than u16 max …\nAud data is smaller then already present data size.\nEOF crate should have <code>to</code> address\nContains the error value\nContains the error value\n<code>excess_blob_gas</code> is not set for Cancun and above.\nResult of a transaction execution.\nGas floor calculated from EIP-7623 Increase calldata cost …\nEIP-1559: <code>gas_price</code> is less than <code>basefee</code>.\nReverted for various reasons and spend all gas.\nIndicates that the EVM has experienced an exceptional …\nHeader validation error.\nTransaction chain id does not match the config chain id.\nCheck for target address validity is only done inside …\nErrors related to misconfiguration of a …\nTransaction validation error.\nTransaction account does not have enough amount of ether …\n<code>max_fee_per_blob_gas</code> is not supported for blocks before …\nNonce overflows in transaction.\nContains the success value\nContains the success value\nOutput of a transaction execution.\nOverflow payment in transaction.\nPrecompile error.\n<code>prevrandao</code> is not set for Merge and above.\nWhen using the EIP-1559 fee model introduced in the London …\nEIP-3607 Reject transactions from senders with deployed …\nReverted by <code>REVERT</code> opcode that doesn’t spend all gas.\nReturned successfully\nReason a transaction successfully completed.\nTransaction has more then <code>max_blob_num_per_block</code> blobs.\nTransaction validation error.\nReturns the created address, if any.\nReturns the output data of the execution output.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gas used.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the output data of the execution output.\nConsumes <code>self</code> and returns the logs if execution is …\nConsumes the type and returns the output data of the …\nReturns true if execution result is a Halt.\nReturns if transaction execution is successful. 1 …\nReturns the logs if execution is successful, or an empty …\nMaps a <code>DBError</code> to a new error type using the provided …\nReturns the output data of the execution.\nStatus of execution\nState that got updated\nHalting will spend all the gas, and will be equal to …\nThe specification ID.\nSpecification IDs and their activation block.\nReturns <code>true</code> if the given specification ID is enabled in …\nReturns <code>true</code> if the given specification ID is enabled in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the given specification ID is enabled in …\nReturns the <code>SpecId</code> for the given <code>u8</code>.\nAccountInfo account information.\nused to mark account as cold\nWhen account is newly created we will not access database …\nEVM State is a mapping from addresses to accounts.\nAn account’s Storage is a mapping from 256-bit integer …\nThis type keeps track of the current value of a storage …\nWhen account is loaded but not touched or interacted with. …\nused only for pre spurious dragon hardforks where existing …\nIf account is marked for self destruction.\nOnly when account is marked as touched we will save it to …\nStructure used for EIP-1153 transient storage.\nGet a flags value with all known bits set.\nAccount balance.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns an iterator over the storage slots that have been …\ncode: if None, <code>code_by_hash</code> will be used to fetch it if …\nReturn bytecode hash associated with this account. If …\ncode hash,\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nReturns a copy of this account with the <code>Bytecode</code> removed. …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nReturns <code>true</code> if the account is not empty.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturns <code>true</code> if account has no nonce and code.\nBalance, nonce, and code.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nReturns true if the present value differs from the …\nRepresents if the storage slot is cold.\nIs account newly created in this transaction.\nIs account empty, check if nonce and balance are zero and …\nWhether all bits in this flags value are unset.\nReturns if an account is empty.\nReturns true if the code hash is the Keccak256 hash of the …\nIs account loaded as not existing from database This is …\nIs account marked for self destruct.\nIf account status is marked as touched.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMark account as cold.\nMarks the storage slot as cold.\nMark account as newly created.\nMark account as self destructed.\nMark account as touched\nMark account as warm and return true if it was previously …\nMarks the storage slot as warm and returns a bool …\nCreates a new <em>unchanged</em> <code>EvmStorageSlot</code> for the given value.\nCreates a new <em>changed</em> <code>EvmStorageSlot</code>.\nCreate new account and mark it as non existing.\nAccount nonce.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns the original value of the storage slot.\nOriginal value of the storage slot.\nReturns the current value of the storage slot.\nPresent value of the storage slot.\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCheck if account is empty and check if empty state before …\nAccount status flags.\nStorage cache\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTake bytecode from account. Code will be set to None.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUnmark created flag.\nUnmark account as self destructed.\nUnmark the touch flag.\nStrip the <code>Bytecode</code> from this account and drop it. This is …\nThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nApproximates <code>factor * e ** (numerator / denominator)</code> using …\nSimple interface to the <code>Keccak-256</code> hash function.")