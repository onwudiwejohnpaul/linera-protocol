searchState.loadedDescShard("revm", 0, "Revm is a Rust EVM implementation.\nCreate account: Actions: Mark account as created Revert: …\nMark account to be destroyed and journal balance to be …\nLoading account does not mean that account will need to be …\nUsed to mark account that is warm inside EVM in regards to …\nTransfer balance between two accounts Action: Transfer …\nEVM call stack limit.\nCall CallStackFrame.\nCode changed Action: Account code changed Revert: Revert …\nMain Context structure that contains both EvmContext and …\nA single precompile handler.\nPrecompiles context.\nStateful precompile that is Arc over …\nMutable stateful precompile that is Box over …\nContext aware stateful precompile trait. It is used to …\nArc over context stateful precompile.\nBox over context mutable stateful precompile\nContext aware mutable stateful precompile trait. It is …\nContext with handler configuration.\nEVM database interface.\nEVM database commit interface.\nEVM database interface.\nThe database error type.\nThe database error type.\nEVM instance containing both internal EVM context and …\nEvm Builder allows building or modifying EVM. Note that …\nEVM context that contains the inner EVM context and …\nCall stack frame.\nBoxed call or create frame.\nContains either a frame or a result.\nProvides access to an <code>Inspector</code> instance.\nEVM contexts contains data that EVM needs for execution.\nEVM Interpreter callbacks.\nSubRoutine checkpoint that will help us to go back from …\nJournal entries that are used to track changes to the …\nA journal of state changes internal to the EVM.\nIncrement nonce Action: Increment nonce by one Revert: …\nOrdinary precompiles\nCall or create result.\nEntry used to track storage changes Action: Storage change …\nEntry used to track storage warming introduced by EIP-2929.\nIt is used to track an EIP-1153 transient storage change. …\nReturns the <em>loaded</em> Account for the given address.\nReturns precompiles addresses.\nReturns precompiles addresses as a HashSet.\nRegister Handler that modifies the behavior of EVM. Check …\nRegister Handler that modifies the behavior of EVM. Check …\nReturn account balance and is_cold flag.\nGet basic account information.\nGet basic account information.\nReturns the reference of block\nGet block hash by block number.\nFetch block hash from database.\nGet block hash by block number.\nReturns the mutable reference of block\nBuilds the <code>Evm</code>.\nReturns evm builder with empty database and empty external …\nCall precompile and executes it. Returns the result of the …\nCalled whenever a call to a contract is about to start.\nCalled whenever a call to a contract is about to start.\nCalled when a call to a contract has concluded.\nCalled when a call to a contract has concluded.\nHandles call return.\nReturns the reference of Env configuration\nReturns reference to <code>CfgEnv</code>.\nHandler configuration.\nReturns the mutable reference of Env configuration\nMakes a checkpoint that in case of Revert can bring back …\nJournal checkpoint.\nCommit the checkpoint.\nReverts all changes to state until given checkpoint.\nClears the JournaledState. Preserving only the spec.\nReturn account code bytes and if address is cold loaded.\nGet account code by its hash.\nGet account code by its hash.\nGet code hash of address.\nCommit changes to the database.\nReturns <code>true</code> if the precompiles contains the given address.\nContext of execution.\nContext of execution, containing both EVM and external …\nCalled when a contract is about to be created.\nCalled when a contract is about to be created.\nCreate account or return false if collision is detected.\nCalled when a contract has been created.\nCalled when a contract has been created.\nHandles create return.\nReturns created address if frame is create otherwise …\nCreate frame has a created address.\nDatabase implementations.\nReturns the reference of database\nDatabase to load data from.\nReturns the mutable reference of database\nReturns call depth.\nThe current call stack depth.\nReturns reference to Environment.\nReturn environment.\nEVM Environment contains all the information about config, …\nCalled when EOF creating is called.\nCalled when EOF creating is called.\nCalled when eof creating has ended.\nCalled when eof creating has ended.\nIf error is present revert changes, otherwise save EOF …\nError that happened during execution.\nEvm Context (internal context).\nExternal contexts.\nDoes cleanup and returns modified state.\nReturns reference to frame data.\nFrame data.\nFrame data.\nReturns mutable reference to frame data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new precompiles context from the given …\nCreates a new precompiles context from the given static …\nReturns reference to gas.\nReturns mutable reference to interpreter result.\nReturns the associated <code>Inspector</code>.\nHandler is a component of the of EVM that contains all the …\nReturns the reference of handler configuration\nInitial load of account. This load will not be tracked …\nCalled before the interpreter is initialized.\nCalled before the interpreter is initialized.\nInner EVM context.\nRegister Inspector handles that interact with Inspector …\nInspector implementations.\nReturn Instruction result.\nReturns a reference to the interpreter.\nInterpreter.\nReturns a mutable reference to the interpreter.\nReturns reference to interpreter result.\nReturns mutable reference to interpreter result.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns internal database and external struct.\nReturns Context and HandlerCfg.\nReturns database and <code>EnvWithHandlerCfg</code>.\nTakes frame and returns frame data.\nCasts frame result to interpreter result.\nReturns true if frame is call frame.\nReturns true if frame is create frame.\nThe journal of state changes, one for each call.\nEVM State with journaling support.\nLoad access list for berlin hard fork.\nLoads an account into memory. Returns <code>true</code> if it is cold …\nload account into memory. return if it is cold or warm …\nLoad account from database to JournaledState.\nLoads code.\nCalled when a log is emitted.\nCalled when a log is emitted.\npush log into subroutine\nEmitted logs.\nMake call frame\nMake create frame.\nMake create frame.\nAllow for evm setting to be modified by feeding current evm\nAllows modification of Evm’s Block Environment.\nAllows modification of Evm’s Config Environment.\nAllows modification of Evm Database.\nAllows modification of Evm Environment.\nAllows modification of external context.\nModify spec id, this will create new EVM that matches this …\nAllows modification of Evm’s Transaction Environment.\nCreates new builder from Evm, Evm is consumed and all …\nCreates a new precompiles context at the given spec ID.\nCreate new context with database.\nCreates new context with external and database.\nCreates new context with handler configuration.\nCreate new EVM.\nCreate new JournaledState.\nCreates new call frame.\nCreates new create frame.\nCreates new create result.\nCreates empty context. This is useful for testing.\nCreates new context with database.\nCreates a new context with the given environment and …\nCreates a new context with the given environment and …\nReturns execution output.\nPrecompiles that are available for evm.\nPre verify transaction by checking Environment, initial …\nResets <code>Handler</code> to default mainnet.\nSets the <code>Database</code> that will be used by <code>Evm</code> and resets the …\nSets the <code>EmptyDB</code> and resets the <code>Handler</code> to default mainnet.\nResets <code>Handler</code> and sets new <code>ExternalContext</code> type. and …\nResets <code>Handler</code> and sets the <code>DatabaseRef</code> that will be used …\nCall frame has return memory range where output will be …\nRuns main call loop.\nSelfdestructs the account.\nCalled when a contract has been self-destructed with funds …\nCalled when a contract has been self-destructed with funds …\nPerformances selfdestruct action. Transfers balance from …\nuse it only if you know that acc is warm Assume account is …\nSet code and its hash to the account.\nSets precompiles\nSets SpecId.\nLoad storage slot, if storage is not present inside the …\nLoad storage slot\nThe spec ID for the EVM.\nReturns specification (hardfork) that the EVM is instanced …\nReturns the configured EVM spec ID.\nStorage change of storage slot, before storing <code>sload</code> will …\nStores storage slot. And returns (original,present,new) …\nReturn reference to state.\nThe current state.\nCalled on each step of the interpreter.\nCalled on each step of the interpreter.\nCalled after <code>step</code> when the instruction has been executed.\nCalled after <code>step</code> when the instruction has been executed.\nGet storage value of address at index.\nGet storage value of address at index.\nReturns the error by replacing it with <code>Ok(())</code>, if any.\nReturns transient storage value.\nRead transient storage tied to the account.\nReturns a mutable reference to the precompiles map.\nMark account as touched as only touched accounts will be …\nMark account as touched as only touched accounts will be …\nTransact transaction\nCommit the changes to the database.\nTransact pre-verified transaction\nTransfers balance from two accounts. Returns error if …\nTransient storage that is discarded after every …\nStores transient storage value.\nStore transient storage tied to the account.\nReturns the reference of transaction\nReturns the mutable reference of transaction\nWarm loaded addresses are used to check if loaded address …\nSets Evm’s Block Environment.\nSets Builder with <code>CfgEnvWithHandlerCfg</code>.\nClears Block environment of EVM.\nClears Environment of EVM.\nClears Transaction environment of EVM.\nSets Builder with <code>ContextWithHandlerCfg</code>.\nSets the <code>Database</code> that will be used by <code>Evm</code>.\nSets the database.\nSets the database.\nSets the <code>EmptyDB</code> as the <code>Database</code> that will be used by <code>Evm</code>.\nSets Evm Environment.\nSets Builder with <code>EnvWithHandlerCfg</code>.\nSets the external context that will be used by <code>Evm</code>.\nThis modifies the EvmBuilder to make it easy to construct …\nSets Builder with <code>HandlerCfg</code>\nSets the <code>DatabaseRef</code> that will be used by <code>Evm</code>.\nSets specification Id , that will mark the version of EVM. …\nSets Evm’s Transaction Environment.\nEVM database interface.\nEVM database commit interface.\nEVM database interface.\nThe database error type.\nThe database error type.\nWraps a <code>DatabaseRef</code> to provide a <code>Database</code> implementation.\nGet basic account information.\nGet basic account information.\nGet basic account information.\nGet block hash by block number\nGet block hash by block number\nGet block hash by block number.\nGet block hash by block number.\nGet account code by its hash\nGet account code by its hash.\nGet account code by its hash.\nCommit changes to the database.\nDatabase that is split on State and BlockHash traits.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet storage value of address at index.\nGet storage value of address at index.\nGet storage value of address at index.\nGet basic account information.\nGet basic account information.\nBlockHash database component from <code>crate::db::Database</code> it …\nGet block hash by block number\nGet block hash by block number\nGet account code by its hash\nGet account code by its hash\nState database component from <code>crate::db::Database</code> it is …\nGet storage value of address at index.\nGet storage value of address at index.\nGet block hash by block number\nGet block hash by block number\nGet basic account information.\nGet basic account information.\nGet account code by its hash\nGet account code by its hash\nGet storage value of address at index.\nGet storage value of address at index.\nAn empty database that always returns default values when …\nAn empty database that always returns default values when …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCustom benchmarking DB that only has account info for the …\nA Database implementation that stores all state changes in …\nA Database implementation that stores all state changes in …\nEVM didn’t interacted with this account\nBefore Spurious Dragon hardfork there was a difference …\nEVM cleared storage of this account, mostly by …\nEVM touched this account. For newer hardfork this means it …\nIf account is selfdestructed or newly created, storage …\nAccount info where None means it is not existing. Not …\nAccount info where None means it is not existing. Not …\nGet basic account information.\nAll cached block hashes from the DatabaseRef.\nAll cached block hashes from the DatabaseRef.\nGet account code by its hash\nTracks all contracts by their code hash.\nTracks all contracts by their code hash.\nThe underlying database (DatabaseRef) that is used to load …\nThe underlying database (DatabaseRef) that is used to load …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert account info but not override storage\ninsert account storage without overriding account info\nInserts the account’s code into the cache.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if EVM cleared storage of this account\nReturns the account for the given address.\nAll logs that were committed via DatabaseCommit::commit.\nAll logs that were committed via DatabaseCommit::commit.\nCreate a new benchmark database with the given bytecode.\nreplace account storage without overriding account info\nGet the value in an account’s storage slot.\nGet storage value of address at index.\nstorage slots\nChange the caller address for the benchmark.\nChange the target address for the benchmark.\nAccount status for Block and Bundle states.\nAccountStatus represents the various states an account can …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAccount is modified but not destroyed. This means that …\nAccount is not modified and just loaded from database.\nThis means storage is known, it can be newly created or …\nReturns the next account status on change.\nReturns the next account status on creation.\nReturns the next account status on selfdestruct.\nReturns the next account status on touched or created …\nReturns the next account status on touched empty account …\nTransition to other state while preserving invariance of …\nAccount was destroyed by calling SELFDESTRUCT. This means …\nAccount information focused on creating of database …\nFetch account info if it exist.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn true if contract was changed\nReturn true of account info was changed.\nCreate new BundleAccount.\nRevert account to previous state and return true if …\nThe approximate size of changes needed to store this …\nAccount status.\nContains both original and present state. When extracting …\nReturn storage slot if it exists.\nUpdate to new state and generate AccountRevert that if …\nWas this account destroyed.\nThis builder is used to help to facilitate the …\nBundle retention policy for applying substate to the …\nBundle state contain only values that got changed\nDon’t check original values, see the implementation of …\nOption for <code>BundleState</code> when converting it to the plain …\nOnly plain state is updated.\nBoth, plain state and reverts, are retained\nCheck changed with original values that BundleState has.\nGet account from state\nApply a transformation to the builder.\nApply a mutable transformation to the builder.\nConsume <code>TransitionState</code> by applying the changes and …\nCreate <code>BundleState</code> instance based on collected information\nReturn builder instance for further manipulation\nGet bytecode from state\nCollect contracts info\nAll created contracts in this block.\nExtend the state with state that is build on top of it.\nExtend the bundle with other state\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMutable getter for <code>contracts</code> field\nMutable getter for <code>revert_account</code> field\nMutable getter for <code>revert_range</code> field\nMutable getter for <code>revert_storage</code> field\nMutable getter for <code>reverts</code> field\nMutable getter for <code>state_original</code> field\nMutable getter for <code>state_present</code> field\nMutable getter for <code>state_storage</code> field\nGetter for <code>states</code> field\nMutable getter for <code>states</code> field\nReturns <code>true</code> if reverts should be retained.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the bundle state into a <code>StateChangeset</code>.\nConsume the bundle state and split it into a <code>StateChangeset</code>…\nIs bundle state empty.\nOriginal value is not known for sure.\nReturn number of changed accounts.\nCreate builder instance\nCreate it with new and old values of both Storage and …\nPrepends present the state with the given BundleState. It …\nReverts the state changes by N transitions back.\nCollect account info of BundleState reverts\nCollect address info of BundleState reverts\nReverts the state changes of the latest transition\nCollect storage info of BundleState reverts\nChanges to revert.\nThe size of reverts in the bundle state.\nSet contracts info.\nSet account info of BundleState reverts.\nSet address info of BundleState reverts.\nSet storage info of BundleState reverts.\nSet address info of BundleState state.\nSet original account info of BundleState state.\nSet present account info of BundleState state.\nSet storage info of BundleState state.\nReturns the approximate size of changes in the bundle …\nReturn reference to the state.\nAccount state.\nCollect address info of BundleState state\nCollect account info of BundleState state\nCollect account info of BundleState state\nThe size of the plain state in the bundle state.\nCollect storage info of BundleState state\nReturn and clear all reverts from BundleState\nTake first N raw reverts from the BundleState.\nGenerate a <code>StateChangeset</code> from the bundle state without …\nGenerate a <code>StateChangeset</code> and <code>PlainStateReverts</code> from the …\nCache state contains both modified and original values.\nBlock state account with account state.\nApply output of revm execution and create account …\nCreated contracts.\nReturns the argument unchanged.\nHas EIP-161 state clear enabled (Spurious Dragon hardfork).\nInsert Loaded (Or LoadedEmptyEip161 if account is empty) …\nSimilar to <code>insert_account</code> but with storage.\nInsert not existing account.\nCalls <code>U::from(self)</code>.\nNew default state.\nSet state clear flag. EIP-161.\nHelper function that returns all accounts.\nCache account contains plain state that gets updated at …\nFetch account info if it exist.\nDrain balance from account and return drained amount and …\nReturns the argument unchanged.\nIncrement balance by <code>balance</code> amount. Assume that balance …\nCalls <code>U::from(self)</code>.\nDissolve account into components.\nReturn true if account is some\nCreate changed account\nCreate account that is destroyed.\nCreate new account that is loaded from database.\nCreate new account that is loaded empty from database.\nLoaded not existing account.\nCreate new account that is newly created\nNewly created account.\nConsume self and make account as destroyed.\nReturn storage slot if it exist.\nAccount got touched and before EIP161 state clear this …\nTouch empty account, related to EIP-161 state clear.\nPlain state reverts are used to easily store reverts into …\nPlain storage changeset. Used to apply storage changes of …\nPlain Storage Revert. Containing old values of changed …\naccounts/storages/contracts for inclusion into database. …\nStorage reverts\nVector of <strong>not</strong> sorted accounts information.\nVector of account with removed contracts bytecode\nAddress of account\nAddress of account\nVector of contracts by bytecode hash. <strong>not</strong> sorted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVector of <strong>not</strong> sorted storage.\nStorage key value pairs.\nVector of storage with its address.\nContains the storage key and old values of that storage. …\nWipe storage,\nIs storage wiped in this revert. Wiped flag is set on …\nConstructs new PlainStateReverts with pre-allocated …\nSimple plain storage that does not have previous value. …\nThis type keeps track of the current value of a storage …\nThis storage represent values that are before block …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the present value differs from the …\nCreates a new <em>unchanged</em> <code>StorageSlot</code> for the given value.\nCreates a new <em>changed</em> <code>StorageSlot</code>.\nReturns the original value of the storage slot.\nReturns the current value of the storage slot.\nWhen loaded with sload present value is set to original …\nThe value of the storage slot before it was changed.\nDepending on previous state of account info this will tell …\nAssumption is that Revert can return full state from any …\nAccount was created and on revert we need to remove it …\nNothing changed\nAccount was changed and on revert we need to put old state.\nSo storage can have multiple types:\nContains reverts of multiple account in multiple …\nExtend reverts with other reverts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume reverts and create <code>PlainStateReverts</code>.\nReturns <code>true</code> if there is nothing to revert, by checking …\nCreate new reverts\nCreate new selfdestruct revert.\nVery similar to new_selfdestructed but it will add …\nCreate revert for states that were before selfdestruct.\nThe approximate size of changes needed to store this …\nSort account inside transition by their address.\nGenerate a <code>PlainStateReverts</code>.\nDatabase boxed with a lifetime and Send.\nState of blockchain.\nMore constrained version of State that uses Boxed database …\nApply evm transitions to transition state.\nIf EVM asks for block hash we will first check if they are …\nIf EVM asks for block hash we will first check if they are …\nReturn the builder that build the State.\nReturns the size hint for the inner bundle state. See …\nAfter block is finishes we merge those changes inside …\nAfter block is finishes we merge those changes inside …\nCached state contains both changed from evm execution and …\nCached state contains both changed from evm execution and …\nOptional database that we use to fetch data from. If …\nOptional database that we use to fetch data from. If …\nDrain balances from given account and return those values.\nReturns the argument unchanged.\nIterate over received balances and increment all account …\nCalls <code>U::from(self)</code>.\nGet a mutable reference to the <code>CacheAccount</code> for the given …\nTake all transitions and merge them inside bundle state. …\nState clear EIP-161 is enabled in Spurious Dragon hardfork.\nTakes the <code>BundleState</code> changeset from the <code>State</code>, replacing …\nBlock state, it aggregates transactions transitions into …\nBlock state, it aggregates transactions transitions into …\nAddition layer that is going to be used to fetched values …\nAddition layer that is going to be used to fetched values …\nAllows building of State and initializing it with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new builder with an empty database.\nCreate a new builder with the given database.\nStarts the thread that will take transitions and do merge …\nAllows setting prestate that is going to be used for …\nMake transitions and update bundle state.\nIt will use different cache for the state. If set, it will …\nSet the database.\nWith boxed version of database.\nTakes DatabaseRef and wraps it with WrapDatabaseRef.\nBy default state clear flag is enabled but for initial …\nAccount Created when EVM state is merged to cache state. …\nCalculate the change in account’s balance for this …\nConsume Self and create account revert from it.\nReturn the balance of account after transition.\nReturns the argument unchanged.\nReturn new contract bytecode if it is changed or newly …\nCalls <code>U::from(self)</code>.\nCreate new LoadedEmpty account.\nPresent bundle account\nReturn the balance of account before transition.\nPrevious account info is needed for account that got …\nMostly needed when previous status Loaded/LoadedEmpty.\nStorage contains both old and new account\nIf there is transition that clears the storage we should …\nUpdate new values of transition. Don’t override old …\nAdd transitions to the transition state. This will insert …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate new transition state containing one …\nTake the contents of this <code>TransitionState</code> and replace it …\nBlock state account with account state\nDeduct the caller to its limit.\nEnd handle, takes result and state and returns final …\nHandles related to stack frames.\nHandle sub call.\nHandle call return\nHandle sub create.\nHandle create return\nGeneric Handle that takes a mutable reference to the …\nGeneric handle that takes a mutable reference to the …\nHandler acts as a proxy and allow to define different …\nInsert call outcome to the parent\nInsert call outcome to the parent\nLoad access list accounts and beneficiary. There is no …\nLoads precompiles into Evm\nMain return handle, takes state from journal and …\nHandles related to post execution after the stack loop is …\nHandles related to pre execution before the stack loop is …\nReimburse the caller with ethereum it didn’t spent.\nReward beneficiary with transaction rewards.\nHandle that validates env.\nInitial gas calculation handle\nHandle that validates transaction environment against the …\nHandles related to validation.\nAppend handle register.\nAppend boxed handle register.\nAppend plain handle register.\nApply EIP-7702 auth list and return gas refund on account …\nApply EIP-7702 auth list\nCall frame call handler.\nFrame call\nCall registered handler for call return.\nCall return\nSpecification ID.\nHandler configuration.\nClean handler.\nClear handle will be called always. In comparison to end …\nCall Create frame\nFrame crate\nCreates the Handler with Generic Spec.\nCall handler for create return.\nCrate return\nDeduct caller to its limit.\nDeduct max value from the caller.\nEnd handler.\nCalled when execution ends. End handle in comparison to …\nValidate env.\nValidate Env.\nCall Create frame\nFrame EOFCreate\nCall handler for create return.\nEOFCreate return\nExecutes single frame.\nExecutes call frame.\nExecutes a single frame.\nReturns reference to frame handler.\nExecution loop that handles frames.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial gas\nValidate and calculate initial transaction gas.\nCall registered handler for inserting call outcome.\nInsert call outcome\nCall handler for inserting create outcome.\nInsert create outcome.\nCall handler for inserting create outcome.\nInsert EOFCreate outcome.\nInstruction table type.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the optimism feature is enabled and flag …\nHandle call return, depending on instruction result gas …\nHandles last frame return, modified gas for refund and …\nMain load\nMain load handle\nLoad precompiles\nLoad precompiles\nMainnet related handlers.\nDefault handler for Ethereum mainnet.\nCreates handler with variable spec id, inside it will call …\nCreates the Handler with variable SpecId, inside it will …\nCreates mainnet ExecutionHandler.\nCreates mainnet MainHandles.\nCreates mainnet MainHandles.\nCreate new ValidationHandles\nCreated new Handler with given configuration.\nReturns the output of transaction.\nMain return handle, returns the output of the transact.\nPop last handle register and reapply all registers that …\nReturns reference to pre execution handler.\nPost Execution handle.\nReturns reference to pre execution handler.\nPre execution handle.\nCalculate final refund\nCalculate final refund\nRegisters that will be called on initialization.\nReimburse the caller with gas that were not spend.\nReimburse the caller with ethereum it didn’t spend.\nReward beneficiary\nReward the beneficiary with caller fee.\nSet instruction table.\nReturns specification ID.\nTake instruction table.\nValidate ttansaction against the state.\nValidate transactions against state data.\nReturns reference to validation handler.\nValidity handles.\nExecutes a single frame. Errors can be returned in the EVM …\nHandles related to stack frames.\nHandle sub call.\nHandle call return\nHandle sub create.\nHandle create return\nHandle EOF sub create.\nHandle EOF create return\nInsert call outcome to the parent\nInsert call outcome to the parent\nInsert EOF crate outcome to the parent\nHandles first frame return handle.\nFrame call\nCall return\nFrame crate\nCrate return\nFrame EOFCreate\nEOFCreate return\nExecutes a single frame.\nInsert call outcome\nInsert create outcome.\nInsert EOFCreate outcome.\nHandles last frame return, modified gas for refund and …\nGeneric Handle that takes a mutable reference to the …\nGeneric handle that takes a mutable reference to the …\nApply EIP-7702 auth list and return number gas refund on …\nHandle frame sub call.\nClear handle clears error and journal state.\nHandle frame sub create.\nDeducts the caller balance to the transaction limit.\nHelper function that deducts the caller balance.\nMainnet end handle does not change the output.\nHandle frame sub create.\nExecute frame\nHandle output of the transaction\nMain load handle\nMain precompile load\nMain return handle, returns the output of the transaction.\nReward beneficiary with gas fee.\nValidate environment for the mainnet.\nValidate initial transaction gas.\nValidates transaction against the state.\nClear handle, doesn’t have output, its purpose is to …\nEnd handle, takes result and state and returns final …\nMain return handle, takes state from journal and …\nHandles related to post execution after the stack loop is …\nRefund handle, calculates the final refund.\nReimburse the caller with ethereum it didn’t spent.\nReward beneficiary with transaction rewards.\nClear handle will be called always. In comparison to end …\nCalled when execution ends. End handle in comparison to …\nMain return handle, returns the output of the transact.\nCalculate final refund\nReimburse the caller with ethereum it didn’t spend.\nReward the beneficiary with caller fee.\nLoad Auth list for EIP-7702, and returns number of created …\nDeduct the caller to its limit.\nLoad access list accounts and beneficiary. There is no …\nLoads precompiles into Evm\nHandles related to pre execution before the stack loop is …\nApply EIP-7702 auth list\nDeduct max value from the caller.\nMain load handle\nLoad precompiles\nBoxed function register.\nEVM Handler\nPlain function register\nAppend handle register.\nAppend boxed handle register.\nAppend plain handle register.\nSpecification ID.\nHandler configuration.\nCreates the Handler with Generic Spec.\nExecutes call frame.\nReturns reference to frame handler.\nExecution loop that handles frames.\nReturns the argument unchanged.\nInstruction table type.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the optimism feature is enabled and flag …\nDefault handler for Ethereum mainnet.\nCreates handler with variable spec id, inside it will call …\nCreates the Handler with variable SpecId, inside it will …\nCreated new Handler with given configuration.\nPop last handle register and reapply all registers that …\nReturns reference to pre execution handler.\nPost Execution handle.\nReturns reference to pre execution handler.\nPre execution handle.\nCall register function to modify EvmHandler.\nRegisters that will be called on initialization.\nSet instruction table.\nReturns specification ID.\nTake instruction table.\nReturns reference to validation handler.\nValidity handles.\nHandle that validates env.\nInitial gas calculation handle\nHandle that validates transaction environment against the …\nHandles related to validation.\nValidate Env.\nValidate and calculate initial transaction gas.\nValidate transactions against state data.\nCustom print Inspector, it has step level information of …\nHelper Inspector that keeps track of gas.\nDummy Inspector, helpful as standalone replacement.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>0x01</code> (“ADD”) opcode.\nThe <code>0x08</code> (“ADDMOD”) opcode.\nThe <code>0x30</code> (“ADDRESS”) opcode.\nThe <code>0x16</code> (“AND”) opcode.\nResult of the account load from Journal state.\nApparent value, that is <strong>not</strong> actually transferred.\nThe <code>0x31</code> (“BALANCE”) opcode.\nThe <code>0x48</code> (“BASEFEE”) opcode.\nThe <code>0x4A</code> (“BLOBBASEFEE”) opcode.\nThe <code>0x49</code> (“BLOBHASH”) opcode.\nThe <code>0x40</code> (“BLOCKHASH”) opcode.\nThe <code>0x1A</code> (“BYTE”) opcode.\nThe <code>0xF1</code> (“CALL”) opcode.\nThe <code>0xF2</code> (“CALLCODE”) opcode.\nThe <code>0x37</code> (“CALLDATACOPY”) opcode.\nThe <code>0x35</code> (“CALLDATALOAD”) opcode.\nThe <code>0x36</code> (“CALLDATASIZE”) opcode.\nThe <code>0x33</code> (“CALLER”) opcode.\nThe <code>0xE3</code> (“CALLF”) opcode.\nThe <code>0x34</code> (“CALLVALUE”) opcode.\nThe <code>0x46</code> (“CHAINID”) opcode.\nThe <code>0x39</code> (“CODECOPY”) opcode.\nThe <code>0x38</code> (“CODESIZE”) opcode.\nThe <code>0x41</code> (“COINBASE”) opcode.\nThe <code>0xF0</code> (“CREATE”) opcode.\nThe <code>0xF5</code> (“CREATE2”) opcode.\n<code>CALL</code>.\nCALL, CALLCODE, DELEGATECALL, STATICCALL or EOF EXT …\n<code>CALLCODE</code>\nInputs for a call.\nInvalid <code>CALL</code> with value transfer in static context.\nIndicates a call or contract creation.\nRepresents the outcome of a call operation in a virtual …\nCall scheme.\nExceeded maximum call depth.\nCall value.\nExecution should continue to the next one.\nEVM contract information.\nLegacy create scheme of <code>CREATE</code>.\nCREATE or CREATE2 instruction called.\nCreate scheme of <code>CREATE2</code>.\nAddress collision during contract creation.\nExceeded contract size limit during creation.\nCreated contract starts with invalid bytes (<code>0xEF</code>).\nExceeded init code size limit (EIP-3860:  Limit and meter …\nRevert if <code>CREATE</code>/<code>CREATE2</code> starts with <code>0xEF00</code>.\nInternal CREATE/CREATE starts with 0xEF00\nInputs for a create call.\nRepresents the outcome of a create operation in an …\nCreate scheme.\nThe <code>0xD3</code> (“DATACOPY”) opcode.\nThe <code>0xD0</code> (“DATALOAD”) opcode.\nThe <code>0xD1</code> (“DATALOADN”) opcode.\nThe <code>0xD2</code> (“DATASIZE”) opcode.\nThe <code>0xF4</code> (“DELEGATECALL”) opcode.\nThe <code>0x44</code> (“DIFFICULTY”) opcode.\nThe <code>0x04</code> (“DIV”) opcode.\nThe <code>0x80</code> (“DUP1”) opcode.\nThe <code>0x89</code> (“DUP10”) opcode.\nThe <code>0x8A</code> (“DUP11”) opcode.\nThe <code>0x8B</code> (“DUP12”) opcode.\nThe <code>0x8C</code> (“DUP13”) opcode.\nThe <code>0x8D</code> (“DUP14”) opcode.\nThe <code>0x8E</code> (“DUP15”) opcode.\nThe <code>0x8F</code> (“DUP16”) opcode.\nThe <code>0x81</code> (“DUP2”) opcode.\nThe <code>0x82</code> (“DUP3”) opcode.\nThe <code>0x83</code> (“DUP4”) opcode.\nThe <code>0x84</code> (“DUP5”) opcode.\nThe <code>0x85</code> (“DUP6”) opcode.\nThe <code>0x86</code> (“DUP7”) opcode.\nThe <code>0x87</code> (“DUP8”) opcode.\nThe <code>0x88</code> (“DUP9”) opcode.\nThe <code>0xE6</code> (“DUPN”) opcode.\n<code>DELEGATECALL</code>\nA dummy Host implementation.\nEmpty shared memory.\nThe <code>0xEC</code> (“EOFCREATE”) opcode.\nEOF CREATE instruction called.\nInputs for EOF create call.\nEOF create can be called from two places:\nStack overflow in EOF subroutine function calls.\nLegacy contract is calling opcode that is enabled only in …\nThe <code>0x14</code> (“EQ”) opcode.\nThe <code>0xE8</code> (“EXCHANGE”) opcode.\nThe <code>0x0A</code> (“EXP”) opcode.\nThe <code>0xF8</code> (“EXTCALL”) opcode.\nThe <code>0x3C</code> (“EXTCODECOPY”) opcode.\nThe <code>0x3F</code> (“EXTCODEHASH”) opcode.\nThe <code>0x3B</code> (“EXTCODESIZE”) opcode.\nThe <code>0xF9</code> (“EXTDELEGATECALL”) opcode.\nThe <code>0xFB</code> (“EXTSTATICCALL”) opcode.\nEIP-7702 code load result that contains optional …\nAux data overflow, new aux data is larger than <code>u16</code> max …\nAux data is smaller then already present data size.\n<code>EXTCALL</code>\n<code>EXTDELEGATECALL</code>\n<code>EXTSTATICCALL</code>\nFatal external error. Returned by database.\nFunction return frame. Needed information for returning …\nFunction Stack\nThe <code>0x5A</code> (“GAS”) opcode.\nThe <code>0x45</code> (“GASLIMIT”) opcode.\nThe <code>0x3A</code> (“GASPRICE”) opcode.\nThe <code>0x11</code> (“GT”) opcode.\nRepresents the state of gas during execution.\nEVM context host.\nThe <code>0xFE</code> (“INVALID”) opcode.\nThe <code>0x15</code> (“ISZERO”) opcode.\nEVM opcode function signature.\nInternal instruction that signals call or create.\nInternal instruction that signals Interpreter should …\nInternal result that are not ex\nEVM bytecode interpreter.\nThe result of an interpreter operation.\nInvalid EVM Object Format (EOF) init code.\n<code>EXT*CALL</code> target address needs to be padded with 0s.\n<code>ExtDelegateCall</code> calling a non EOF contract.\nInternal to ExtDelegateCall\nAn undefined bytecode value encountered during execution.\nInvalid jump destination. Dynamic jumps points to invalid …\nOut of gas error encountered while calling an invalid …\nThe <code>0x56</code> (“JUMP”) opcode.\nThe <code>0x5B</code> (“JUMPDEST”) opcode.\nThe <code>0xE5</code> (“JUMPF”) opcode.\nThe <code>0x57</code> (“JUMPI”) opcode.\nThe <code>0x20</code> (“KECCAK256”) opcode.\nThe <code>0xA0</code> (“LOG0”) opcode.\nThe <code>0xA1</code> (“LOG1”) opcode.\nThe <code>0xA2</code> (“LOG2”) opcode.\nThe <code>0xA3</code> (“LOG3”) opcode.\nThe <code>0xA4</code> (“LOG4”) opcode.\nThe <code>0x10</code> (“LT”) opcode.\nEIP-170: Contract code size limit\nEIP-3860: Limit and meter initcode\nThe <code>0x5E</code> (“MCOPY”) opcode.\nThe <code>0x51</code> (“MLOAD”) opcode.\nThe <code>0x06</code> (“MOD”) opcode.\nThe <code>0x59</code> (“MSIZE”) opcode.\nThe <code>0x52</code> (“MSTORE”) opcode.\nThe <code>0x53</code> (“MSTORE8”) opcode.\nThe <code>0x02</code> (“MUL”) opcode.\nThe <code>0x09</code> (“MULMOD”) opcode.\nThe memory limit of the EVM has been exceeded.\nOut of gas error encountered during memory expansion.\nThe <code>0x19</code> (“NOT”) opcode.\nThe <code>0x43</code> (“NUMBER”) opcode.\nNonce overflow.\nNo action\nThe feature or opcode is not activated in this version of …\nMaps each opcode to its info.\nThe <code>0x17</code> (“OR”) opcode.\nThe <code>0x32</code> (“ORIGIN”) opcode.\nAn EVM opcode.\nUnknown or invalid opcode.\nInsufficient funds for transfer.\nOut of gas error.\nInvalid memory or storage offset.\nPayment amount overflow.\nThe <code>0x58</code> (“PC”) opcode.\nThe <code>0x50</code> (“POP”) opcode.\nThe <code>0x5F</code> (“PUSH0”) opcode.\nThe <code>0x60</code> (“PUSH1”) opcode.\nThe <code>0x69</code> (“PUSH10”) opcode.\nThe <code>0x6A</code> (“PUSH11”) opcode.\nThe <code>0x6B</code> (“PUSH12”) opcode.\nThe <code>0x6C</code> (“PUSH13”) opcode.\nThe <code>0x6D</code> (“PUSH14”) opcode.\nThe <code>0x6E</code> (“PUSH15”) opcode.\nThe <code>0x6F</code> (“PUSH16”) opcode.\nThe <code>0x70</code> (“PUSH17”) opcode.\nThe <code>0x71</code> (“PUSH18”) opcode.\nThe <code>0x72</code> (“PUSH19”) opcode.\nThe <code>0x61</code> (“PUSH2”) opcode.\nThe <code>0x73</code> (“PUSH20”) opcode.\nThe <code>0x74</code> (“PUSH21”) opcode.\nThe <code>0x75</code> (“PUSH22”) opcode.\nThe <code>0x76</code> (“PUSH23”) opcode.\nThe <code>0x77</code> (“PUSH24”) opcode.\nThe <code>0x78</code> (“PUSH25”) opcode.\nThe <code>0x79</code> (“PUSH26”) opcode.\nThe <code>0x7A</code> (“PUSH27”) opcode.\nThe <code>0x7B</code> (“PUSH28”) opcode.\nThe <code>0x7C</code> (“PUSH29”) opcode.\nThe <code>0x62</code> (“PUSH3”) opcode.\nThe <code>0x7D</code> (“PUSH30”) opcode.\nThe <code>0x7E</code> (“PUSH31”) opcode.\nThe <code>0x7F</code> (“PUSH32”) opcode.\nThe <code>0x63</code> (“PUSH4”) opcode.\nThe <code>0x64</code> (“PUSH5”) opcode.\nThe <code>0x65</code> (“PUSH6”) opcode.\nThe <code>0x66</code> (“PUSH7”) opcode.\nThe <code>0x67</code> (“PUSH8”) opcode.\nThe <code>0x68</code> (“PUSH9”) opcode.\nError in precompiled contract execution.\nOut of gas error encountered during the execution of a …\nThe <code>0xE4</code> (“RETF”) opcode.\nThe <code>0xF3</code> (“RETURN”) opcode.\nThe <code>0xEE</code> (“RETURNCONTRACT”) opcode.\nThe <code>0x3E</code> (“RETURNDATACOPY”) opcode.\nThe <code>0xF7</code> (“RETURNDATALOAD”) opcode.\nThe <code>0x3D</code> (“RETURNDATASIZE”) opcode.\nThe <code>0xFD</code> (“REVERT”) opcode.\nThe <code>0xE0</code> (“RJUMP”) opcode.\nThe <code>0xE1</code> (“RJUMPI”) opcode.\nThe <code>0xE2</code> (“RJUMPV”) opcode.\nReturn from the current call.\nInterpreter finished execution.\nReturn a contract (used in contract creation).\n<code>RETURNCONTRACT</code> called outside init EOF code.\nRevert the transaction.\nThe <code>0x1D</code> (“SAR”) opcode.\nThe <code>0x05</code> (“SDIV”) opcode.\nThe <code>0x47</code> (“SELFBALANCE”) opcode.\nThe <code>0xFF</code> (“SELFDESTRUCT”) opcode.\nThe <code>0x13</code> (“SGT”) opcode.\nThe <code>0x1B</code> (“SHL”) opcode.\nThe <code>0x1C</code> (“SHR”) opcode.\nThe <code>0x0B</code> (“SIGNEXTEND”) opcode.\nThe <code>0x54</code> (“SLOAD”) opcode.\nThe <code>0x12</code> (“SLT”) opcode.\nThe <code>0x07</code> (“SMOD”) opcode.\nThe <code>0x55</code> (“SSTORE”) opcode.\nRepresents the result of an <code>sstore</code> operation.\nEVM interpreter stack limit.\nThe <code>0xFA</code> (“STATICCALL”) opcode.\nThe <code>0x00</code> (“STOP”) opcode.\nThe <code>0x03</code> (“SUB”) opcode.\nThe <code>0x90</code> (“SWAP1”) opcode.\nThe <code>0x99</code> (“SWAP10”) opcode.\nThe <code>0x9A</code> (“SWAP11”) opcode.\nThe <code>0x9B</code> (“SWAP12”) opcode.\nThe <code>0x9C</code> (“SWAP13”) opcode.\nThe <code>0x9D</code> (“SWAP14”) opcode.\nThe <code>0x9E</code> (“SWAP15”) opcode.\nThe <code>0x9F</code> (“SWAP16”) opcode.\nThe <code>0x91</code> (“SWAP2”) opcode.\nThe <code>0x92</code> (“SWAP3”) opcode.\nThe <code>0x93</code> (“SWAP4”) opcode.\nThe <code>0x94</code> (“SWAP5”) opcode.\nThe <code>0x95</code> (“SWAP6”) opcode.\nThe <code>0x96</code> (“SWAP7”) opcode.\nThe <code>0x97</code> (“SWAP8”) opcode.\nThe <code>0x98</code> (“SWAP9”) opcode.\nThe <code>0xE7</code> (“SWAPN”) opcode.\nSelf-destruct the current contract.\nResult of a selfdestruct action.\nA sequential memory shared between calls, which uses a <code>Vec</code> …\nEVM stack with STACK_LIMIT capacity of words.\nAttempting to push a value onto a full stack.\nAttempting to pop a value from an empty stack.\nInvalid state modification in static call.\nState load information that contains the data and if the …\n<code>STATICCALL</code>\nEncountered a <code>STOP</code> opcode\nThe <code>0x42</code> (“TIMESTAMP”) opcode.\nThe <code>0x5C</code> (“TLOAD”) opcode.\nThe <code>0x5D</code> (“TSTORE”) opcode.\nConcrete value, transferred from caller to callee at the …\nThe <code>0x18</code> (“XOR”) opcode.\nReturns the apparent value, if any.\nReturns the <strong>apparent</strong> call value.\nConverts a <code>U256</code> value to a <code>isize</code>, saturating to <code>isize::MAX</code> …\nReturns the opcode as a string. This is the inverse of …\nConverts a <code>U256</code> value to a <code>u64</code>, saturating to <code>MAX</code> if the …\nConverts a <code>U256</code> value to a <code>usize</code>, failing the instruction …\nConverts a <code>U256</code> value to a <code>usize</code> and returns <code>ret</code>, failing …\nConverts a <code>U256</code> value to a <code>usize</code>, saturating to <code>MAX</code> if the …\nGet balance of <code>address</code> and if the account is cold.\nGet the block hash of the given block <code>number</code>.\nBytecode contains contract code, size of original code, …\nCurrently run Bytecode that instruction result will point …\nAddress of the account the bytecode was loaded from. This …\nThe account address of bytecode that is going to be …\nReturns the call value, regardless of the transfer value …\nValue send to contract from transaction or from CALL …\nCaller of the EVM.\nThis caller is invoking the call.\nCaller address of the EVM.\nCaller of Eof Craate\nCheck if the <code>SPEC</code> is enabled, and fail the instruction if …\nClears the storage and logs of the dummy host.\nGet code of <code>address</code> and if the account is cold.\nGet code hash of <code>address</code> and if the account is cold.\nReturns a reference to the memory of the current context, …\nReturns a mutable reference to the memory of the current …\nReturns a reference to the contract.\nContract information and invoking data\nCopies elements from one part of the memory to another …\nReturns the address that this create call will create.\nReturns created address\nReturns the gas cost for the current memory expansion.\nReturns the opcode at the current instruction pointer.\nReturns a reference to the underlying data buffer.\nreturned data\nReturns a mutable reference to the underlying data buffer.\nDuplicates the <code>N</code>th value from the top of the stack.\nReturns a reference to the environment.\nReturns a mutable reference to the environment.\nErases a gas cost from the totals.\nExchange two values on the stack.\nPrepares the shared memory for returning to the previous …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEOF function stack.\nEVM gas calculation utilities.\nReturns a reference to the interpreter’s gas state.\nReturns the gas usage information.\nRetrieves a reference to the <code>Gas</code> details from the …\nThe gas state.\nThe gas usage information.\nRecords a <code>gas</code> cost and fails the instruction if it would …\nThe gas limit of the call.\nThe gas limit of the call.\nGas limit for the create call.\nSame as <code>gas!</code>, but with <code>gas</code> as an option.\nReturns the call value, regardless of the type.\nReturns the opcode as a u8.\nReturns the byte at the given offset.\nReturns a U256 of the memory region at the given offset.\nReturns a 32-byte slice of the memory region at the given …\nBytecode hash for legacy. For EOF this would be None.\nThe index of the code container that this frame is …\nReturns the opcode information.\nReturns the opcode information for the given opcode.\nThe init code of the contract.\nContracts data\nThe call data of the call.\nReturns the number of both input and output stack elements.\nReturns the number of input stack elements.\nInserts the outcome of a call into the virtual machine’s …\nInserts the output of a <code>create</code> call into the interpreter.\nThe current instruction pointer.\nReturns a reference to the instruction result.\nRetrieves a reference to the <code>InstructionResult</code> from the …\nThe execution control flag. If this is not set to <code>Continue</code>…\nEVM opcode implementations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDeconstructs the <code>Eip7702CodeLoad</code> by extracting data and …\nConsumes the stack and returns the underlying data buffer.\nReturns result if action is return.\nCalculates the difference between the number of input and …\nReturns whether the call value is apparent, and not …\nReturns true if action is call.\nTrue if account is cold loaded.\nReturns true if action is create.\nTrue if account has delegate code and delegated account is …\nReturns <code>true</code> if the current memory range is empty.\nReturns whether the stack is empty.\nIs account empty, if true account is not created.\nWhether we are Interpreting the Ethereum Object Format …\nWhether the call is initiated from EOF bytecode.\nIs init flag for eof create\nReturns whether the result is an error.\nReturns whether the instruction result is an error.\nReturns true if it is EOF EXT*CALL.\nReturns true if it is ExtDelegateCall.\nReturns true if the EVM has experienced an exceptional halt\nReturns true if the opcode is a legacy jump instruction.\nTakes a u8 and returns true if it is a jump instruction.\nReturns true if the opcode is a jump destination.\nTakes a u8 and returns true if it is a jump destination.\nReturns <code>true</code> if the new value is equal to the present …\nReturns <code>true</code> if the new value is zero.\nReturns true if action is none.\nReturns whether the result is a success.\nReturns whether the instruction result is a success.\nReturns <code>true</code> if the original value is equal to the new …\nReturns <code>true</code> if the original value is equal to the present …\nReturns <code>true</code> if the original value is zero.\nReturns <code>true</code> if the present value is zero.\nReturns true if the opcode is a <code>PUSH</code> instruction.\nTakes a u8 and returns true if it is a push instruction.\nReturns true if action is return.\nReturns whether the result is a revert.\nReturns true if the transaction reverted.\nReturns whether the instruction result is a revert.\nReturns true if action is some.\nWhether the interpreter is in “staticcall” mode, …\nWhether the call is a static call, or is initiated inside …\nReturns true if the transaction returned successfully …\nReturns whether the call value will be transferred.\nReturns whether the given position is a valid jump …\nEOF Create kind\nReturns the length of the current memory range.\nReturns the length of the stack in words.\nReturns the gas limit.\nIs account and delegate code are loaded\nLoad an account code.\nEmit a log owned by <code>address</code> with given <code>LogData</code>.\nMaps the data of the <code>StateLoad</code> to a new value.\nReturns the length of the memory range.\nReturns the start position of the memory offset.\nReturns true if the opcode modifies memory. …\nReturns the opcode name.\nReturn new function frame.\nReturns new function stack.\nCreates a new <code>Gas</code> struct with the given gas limit.\nCreate a new dummy host with the given <code>Env</code>.\nReturns a new <code>StateLoad</code> with the given data and cold load …\nReturns a new <code>Eip7702CodeLoad</code> with the given data and …\nInstantiates a new contract by analyzing the given …\nCreates a new memory instance that can be shared between …\nInstantiate a new stack with the default stack limit.\nCreate new interpreter\nReturns a new <code>InterpreterResult</code> with the given values.\nCreates new call inputs.\nConstructs a new <code>CallOutcome</code>.\nCreates new create inputs.\nConstructs a new <code>CreateOutcome</code>.\nCreate new EOF crate input from transaction that has …\nInstantiate a new opcode from a u8.\nCreates new boxed call inputs.\nReturns boxed create inputs.\nPrepares the shared memory for a new context.\nCreates a new contract from the given <code>Env</code>.\nReturns a new <code>Eip7702CodeLoad</code> with the given data and …\nReturns a new instance of EOFCreateInput.\nCreates a new <code>Gas</code> struct with the given gas limit, but …\nReturns a new <code>Eip7702CodeLoad</code> with the given data and …\nCreates new EOFCreateInputs from transaction.\nInstantiate a new opcode from a u8 without checking if it …\nNew value that is set\nCreates a new contract from the given inputs.\nActions that the EVM should do.\nReturns number of words what would fit to provided number …\nEVM opcode definitions and utilities.\nValue of the storage when it is first read\nReturns a reference to the output data.\nRetrieves a reference to the output bytes from the …\nThe output of the instruction execution.\nReturns the number of output stack elements.\nParses an opcode from a string. This is the inverse of …\nThe program counter where frame execution should continue.\nPeek a value at given index for the stack, where the top of\nPops a frame from the stack and sets current_code_idx to …\nRemoves the topmost element from the stack and returns it, …\nPops <code>U256</code> values from the stack. Fails the instruction if …\nPops 2 values from the stack and returns them, in addition …\nPops 2 values from the stack.\nPops 3 values from the stack.\nPops 4 values from the stack.\nPops 5 values from the stack.\nPops <code>Address</code> values from the stack. Fails the instruction …\nPop <code>Address</code> values from the stack, returns <code>ret</code> on stack …\nPops <code>U256</code> values from the stack, and returns <code>ret</code>. Fails …\nPops <code>U256</code> values from the stack, and returns a reference …\nPop the topmost value, returning the value and the new …\nRemoves the topmost element from the stack and returns it.\nCurrent value of the storage\nReturns the current program counter.\nPushes a new frame to the stack. and sets current_code_idx …\nPush a new value onto the stack.\nPushes a <code>B256</code> value onto the stack. Fails the instruction …\nPush a new value into the stack. If it will exceed the …\nPushes <code>B256</code> values onto the stack. Fails the instruction …\nPushes an arbitrary length slice of bytes onto the stack, …\nRecords an explicit cost.\nRecords a refund value.\nRecords a <code>gas</code> refund.\nReturns the total amount of gas that was refunded.\nReturns the amount of gas remaining.\nReturn remaining gas after subtracting 63/64 parts.\nError if the current call is executing EOF.\nError if not init eof call.\nFails the instruction if the current call is static.\nResizes the memory in-place so that <code>len</code> is equal to <code>new_len</code>…\nResize the memory to the new size. Returns whether the gas …\nResizes the interpreter memory if necessary. Fails the …\nThe result of the instruction execution.\nThe return data buffer for internal calls. It has multi …\nThe return memory offset where the output of the call is …\nReturn stack length\nExecutes the interpreter until it returns or stops.\nThe call scheme.\nThe create scheme.\nMark <code>address</code> to be deleted, with funds transferred to …\nSet memory region at given <code>offset</code>.\nSet a value at given index for the stack, where the top of …\nSets the <code>byte</code> at the given <code>index</code>.\nSets current_code_idx, this is needed for JUMPF opcode.\nSet memory from data. Our memory offset+len is expected to …\nSets the delegation cold load status.\nSet a refund value for final refund.\nSet is_eof_init to true, this is used to enable …\nSet a refund value. This overrides the current refund …\nSet a spent value. This overrides the current spent value.\nSets the given U256 <code>value</code> to the memory region at the …\nSets the given 32-byte <code>value</code> to the memory region at the …\nShared memory.\nReturns a byte slice of the memory region at the given …\nReturns a byte slice of the memory region at the given …\nReturns a byte slice of the memory region at the given …\nGet storage value of <code>address</code> at <code>index</code> and if the account …\nSpends all remaining gas.\nReturns the total amount of gas spent.\nReturns the total amount of gas spent, minus the refunded …\nSet storage value of account address at index.\nReturns a reference to the interpreter’s stack.\nStack.\nReturns a mutable reference to the interpreter’s stack.\nreturned data\nSwaps the topmost value with the <code>N</code>th value from the top.\nTake memory and replace it with empty memory.\nTarget address of the account. Storage of this address is …\nTarget address, this account storage is going to be …\nGet the transient storage value of <code>address</code> at <code>index</code>.\nReturns the HaltReason value the EVM has experienced an …\nReturns the SuccessReason value if this a successful result\nPeeks the top of the stack.\nReturns the transferred value, if any.\nReturns the address of the transfer source account.\nReturns the address of the transfer target account.\nReturns the transfer value.\nReturns <code>true</code> if the call will transfer a non-zero value.\nSet the transient storage value of <code>address</code> at <code>index</code>.\nCall value.\nThe value to transfer.\nValues of ether transferred\nCreates a new memory instance that can be shared between …\nSalt.\nRepresents the state of gas during execution.\nEIP-3860 : Limit and meter initcode\nEIP-1884: Repricing for trie-size-dependent opcodes\nInit and floor gas from transaction\nThe cost of a non-zero byte in calldata.\nThe cost of a non-zero byte in calldata adjusted by …\nThe multiplier for a non zero byte in calldata.\nThe multiplier for a non zero byte in calldata adjusted by …\nThe standard cost of calldata token.\nCalculate the transaction cost floor as specified in …\nInitial gas that is deducted for transaction to be …\nCalculate call gas cost for the call instruction.\nCalculate the cost of buffer per word.\n<code>CREATE2</code> opcode cost calculation.\n<code>EXP</code> opcode cost calculation.\n<code>EXTCODECOPY</code> opcode cost calculation.\nIf transaction is a Call and Prague is enabled floor_gas …\nReturns the argument unchanged.\nRetrieve the total number of tokens in calldata.\nEIP-3860: Limit and meter initcode\nInitial gas for transaction.\nCalls <code>U::from(self)</code>.\n<code>KECCAK256</code> opcode cost calculation.\n<code>LOG</code> opcode cost calculation.\nMemory expansion cost calculation for a given number of …\nMemory expansion cost calculation for a given memory …\n<code>SELFDESTRUCT</code> opcode cost calculation.\n<code>SLOAD</code> opcode cost calculation.\n<code>SSTORE</code> opcode cost calculation.\n<code>SSTORE</code> opcode refund calculation.\n<code>*COPY</code> opcodes cost calculation.\nBerlin warm and cold storage access cost for account …\nBerlin warm and cold storage access cost for account …\nUtility macros to help implementing opcode instruction …\nImplements the <code>SIGNEXTEND</code> opcode as defined in the …\nEIP-145: Bitwise shifting instructions in EVM\nEIP-145: Bitwise shifting instructions in EVM\nEIP-145: Bitwise shifting instructions in EVM\nEOF Create instruction\nPop target address from stack and check if it is valid.\nResize memory and return range of memory. If <code>len</code> is 0 dont …\nInvalid opcode. This opcode halts the execution.\nEIP-140: REVERT instruction\nStop opcode. This opcode halts the execution.\nUnknown opcode. This opcode halts the execution.\nEIP-1052: EXTCODEHASH opcode\nEIP-1884: Repricing for trie-size-dependent opcodes\nEIP-1153: Transient storage opcodes Load value from …\nEIP-1153: Transient storage opcodes Store value to …\nEIP-3198: BASEFEE opcode\nEIP-7516: BLOBBASEFEE opcode\nEIP-1344: ChainID opcode\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEIP-3855: PUSH0 instruction\nEIP-211: New opcodes: RETURNDATASIZE and RETURNDATACOPY\nPart of EOF <code>&lt;https://eips.ethereum.org/EIPS/eip-7069&gt;</code>.\nEIP-211: New opcodes: RETURNDATASIZE and RETURNDATACOPY\nEVM contract information.\nEmpty shared memory.\nEVM bytecode interpreter.\nThe result of an interpreter operation.\nEVM interpreter stack limit.\nA sequential memory shared between calls, which uses a <code>Vec</code> …\nEVM stack with STACK_LIMIT capacity of words.\nBytecode contains contract code, size of original code, …\nCurrently run Bytecode that instruction result will point …\nAddress of the account the bytecode was loaded from. This …\nValue send to contract from transaction or from CALL …\nCaller of the EVM.\nContract information and invoking data\nEOF function stack.\nThe gas state.\nThe gas usage information.\nBytecode hash for legacy. For EOF this would be None.\nContracts data\nThe current instruction pointer.\nThe execution control flag. If this is not set to <code>Continue</code>…\nWhether we are Interpreting the Ethereum Object Format …\nIs init flag for eof create\nWhether the interpreter is in “staticcall” mode, …\nActions that the EVM should do.\nReturns number of words what would fit to provided number …\nThe output of the instruction execution.\nResize the memory to the new size. Returns whether the gas …\nThe result of the instruction execution.\nThe return data buffer for internal calls. It has multi …\nShared memory.\nStack.\nTarget address of the account. Storage of this address is …\nBackward jump should have same smallest and biggest stack …\nBackward jump should have same smallest and biggest stack …\nInvalid jump into immediate bytes.\nCALLF to non returning function is not allowed.\nCode section not accessed.\nCALLF section out of bounds.\nTypes of code sections. It is a error if container to …\nDATA load out of bounds.\nData size needs to be filled for ReturnContract type.\nEOFCREATE points to container out of bounds.\nEOF Error.\nEvery instruction inside bytecode should be forward …\nFirst types section is invalid. It should have inputs 0 …\nTypes section invalid\nJUMPF needs to have enough outputs.\nJUMPF Stack\nJump to out of bounds.\nInvalid jump into immediate bytes.\nJump out of bounds.\nJump with zero offset would make a jump to next opcode, it …\nLast instruction should be terminating.\nMax stack element mismatch.\nBytecode is too small and is missing immediate bytes for …\nSimilar to <code>EofValidationError::MissingImmediateBytes</code> but …\nNo code sections present\nSection is marked as non-returning but has either RETF or …\nOpcode is disabled in EOF. For example JUMP, JUMPI, etc.\nRETF biggest stack num more then outputs.\nMaxIndex in RJUMPV can’t be zero. Zero max index makes …\nReturn contract code.\nReturn or Stop opcodes.\nCALLF stack overflow.\nStack requirement is more than smallest stack items.\nSub container called in two different modes. Check <code>CodeType</code>…\nSub container not accessed.\nSmallest stack items is more than types output.\nOpcode is not known. It is not defined in the opcode table.\nMark code as accessed.\nVector of accessed codes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true of the code is initcode.\nReturns a new instance of <code>CodeSubContainerAccess</code>.\nStack of codes section that needs to be processed.\nCode accessed by subcontainer and expected subcontainer …\nThis code type\nPerform bytecode analysis.\nFully validates an <code>Eof</code> container.\nValidates that:\nValidates an <code>Eof</code> structure, without recursing into …\nDecodes <code>raw</code> into an <code>Eof</code> container and validates it.\nDecodes <code>raw</code> into an <code>Eof</code> container and validates it.\nApparent value, that is <strong>not</strong> actually transferred.\n<code>CALL</code>.\nCALL, CALLCODE, DELEGATECALL, STATICCALL or EOF EXT …\n<code>CALLCODE</code>\nInputs for a call.\nRepresents the outcome of a call operation in a virtual …\nCall scheme.\nCall value.\nLegacy create scheme of <code>CREATE</code>.\nCREATE or CREATE2 instruction called.\nCreate scheme of <code>CREATE2</code>.\nInputs for a create call.\nRepresents the outcome of a create operation in an …\nCreate scheme.\n<code>DELEGATECALL</code>\nEOF CREATE instruction called.\nInputs for EOF create call.\nEOF create can be called from two places:\n<code>EXTCALL</code>\n<code>EXTDELEGATECALL</code>\n<code>EXTSTATICCALL</code>\nNo action\nInterpreter finished execution.\n<code>STATICCALL</code>\nConcrete value, transferred from caller to callee at the …\nThe account address of bytecode that is going to be …\nThis caller is invoking the call.\nCaller address of the EVM.\nCaller of Eof Craate\nThe gas limit of the call.\nThe gas limit of the call.\nGas limit for the create call.\nThe init code of the contract.\nThe call data of the call.\nWhether the call is initiated from EOF bytecode.\nWhether the call is a static call, or is initiated inside …\nEOF Create kind\nThe return memory offset where the output of the call is …\nThe call scheme.\nThe create scheme.\nTarget address, this account storage is going to be …\nCall value.\nThe value to transfer.\nValues of ether transferred\nSalt.\nThe <code>0x01</code> (“ADD”) opcode.\nThe <code>0x08</code> (“ADDMOD”) opcode.\nThe <code>0x30</code> (“ADDRESS”) opcode.\nThe <code>0x16</code> (“AND”) opcode.\nThe <code>0x31</code> (“BALANCE”) opcode.\nThe <code>0x48</code> (“BASEFEE”) opcode.\nThe <code>0x4A</code> (“BLOBBASEFEE”) opcode.\nThe <code>0x49</code> (“BLOBHASH”) opcode.\nThe <code>0x40</code> (“BLOCKHASH”) opcode.\nThe <code>0x1A</code> (“BYTE”) opcode.\nEVM boxed dynamic opcode function signature.\nA table of boxed instructions.\nThe <code>0xF1</code> (“CALL”) opcode.\nThe <code>0xF2</code> (“CALLCODE”) opcode.\nThe <code>0x37</code> (“CALLDATACOPY”) opcode.\nThe <code>0x35</code> (“CALLDATALOAD”) opcode.\nThe <code>0x36</code> (“CALLDATASIZE”) opcode.\nThe <code>0x33</code> (“CALLER”) opcode.\nThe <code>0xE3</code> (“CALLF”) opcode.\nThe <code>0x34</code> (“CALLVALUE”) opcode.\nThe <code>0x46</code> (“CHAINID”) opcode.\nThe <code>0x39</code> (“CODECOPY”) opcode.\nThe <code>0x38</code> (“CODESIZE”) opcode.\nThe <code>0x41</code> (“COINBASE”) opcode.\nThe <code>0xF0</code> (“CREATE”) opcode.\nThe <code>0xF5</code> (“CREATE2”) opcode.\nThe <code>0xD3</code> (“DATACOPY”) opcode.\nThe <code>0xD0</code> (“DATALOAD”) opcode.\nThe <code>0xD1</code> (“DATALOADN”) opcode.\nThe <code>0xD2</code> (“DATASIZE”) opcode.\nThe <code>0xF4</code> (“DELEGATECALL”) opcode.\nThe <code>0x44</code> (“DIFFICULTY”) opcode.\nThe <code>0x04</code> (“DIV”) opcode.\nThe <code>0x80</code> (“DUP1”) opcode.\nThe <code>0x89</code> (“DUP10”) opcode.\nThe <code>0x8A</code> (“DUP11”) opcode.\nThe <code>0x8B</code> (“DUP12”) opcode.\nThe <code>0x8C</code> (“DUP13”) opcode.\nThe <code>0x8D</code> (“DUP14”) opcode.\nThe <code>0x8E</code> (“DUP15”) opcode.\nThe <code>0x8F</code> (“DUP16”) opcode.\nThe <code>0x81</code> (“DUP2”) opcode.\nThe <code>0x82</code> (“DUP3”) opcode.\nThe <code>0x83</code> (“DUP4”) opcode.\nThe <code>0x84</code> (“DUP5”) opcode.\nThe <code>0x85</code> (“DUP6”) opcode.\nThe <code>0x86</code> (“DUP7”) opcode.\nThe <code>0x87</code> (“DUP8”) opcode.\nThe <code>0x88</code> (“DUP9”) opcode.\nThe <code>0xE6</code> (“DUPN”) opcode.\nEVM dynamic opcode function signature.\nThe <code>0xEC</code> (“EOFCREATE”) opcode.\nThe <code>0x14</code> (“EQ”) opcode.\nThe <code>0xE8</code> (“EXCHANGE”) opcode.\nThe <code>0x0A</code> (“EXP”) opcode.\nThe <code>0xF8</code> (“EXTCALL”) opcode.\nThe <code>0x3C</code> (“EXTCODECOPY”) opcode.\nThe <code>0x3F</code> (“EXTCODEHASH”) opcode.\nThe <code>0x3B</code> (“EXTCODESIZE”) opcode.\nThe <code>0xF9</code> (“EXTDELEGATECALL”) opcode.\nThe <code>0xFB</code> (“EXTSTATICCALL”) opcode.\nThe <code>0x5A</code> (“GAS”) opcode.\nThe <code>0x45</code> (“GASLIMIT”) opcode.\nThe <code>0x3A</code> (“GASPRICE”) opcode.\nThe <code>0x11</code> (“GT”) opcode.\nThe <code>0xFE</code> (“INVALID”) opcode.\nThe <code>0x15</code> (“ISZERO”) opcode.\nEVM opcode function signature.\nInstruction table is list of instruction function pointers …\nEither a plain, static instruction table, or a boxed, …\nThe <code>0x56</code> (“JUMP”) opcode.\nThe <code>0x5B</code> (“JUMPDEST”) opcode.\nThe <code>0xE5</code> (“JUMPF”) opcode.\nThe <code>0x57</code> (“JUMPI”) opcode.\nThe <code>0x20</code> (“KECCAK256”) opcode.\nThe <code>0xA0</code> (“LOG0”) opcode.\nThe <code>0xA1</code> (“LOG1”) opcode.\nThe <code>0xA2</code> (“LOG2”) opcode.\nThe <code>0xA3</code> (“LOG3”) opcode.\nThe <code>0xA4</code> (“LOG4”) opcode.\nThe <code>0x10</code> (“LT”) opcode.\nThe <code>0x5E</code> (“MCOPY”) opcode.\nThe <code>0x51</code> (“MLOAD”) opcode.\nThe <code>0x06</code> (“MOD”) opcode.\nThe <code>0x59</code> (“MSIZE”) opcode.\nThe <code>0x52</code> (“MSTORE”) opcode.\nThe <code>0x53</code> (“MSTORE8”) opcode.\nThe <code>0x02</code> (“MUL”) opcode.\nThe <code>0x09</code> (“MULMOD”) opcode.\nAlias for the <code>JUMPDEST</code> opcode.\nThe <code>0x19</code> (“NOT”) opcode.\nThe <code>0x43</code> (“NUMBER”) opcode.\nMaps each opcode to its info.\nThe <code>0x17</code> (“OR”) opcode.\nThe <code>0x32</code> (“ORIGIN”) opcode.\nAn EVM opcode.\nAn error indicating that an opcode is invalid.\nInformation about opcode, such as name, and stack inputs …\nThe <code>0x58</code> (“PC”) opcode.\nThe <code>0x50</code> (“POP”) opcode.\nThe <code>0x5F</code> (“PUSH0”) opcode.\nThe <code>0x60</code> (“PUSH1”) opcode.\nThe <code>0x69</code> (“PUSH10”) opcode.\nThe <code>0x6A</code> (“PUSH11”) opcode.\nThe <code>0x6B</code> (“PUSH12”) opcode.\nThe <code>0x6C</code> (“PUSH13”) opcode.\nThe <code>0x6D</code> (“PUSH14”) opcode.\nThe <code>0x6E</code> (“PUSH15”) opcode.\nThe <code>0x6F</code> (“PUSH16”) opcode.\nThe <code>0x70</code> (“PUSH17”) opcode.\nThe <code>0x71</code> (“PUSH18”) opcode.\nThe <code>0x72</code> (“PUSH19”) opcode.\nThe <code>0x61</code> (“PUSH2”) opcode.\nThe <code>0x73</code> (“PUSH20”) opcode.\nThe <code>0x74</code> (“PUSH21”) opcode.\nThe <code>0x75</code> (“PUSH22”) opcode.\nThe <code>0x76</code> (“PUSH23”) opcode.\nThe <code>0x77</code> (“PUSH24”) opcode.\nThe <code>0x78</code> (“PUSH25”) opcode.\nThe <code>0x79</code> (“PUSH26”) opcode.\nThe <code>0x7A</code> (“PUSH27”) opcode.\nThe <code>0x7B</code> (“PUSH28”) opcode.\nThe <code>0x7C</code> (“PUSH29”) opcode.\nThe <code>0x62</code> (“PUSH3”) opcode.\nThe <code>0x7D</code> (“PUSH30”) opcode.\nThe <code>0x7E</code> (“PUSH31”) opcode.\nThe <code>0x7F</code> (“PUSH32”) opcode.\nThe <code>0x63</code> (“PUSH4”) opcode.\nThe <code>0x64</code> (“PUSH5”) opcode.\nThe <code>0x65</code> (“PUSH6”) opcode.\nThe <code>0x66</code> (“PUSH7”) opcode.\nThe <code>0x67</code> (“PUSH8”) opcode.\nThe <code>0x68</code> (“PUSH9”) opcode.\nThe <code>0xE4</code> (“RETF”) opcode.\nThe <code>0xF3</code> (“RETURN”) opcode.\nThe <code>0xEE</code> (“RETURNCONTRACT”) opcode.\nThe <code>0x3E</code> (“RETURNDATACOPY”) opcode.\nThe <code>0xF7</code> (“RETURNDATALOAD”) opcode.\nThe <code>0x3D</code> (“RETURNDATASIZE”) opcode.\nThe <code>0xFD</code> (“REVERT”) opcode.\nThe <code>0xE0</code> (“RJUMP”) opcode.\nThe <code>0xE1</code> (“RJUMPI”) opcode.\nThe <code>0xE2</code> (“RJUMPV”) opcode.\nThe <code>0x1D</code> (“SAR”) opcode.\nThe <code>0x05</code> (“SDIV”) opcode.\nThe <code>0x47</code> (“SELFBALANCE”) opcode.\nThe <code>0xFF</code> (“SELFDESTRUCT”) opcode.\nThe <code>0x13</code> (“SGT”) opcode.\nThe <code>0x1B</code> (“SHL”) opcode.\nThe <code>0x1C</code> (“SHR”) opcode.\nThe <code>0x0B</code> (“SIGNEXTEND”) opcode.\nThe <code>0x54</code> (“SLOAD”) opcode.\nThe <code>0x12</code> (“SLT”) opcode.\nThe <code>0x07</code> (“SMOD”) opcode.\nThe <code>0x55</code> (“SSTORE”) opcode.\nThe <code>0xFA</code> (“STATICCALL”) opcode.\nThe <code>0x00</code> (“STOP”) opcode.\nThe <code>0x03</code> (“SUB”) opcode.\nThe <code>0x90</code> (“SWAP1”) opcode.\nThe <code>0x99</code> (“SWAP10”) opcode.\nThe <code>0x9A</code> (“SWAP11”) opcode.\nThe <code>0x9B</code> (“SWAP12”) opcode.\nThe <code>0x9C</code> (“SWAP13”) opcode.\nThe <code>0x9D</code> (“SWAP14”) opcode.\nThe <code>0x9E</code> (“SWAP15”) opcode.\nThe <code>0x9F</code> (“SWAP16”) opcode.\nThe <code>0x91</code> (“SWAP2”) opcode.\nThe <code>0x92</code> (“SWAP3”) opcode.\nThe <code>0x93</code> (“SWAP4”) opcode.\nThe <code>0x94</code> (“SWAP5”) opcode.\nThe <code>0x95</code> (“SWAP6”) opcode.\nThe <code>0x96</code> (“SWAP7”) opcode.\nThe <code>0x97</code> (“SWAP8”) opcode.\nThe <code>0x98</code> (“SWAP9”) opcode.\nThe <code>0xE7</code> (“SWAPN”) opcode.\nThe <code>0x42</code> (“TIMESTAMP”) opcode.\nThe <code>0x5C</code> (“TLOAD”) opcode.\nThe <code>0x5D</code> (“TSTORE”) opcode.\nThe <code>0x18</code> (“XOR”) opcode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a mutable reference to the boxed instruction at …\nSets the immediate bytes number.\nReturns the size of the immediate value in bytes.\nReturns the number of input stack elements.\nInserts the instruction into the table with the specified …\nInserts a boxed instruction into the table at the …\nReturns the instruction function for the given opcode and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalculates the difference between the number of input and …\nReturns whether this opcode is disabled in EOF bytecode.\nReturns whether this opcode terminates execution, e.g. <code>STOP</code>…\nMake boxed instruction table that calls <code>f</code> closure for …\nMake instruction table.\nReturns the opcode name.\nCreates a new opcode info with the given name and default …\nCreates a plain instruction table for the given spec. See …\nSets the EOF flag to false.\nReturns the number of output stack elements.\nReplaces a boxed instruction into the table at the …\nSets the number of stack inputs and outputs.\nSets the terminating flag to true.\nConverts the current instruction table to a boxed variant …\nConverts the current instruction table to a boxed variant …\nUpdates every instruction in the table by calling <code>f</code>.\nUpdates a single instruction in the table at the specified …\nUpdates a boxed instruction with a new one.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\nAccess list is not supported for blocks before the Berlin …\nAccountInfo account information.\nAn Ethereum address, 20 bytes in length.\nPerform bytecode analysis.\nWhat bytecode analysis to perform.\nAn unsigned EIP-7702 authorization.\nAuthorization list for EIP-7702 transaction type.\nEIP-7702 transaction has invalid fields set.\nEIP-7702 is not enabled.\n32-byte fixed byte-array type.\nControls the maximum rate of change for blob gas price.\nControls the maximum rate of change for blob gas price …\nEIP-2935: Serve historical block hashes from state\nEIP-2935: Serve historical block hashes from state\nNumber of block hashes that EVM can access in the past …\nBlob transaction can’t be a create transaction. <code>to</code> must …\nStructure holding block blob excess gas and it calculates …\nBlock <code>blob_gas_price</code> is greater than tx-specified …\nThe input length is not exactly 192 bytes.\nThe commitment does not match the versioned hash.\nThe proof verification failed.\nBlob transaction contains a versioned hash with an …\n<code>blob_hashes</code>/<code>blob_versioned_hashes</code> is not supported for …\nThe block environment.\nState of the <code>Bytecode</code> analysis.\nEOF decode errors.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nA transaction that calls a contract or transfer.\nInitial gas for a Call is bigger than <code>gas_limit</code>.\n<code>gas_limit</code> in the tx is bigger than <code>block_gas_limit</code>.\nEVM configuration.\nConfiguration environment with the chain spec id.\nA transaction that creates a contract.\nLegacy create scheme of <code>CREATE</code>.\nA transaction that creates a contract.\nCreate scheme of <code>CREATE2</code>.\nCreate init code size exceeds limit (runtime).\nError on created contract that begins with EF\nEIP-3860: Limit and meter initcode\nEIP-3860: Limit and meter initcode. Initcode size limit …\nCreate scheme.\nCustom trusted setup.\nCustom error.\nDatabase error.\nDefault mainnet trusted setup\nEIP-7702 Version Magic in u16 form.\nEIP-7702 magic number in array form.\nHash of EF01 bytes that is used for EXTCODEHASH when …\nEOF Subroutine stack overflow\nEOF Magic in u16 form.\nEOF magic number in array form.\nHash of EF00 bytes that is used for EXTCODEHASH when …\nMain EVM error.\nResult of EVM execution.\nGeneric result of EVM execution. Used to represent error …\nEIP-7702 delegated bytecode\nEIP-7702 decode error\nBytecode of delegated account, specified in EIP-7702\nBytecode errors.\nEmpty Authorization List is not allowed.\nThere should be at least one blob in Blob transaction.\nEVM environment configuration.\nSimilar to Standard but takes reference to environment.\nKZG Settings that allow us to specify a custom trusted …\nEvm environment with the chain spec id.\nEVM Object Format (EOF) container.\nEthereum Object Format\nEOF decode error\nAux data overflow, new aux data is larger than u16 max …\nAud data is smaller then already present data size.\nEOF crate should have <code>to</code> address\nContains the error value\nContains the error value\nContains the error value\nEVM State is a mapping from addresses to accounts.\nAn account’s Storage is a mapping from 256-bit integer …\nThis type keeps track of the current value of a storage …\n<code>excess_blob_gas</code> is not set for Cancun and above.\nResult of a transaction execution.\nA byte array of fixed length (<code>[u8; N]</code>).\nGas consumption of a single data blob (== blob byte size).\nGas floor calculated from EIP-7623 Increase calldata cost …\nEIP-1559: <code>gas_price</code> is less than <code>basefee</code>.\nReverted for various reasons and spend all gas.\nIndicates that the EVM has experienced an exceptional …\nHandler configuration fields. It is used to configure the …\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\nHeader validation error.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\nIndicates a failed recovery attempt where no valid address …\nTransaction chain id does not match the config chain id.\nCheck for target address validity is only done inside …\nErrors related to misconfiguration of a …\nInvalid length of the raw bytecode. It should be 23 bytes.\nAll Eip7702 bytecodes should start with the magic number …\nTransaction validation error.\nA map of valid <code>jump</code> destinations.\nThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.\nStores the setup and parameters needed for computing KZG …\nTransaction account does not have enough amount of ether …\nThe bytecode has been analyzed for valid jump destinations.\nLegacy analyzed\nNo analysis has been performed.\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nEIP-170: Contract code size limit\nEIP-3860: Limit and meter initcode\nMinimum gas price for data blobs.\n<code>max_fee_per_blob_gas</code> is not supported for blocks before …\nNonce overflows in transaction.\nContains the success value\nContains the success value\nContains the success value\nCatch-all variant for other errors.\nout of gas is the main error. Others are here just for …\nOutput of a transaction execution.\nOverflow payment in transaction.\nThe address of precompile 3, which is handled specially in …\nPrecompile and its handlers.\nPrecompile error.\nPrecompile errors.\nPrecompile execution output\nA precompile operation result.\n<code>prevrandao</code> is not set for Merge and above.\nAn Ethereum ECDSA signature.\nWhen using the EIP-1559 fee model introduced in the London …\nDo not perform bytecode analysis.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nEIP-3607 Reject transactions from senders with deployed …\nReverted by <code>REVERT</code> opcode that doesn’t spend all gas.\nThe specification ID.\nA signed EIP-7702 authorization.\nSpecification IDs and their activation block.\nStandard simple precompile that takes input and gas limit.\nStateful precompile that is Arc over <code>StatefulPrecompile</code> …\nMutable stateful precompile that is Box over …\nStateful precompile trait. It is used to create a arc …\nArc over stateful precompile.\nBox over mutable stateful precompile\nMutable stateful precompile trait. It is used to create a …\nReturned successfully\nReason a transaction successfully completed.\nTransaction has more then <code>max_blob_num_per_block</code> blobs.\nTransaction destination\nTransaction validation error.\nStructure used for EIP-1153 transient storage.\nThe transaction environment.\nThe <code>to</code> field of a transaction. Either a target address, or …\n256-bit unsigned integer type, consisting of 4, 64-bit …\nOnly supported version is version 0x00.\nFirst version of the blob.\nIndicates a successfully recovered authority address.\nA list of addresses and storage keys that the transaction …\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nList of authorizations, that contains the signature that …\nConverts a sequence of string literals containing …\nAccount balance.\nThe base fee per gas, added in the London upgrade with …\nExcess blob gas and blob gasprice. See also …\nThe calculated blob gas price based on the <code>excess_blob_gas</code>…\nThe list of blob versioned hashes. Per EIP there should be …\nBlob target count. EIP-7840 Add blob schedule to EL config …\nConfiguration of the block the transaction is in.\nOutput bytes.\nConverts a sequence of string literals containing …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCaller aka Author aka transaction signer.\nConfiguration of the EVM itself.\nConfiguration environment.\nThe chain ID of the authorization.\nChain ID of the EVM, it will be compared to the transaction…\nThe chain ID of the transaction. If set to <code>None</code>, no checks …\ncode: if None, <code>code_by_hash</code> will be used to fetch it if …\ncode hash,\nCoinbase or miner or address that created and signed the …\nThe data of the transaction.\nThe plain data.\nThe log data.\nThe difficulty of the block.\nReturns <code>true</code> if the given specification ID is enabled in …\nReturns <code>true</code> if the given specification ID is enabled in …\nEvm environment.\nThe excess blob gas of the block.\nApproximates <code>factor * e ** (numerator / denominator)</code> using …\nConverts a sequence of string literals containing …\nThe gas limit of the block.\nThe gas limit of the transaction.\nThe gas price of the transaction.\nThe priority fee per gas.\nGas used by the precompile.\nHandler configuration fields.\nHandler configuration fields.\nMacro for converting sequence of string literals …\nBalance, nonce, and code.\nRepresents if the storage slot is cold.\nSimple interface to the <code>Keccak-256</code> hash function.\nKZG Settings for point evaluation precompile. By default, …\nIf some it will effects EIP-170: Contract code size limit. …\nThe max fee per blob gas.\nThe nonce for the authorization.\nThe nonce of the transaction.\nAccount nonce.\nThe number of ancestor blocks of this block (block height).\nOriginal value of the storage slot.\nBytecode that is created with CREATE/CREATE2 is by default …\nPresent value of the storage slot.\nThe output of the randomness beacon provided by the beacon …\nStatus of execution\nSpecification identification.\nState that got updated\nAccount status flags.\nStorage cache\nKeys of storage that would be loaded at the start of …\nThe timestamp of the block in seconds since the UNIX epoch.\nThe destination of the transaction.\nConfiguration of the transaction that is being executed.\nThe value sent to <code>transact_to</code>.\nSalt.\nHalting will spend all the gas, and will be equal to …\nAn Ethereum address, 20 bytes in length.\nStack-allocated buffer for efficiently computing address …\nError type for address checksum validation.\n16-byte fixed byte-array type.\n20-byte fixed byte-array type.\n32-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\nNumber of bits to set per input in Ethereum bloom filter.\nSize of the bloom filter in bits\nSize of the bloom filter in bytes.\nThe error type that is returned when conversion to or from …\nA block hash.\nA block number.\nA block timestamp.\nEthereum 256 byte bloom filter.\nInput to the <code>Bloom::accrue</code> method.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nA transaction that calls a contract or transfer.\nChain identifier type (introduced in EIP-155).\nA transaction that creates a contract.\nExplicit V value. May be EIP-155 modified.\nA byte array of fixed length (<code>[u8; N]</code>).\nError converting from bytes.\nError converting hex to bytes.\nAn Ethereum ABI function pointer, 24 bytes in length.\nAlready hashed input.\nError while decoding hex.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\nError that occurs when the number is too large or too …\nTrait for an object that can be converted into a log data …\nInvalid ERC-55 checksum.\nInvalid parity.\nk256 error\nSimple <code>Keccak-256</code> hasher.\nA log consists of an address, and some log data.\nAn Ethereum event log object.\nLess than zero.\nNon-EIP155. 27 or 28.\nThe parity of the signature, stored as either a V value …\nParity flag. True for odd.\nThe error type that is returned when parsing a signed …\nGreater than or equal to zero.\nAn Ethereum ECDSA signature.\nRaw input to be hashed.\nError that occurs when an invalid digit is encountered …\nSealeable objects.\nA consensus hashable item, with its memoized hash.\nSolidity contract functions are addressed using the first …\nEnum to represent the sign of a 256-bit signed integer.\nAn Ethereum ECDSA signature.\nErrors in signature parsing or verification.\nSigned integer wrapping a <code>ruint::Uint</code>.\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe <code>to</code> field of a transaction. Either a target address, or …\nThe nonce of a transaction.\nThe sequence number of all existing transactions.\n128-bit unsigned integer type, consisting of 2, 64-bit …\n16-bit unsigned integer type, consisting of 1, 64-bit …\n160-bit unsigned integer type, consisting of 3, 64-bit …\n256-bit unsigned integer type, consisting of 4, 64-bit …\n32-bit unsigned integer type, consisting of 1, 64-bit …\n512-bit unsigned integer type, consisting of 8, 64-bit …\n64-bit unsigned integer type, consisting of 1, 64-bit …\n8-bit unsigned integer type, consisting of 1, 64-bit limbs.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\nThe address which emitted this log.\nConverts a sequence of string literals containing …\nType aliases for common primitive types.\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nConverts a sequence of string literals containing …\nThe plain data.\nThe log data.\nHash a message according to EIP-191 (version <code>0x01</code>).\nConverts a sequence of string literals containing …\nCalculate the seal hash, this may be slow.\nMacro for converting sequence of string literals …\nConsume and convert into a <code>LogData</code> object.\nSimple interface to the <code>Keccak-256</code> hash function.\nCompute the logs bloom filter for the given logs.\nRe-exports of map types and utilities.\nAttempts to normalize the v value to a boolean parity …\nSeal a borrowed object by calculating the hash. This may …\nInstantiate an unchecked seal. This should be used with …\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nApplies EIP-155.\nConvert into a <code>LogData</code> object.\nTries to create a <code>Vec</code> containing the arguments.\nCommon Ethereum utilities.\nWrap a fixed-size byte array in a newtype, delegating all …\n128-byte fixed byte-array type.\n16-byte fixed byte-array type.\n2-byte fixed byte-array type.\n24-byte fixed byte-array type.\n256-byte fixed byte-array type.\n28-byte fixed byte-array type.\n32-byte fixed byte-array type.\n4-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\n1-byte fixed byte-array type.\n12-byte fixed byte-array type.\nA block hash.\nA block number.\nA block timestamp.\nChain identifier type (introduced in EIP-155).\nThe 0-bit signed integer type, capable of representing 0.\nThe 1-bit signed integer type, capable of representing 0 …\n104-bit signed integer type, consisting of 2, 64-bit limbs.\n112-bit signed integer type, consisting of 2, 64-bit limbs.\n120-bit signed integer type, consisting of 2, 64-bit limbs.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n136-bit signed integer type, consisting of 3, 64-bit limbs.\n144-bit signed integer type, consisting of 3, 64-bit limbs.\n152-bit signed integer type, consisting of 3, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n168-bit signed integer type, consisting of 3, 64-bit limbs.\n176-bit signed integer type, consisting of 3, 64-bit limbs.\n184-bit signed integer type, consisting of 3, 64-bit limbs.\n192-bit signed integer type, consisting of 3, 64-bit limbs.\n200-bit signed integer type, consisting of 4, 64-bit limbs.\n208-bit signed integer type, consisting of 4, 64-bit limbs.\n216-bit signed integer type, consisting of 4, 64-bit limbs.\n224-bit signed integer type, consisting of 4, 64-bit limbs.\n232-bit signed integer type, consisting of 4, 64-bit limbs.\n24-bit signed integer type, consisting of 1, 64-bit limbs.\n240-bit signed integer type, consisting of 4, 64-bit limbs.\n248-bit signed integer type, consisting of 4, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n40-bit signed integer type, consisting of 1, 64-bit limbs.\n48-bit signed integer type, consisting of 1, 64-bit limbs.\n512-bit signed integer type, consisting of 8, 64-bit limbs.\n56-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n72-bit signed integer type, consisting of 2, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\n80-bit signed integer type, consisting of 2, 64-bit limbs.\n88-bit signed integer type, consisting of 2, 64-bit limbs.\n96-bit signed integer type, consisting of 2, 64-bit limbs.\nSolidity contract functions are addressed using the first …\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe nonce of a transaction.\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n104-bit unsigned integer type, consisting of 2, 64-bit …\n112-bit unsigned integer type, consisting of 2, 64-bit …\n120-bit unsigned integer type, consisting of 2, 64-bit …\n128-bit unsigned integer type, consisting of 2, 64-bit …\n136-bit unsigned integer type, consisting of 3, 64-bit …\n144-bit unsigned integer type, consisting of 3, 64-bit …\n152-bit unsigned integer type, consisting of 3, 64-bit …\n16-bit unsigned integer type, consisting of 1, 64-bit …\n160-bit unsigned integer type, consisting of 3, 64-bit …\n168-bit unsigned integer type, consisting of 3, 64-bit …\n176-bit unsigned integer type, consisting of 3, 64-bit …\n184-bit unsigned integer type, consisting of 3, 64-bit …\n192-bit unsigned integer type, consisting of 3, 64-bit …\n200-bit unsigned integer type, consisting of 4, 64-bit …\n<code>Uint</code> for <code>2048</code> bits.\n208-bit unsigned integer type, consisting of 4, 64-bit …\n216-bit unsigned integer type, consisting of 4, 64-bit …\n224-bit unsigned integer type, consisting of 4, 64-bit …\n232-bit unsigned integer type, consisting of 4, 64-bit …\n24-bit unsigned integer type, consisting of 1, 64-bit …\n240-bit unsigned integer type, consisting of 4, 64-bit …\n248-bit unsigned integer type, consisting of 4, 64-bit …\n256-bit unsigned integer type, consisting of 4, 64-bit …\n32-bit unsigned integer type, consisting of 1, 64-bit …\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n40-bit unsigned integer type, consisting of 1, 64-bit …\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n48-bit unsigned integer type, consisting of 1, 64-bit …\n512-bit unsigned integer type, consisting of 8, 64-bit …\n56-bit unsigned integer type, consisting of 1, 64-bit …\n64-bit unsigned integer type, consisting of 1, 64-bit …\n72-bit unsigned integer type, consisting of 2, 64-bit …\n8-bit unsigned integer type, consisting of 1, 64-bit limbs.\n80-bit unsigned integer type, consisting of 2, 64-bit …\n88-bit unsigned integer type, consisting of 2, 64-bit …\n96-bit unsigned integer type, consisting of 2, 64-bit …\n<code>HashMap</code> optimized for hashing <code>Address</code>.\n<code>HashSet</code> optimized for hashing <code>Address</code>.\n<code>HashMap</code> optimized for hashing <code>B256</code>.\n<code>HashSet</code> optimized for hashing <code>B256</code>.\nThe default <code>BuildHasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nThe default <code>Hasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nA view into a single entry in a map, which may either be …\n<code>BuildHasher</code> optimized for hashing fixed-size byte arrays.\n<code>Hasher</code> optimized for hashing fixed-size byte arrays.\n<code>HashMap</code> optimized for hashing fixed-size byte arrays.\n<code>HashSet</code> optimized for hashing fixed-size byte arrays.\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\nAn occupied entry.\n<code>HashMap</code> optimized for hashing <code>Selector</code>.\n<code>HashSet</code> optimized for hashing <code>Selector</code>.\nA vacant entry.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA builder for computing where in a HashMap a key-value …\nA builder for computing where in a HashMap a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nThe entry in the map that was already occupied.\nThe value which was not inserted, because the entry was …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nError for <code>from_base_le</code> and <code>from_base_be</code>.\nError from <code>Uint::from_base_be</code>.\nA newtype wrapper around <code>Uint</code> that restricts operations to …\nError for <code>TryFrom&lt;Uint&gt;</code>.\nThe requested number base <code>.0</code> is less than two.\nThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>…\nInvalid digit in string.\nInvalid radix, up to base 64 is supported.\n‘Not a number’ (NaN) can not be represented as Uint\nNumber is equal or larger than the target field modulus.\nThe value is too large to fit the target type.\nThe Uint value is too large for the target type.\nError for <code>from_str_radix</code>.\nError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.\nError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\nNegative values can not be represented as Uint.\nValue is too large to fit the Uint.\n⚠️ Collection of bignum algorithms.\nType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.\nCompile time for loops with a <code>const</code> variable for testing.\nMask to apply to the highest limb to get the correct …\nNumber of bytes required to represent the given number of …\nNumber of <code>u64</code> limbs required to represent the given number …\nSupport for external crates.\n⚠️ Lehmer update matrix\n<code>lhs += rhs + carry</code>\nComputes <code>lhs += a</code> and returns the carry.\n⚠️ Computes <code>result += a * b</code> and checks for overflow.\nComputes wrapping <code>lhs += a * b</code> when all arguments are the …\nComputes <code>lhs += a * b</code> and returns the carry.\nCompare two <code>u64</code> slices in reverse order.\n⚠️ Collection of division algorithms.\n⚠️ Division with remainder.\n⚠️ Lehmer’s GCD algorithms.\n⚠️ Lehmer’s extended GCD.\n⚠️ Modular inversion using extended GCD.\nComputes <code>lhs *= a</code> and returns the carry.\nComputes a * b * 2^(-BITS) mod modulus\n<code>lhs -= rhs - borrow</code>\nComputes a^2 * 2^(-BITS) mod modulus\nComputes <code>lhs -= a * b</code> and returns the borrow.\n⚠️ Division with remainder.\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Computes the quotient of a 192 bits divided by a …\nTODO: This implementation is off by one.\n⚠️ Compute single limb division.\n⚠️ Compute single limb normalized division.\n⚠️ Compute double limb division.\n⚠️ Compute double limb normalized division.\n⚠️ In-place Knuth long division with implicit …\n⚠️ In-place Knuth normalized long division with …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - …\n<code>Bits</code> for <code>0</code> bits.\n<code>Bits</code> for <code>1</code> bits.\n<code>Bits</code> for <code>1024</code> bits.\n<code>Bits</code> for <code>128</code> bits.\n<code>Bits</code> for <code>16</code> bits.\n<code>Bits</code> for <code>160</code> bits.\n<code>Bits</code> for <code>192</code> bits.\n<code>Bits</code> for <code>2048</code> bits.\n<code>Bits</code> for <code>256</code> bits.\n<code>Bits</code> for <code>32</code> bits.\n<code>Bits</code> for <code>320</code> bits.\n<code>Bits</code> for <code>384</code> bits.\n<code>Bits</code> for <code>4096</code> bits.\n<code>Bits</code> for <code>448</code> bits.\n<code>Bits</code> for <code>512</code> bits.\n<code>Bits</code> for <code>64</code> bits.\n<code>Bits</code> for <code>768</code> bits.\n<code>Bits</code> for <code>8</code> bits.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>768</code> bits.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nThe prefix used for hashing messages according to EIP-191.\nSigned 256-bit integer.\nThe provided units are not recognized.\nSimple <code>Keccak-256</code> hasher.\nOverflow when parsing a signed number.\nThis enum holds the numeric types that a possible to be …\nUnsigned 256-bit integer.\nEthereum unit. Always less than <code>77</code>.\nError type for <code>Unit</code>-related operations.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nSimple interface to the <code>Keccak-256</code> hash function.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nTries to collect the elements of an iterator into a <code>Vec</code>.\nTries to create a <code>Vec</code> with the given capacity.\nBit-Array Type Definition\nMemory Bus Access Management\nStatically-Allocated, Fixed-Size, Bit Buffer\nBit-Array Value Constructor\nBoxed Bit-Slice Constructor\nBit-Slice Region Constructor\nBit-Vector Constructor\nHeap-Allocated, Fixed-Size, Bit Buffer\nMemory Region Description\nBit-Field Memory Slots\nBit Indices\nConstructor Macros\nMemory Element Descriptions\nIn-Element Bit Ordering\nSymbol Export\nRaw Pointer Implementation\nBit-Addressable Memory Regions\nStorage Memory Description\nDynamically-Allocated, Adjustable-Size, Bit Buffer\nBit View Adapters\nBit-Level Access Instructions\nRead-Only Semivolatile Handle\nRead-Only Shared-Mutable Handle\nRead-Only Shared-Mutable Handle\nRead-Only Shared-Mutable Handle\nRead-Only Shared-Mutable Handle\nRead-Only Shared-Mutable Handle\nThe element type being guarded against improper mutation.\nThe memory-access type this guards.\nThe zero constant.\nClears bits within a memory element to <code>0</code>.\nGets the function that will write <code>value</code> into all bits …\nInverts bits within a memory element.\nLoads the value from memory, allowing for the possibility …\nSets bits within a memory element to <code>1</code>.\nWrites a value to one bit in a memory element, returning …\nBit-Precision Array Immediate\nBit-Array Iteration\nThe ordering of bits within an <code>A::Store</code> element.\nThe wrapped data buffer.\nFixed-Size, Heap-Allocated, Bit Slice\nAn iterator over a <code>BitBox</code>.\nBit-Slice Partitioning\nBit-Slice Element Partitioning\nIndicates that a bit-slice’s contents are entirely in …\nIndicates that a bit-slice’s contents are entirely in …\nPartially-Owned Memory Element\nIndicates that a bit-slice’s contents touch an element …\nIndicates that a bit-slice’s contents touch an element …\nAny bits that wholly-fill elements in the interior of the …\nAny bits that partially-fill the first element of the …\nAny bits that partially-fill the last element of the …\nAll fully-used elements in the bit-slice’s underlying …\nThe first element in the bit-slice’s underlying storage, …\nThe last element in the bit-slice’s underlying storage, …\nC-Style Bit-Field Access\nInteger Loading\nInteger Loading\nBig-Endian Integer Loading\nLittle-Endian Integer Loading\nInteger Storing\nInteger Storing\nBig-Endian Integer Storing\nLittle-Endian Integer Storing\nOne-Bit-After Tail Index\nSemantic Bit Index\nBit Index Error\nMulti-Bit Selection Mask\nBit Position\nOne-Hot Bit Selection Mask\nThe literal <code>!0</code>.\nRegister Descriptions\nThe number of bits required to store an index in the range …\nA mask over all bits that can be used as an index within …\nCounts the number of bits in a value of type <code>T</code>.\nBit Storage Calculator\nIn-Element Bit Ordering\nLeast-Significant-First Bit Traversal\nLeast-Significant-First Bit Traversal\nMost-Significant-First Bit Traversal\nTranslates a semantic bit index into a real bit position.\nProduces a multi-bit selection mask from a range of …\nProduces a multi-bit selection mask from a range of …\nProduces a single-bit selection mask from a bit-index.\nProduces a single-bit selection mask from a bit-index.\nComplete <code>BitOrder</code> Verification\nSingle-Type <code>BitOrder</code> Verification\nAll implementors are required to have <code>Self</code> and <code>Self::Alias</code> …\nAll implementors are required to have their alignment …\nA type that selects the appropriate load/store …\nA sibling <code>BitStore</code> implementor that is known to be …\nImmutable Bit View\nMutable Bit View\nBit-Array Type Definition\nBit-Precision Array Immediate\nFixed-Size, Heap-Allocated, Bit Slice\nIn-Element Bit Ordering\nSingle-Bit Pointer\nBit-Pointer Range\nProxy Bit-Reference\nBit-Addressable Memory\nBit Storage\nBit-Precision Dynamic Array\nLeast-Significant-First Bit Traversal\nLeast-Significant-First Bit Traversal\nThe element type used in the memory region underlying a …\nMost-Significant-First Bit Traversal\nThe underlying element type.\nThe inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes …\nThe zero constant.\nThe zero constant.\nHelper trait for scalars and arrays, but not slices.\nBit View\nC-Style Bit-Field Access\nThe ordering of bits within an <code>A::Store</code> element.\nViews <code>self</code> as an immutable bit-slice region with the <code>O</code> …\nViews <code>self</code> as a mutable bit-slice region with the <code>O</code> …\nViews the type as a mutable slice of its elements.\nViews the type as a slice of its elements.\nTranslates a semantic bit index into a real bit position.\nBit-Array Value Constructor\nBoxed Bit-Slice Constructor\nBit-Slice Region Constructor\nBit-Vector Constructor\nThe wrapped data buffer.\nThe higher, exclusive, bound of the range. The bit to …\nBig-Endian Integer Loading\nLittle-Endian Integer Loading\nLoads a value out of the memory system according to the …\nWraps a raw memory value as a <code>BitStore</code> type.\nThe lower, inclusive, bound of the range. The bit to which …\nBig-Endian Integer Storing\nLittle-Endian Integer Storing\nStores a value into the memory system. This is only called …\nAttempts to view <code>self</code> as an immutable bit-slice region …\nAttempts to view <code>self</code> as a mutable bit-slice region with …\nAttempts to view a memory region as an immutable bit-slice.\nAttempts to view a memory region as a mutable bit-slice.\nViews a memory region as an immutable bit-slice.\nViews a memory region as a mutable bit-slice.\nSingle-Bit Pointer\nErrors produced by invalid bit-pointer components.\nBit-Pointer Range\nProxy Bit-Reference\nAn error produced when creating <code>BitSpan</code> encoded references.\nMarks whether this type contains mutability permissions …\nA basic <code>const</code> marker.\nThe error produced when an address is insufficiently …\nAttempted to construct a bit-pointer with an address not …\nThe base element pointer is not aligned.\nA basic <code>mut</code> marker.\nGeneralized mutability permissions.\nAttempted to construct a bit-pointer with the null element …\nA null pointer was provided.\nCounts the layers of <code>Frozen&lt;&gt;</code> wrapping around a base <code>Const</code> …\nOne of <code>*const</code> or <code>*mut</code>.\nAllow instances to be constructed generically.\nThe requested address is too high, and wraps to zero.\nThe requested length exceeds the <code>BitSpan</code> length ceiling.\nBit-Slice Pointer Construction\nBit-Slice Pointer Construction\nEnsures that an address is well-aligned to its referent …\nBit-wise <code>memcpy</code>\nBit-wise <code>memcpy</code>\nRemote Destructor\nThe higher, exclusive, bound of the range. The bit to …\nBit-Pointer Equality\nFreeze this type, wrapping it in a <code>const</code> marker that may …\nBit-Pointer Hashing\nBit-Pointer Sentinel Value\nBit-Pointer Sentinel Value\nSingle-Bit Read\nSingle-Bit Unaligned Read\nSingle-Bit Volatile Read\nSingle-Bit Replacement\nRaw Bit-Slice Pointer Construction\nRaw Bit-Slice Pointer Construction\nThe lower, inclusive, bound of the range. The bit to which …\nBit Swap\nMany-Bit Swap\nThaw a previously-frozen type, removing its <code>Frozen</code> marker …\nSingle-Bit Write\nBit-wise <code>memset</code>\nBit-wise <code>memset</code>\nSingle-Bit Unaligned Write\nSingle-Bit Volatile Write\nAn iterator over <code>BitSlice</code> that yields <code>&amp;bool</code> directly.\nBit-Addressable Memory\nBit-Slice Indexing\nAn iterator over <code>BitSlice</code> that yields <code>bool</code> directly.\nShared Bit-Slice Chunking\nShared Bit-Slice Exact Chunking\nExclusive Bit-Slice Exact Chunking\nAnti-Aliasing Iterator Adapter\nExclusive Bit-Slice Chunking\nAnti-Aliasing Iterator Adapter\nThe output type of immutable access.\nShared Bit-Slice Iteration\nExclusive Bit-Slice Iteration\nAnti-Aliasing Iterator Adapter\nBit Seeking\nBit Seeking\nThe output type of mutable access.\nShared Bit-Slice Reverse Chunking\nShared Bit-Slice Reverse Exact Chunking\nExclusive Bit-Slice Reverse Exact Chunking\nAnti-Aliasing Iterator Adapter\nExclusive Bit-Slice Chunking\nAnti-Aliasing Iterator Adapter\nShared Bit-Slice Reverse Splitting\nExclusive Bit-Slice Reverse Splitting\nAnti-Aliasing Iterator Adapter\nShared Bit-Slice Reverse Splitting\nExclusive Bit-Slice Reverse Splitting\nAnti-Aliasing Iterator Adapter\nShared Bit-Slice Splitting\nShared Bit-Slice Splitting\nExclusive Bit-Slice Splitting\nAnti-Aliasing Iterator Adapter\nExclusive Bit-Slice Splitting\nAnti-Aliasing Iterator Adapter\nShared Bit-Slice Splitting\nExclusive Bit-Slice Splitting\nAnti-Aliasing Iterator Adapter\nBit-Slice Windowing\nRaw Bit-Slice Construction\nRaw Bit-Slice Construction\nRaw Bit-Slice Construction\nRaw Bit-Slice Construction\nImmutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …\nMutably indexes into a bit-slice, returning <code>None</code> if <code>self</code> …\nImmutably indexes into a bit-slice without doing any …\nMutably indexes into a bit-slice without doing any bounds …\nImmutably indexes into a bit-slice, panicking if <code>self</code> is …\nMutably indexes into a bit-slice, panicking if <code>self</code> is out …\nAll implementors are required to have <code>Self</code> and <code>Self::Alias</code> …\nAll implementors are required to have their alignment …\nA type that selects the appropriate load/store …\nA sibling <code>BitStore</code> implementor that is known to be …\nBit Storage\nThe element type used in the memory region underlying a …\nThe inverse of <code>::Alias</code>. It is used when a <code>BitSlice</code> removes …\nThe zero constant.\nReads a single bit out of the memory system according to …\nReads a single bit out of the memory system according to …\nLoads a value out of the memory system according to the …\nWraps a raw memory value as a <code>BitStore</code> type.\nStores a value into the memory system. This is only called …\nBit-Precision Dynamic Array\nDraining Iteration\nAn iterator over a <code>BitBox</code>.\nSplicing Iteration\nImmutable Bit View\nMutable Bit View\nBit View\nHelper trait for scalars and arrays, but not slices.\nThe underlying element type.\nThe zero constant.\nViews <code>self</code> as an immutable bit-slice region with the <code>O</code> …\nViews <code>self</code> as a mutable bit-slice region with the <code>O</code> …\nViews the type as a mutable slice of its elements.\nViews the type as a slice of its elements.\nWraps <code>self</code> in a <code>BitArray</code>.\nWraps <code>self</code> in a <code>BitArray</code>.\nAttempts to view <code>self</code> as an immutable bit-slice region …\nAttempts to view <code>self</code> as a mutable bit-slice region with …\nAttempts to view a memory region as an immutable bit-slice.\nAttempts to view a memory region as a mutable bit-slice.\nViews a memory region as an immutable bit-slice.\nViews a memory region as a mutable bit-slice.\nEVM database interface.\nEVM database commit interface.\nEVM database interface.\nThe database error type.\nThe database error type.\nWraps a <code>DatabaseRef</code> to provide a <code>Database</code> implementation.\nGet basic account information.\nGet basic account information.\nGet basic account information.\nGet basic account information.\nGet block hash by block number\nGet block hash by block number\nGet block hash by block number.\nGet block hash by block number.\nGet account code by its hash\nGet account code by its hash\nGet account code by its hash.\nGet account code by its hash.\nCommit changes to the database.\nDatabase that is split on State and BlockHash traits.\nGet storage value of address at index.\nGet storage value of address at index.\nGet storage value of address at index.\nGet storage value of address at index.\nGet basic account information.\nGet basic account information.\nBlockHash database component from <code>crate::db::Database</code> it …\nGet block hash by block number\nGet block hash by block number\nGet account code by its hash\nGet account code by its hash\nState database component from <code>crate::db::Database</code> it is …\nGet storage value of address at index.\nGet storage value of address at index.\nGet block hash by block number\nGet block hash by block number\nGet basic account information.\nGet basic account information.\nGet account code by its hash\nGet account code by its hash\nGet storage value of address at index.\nGet storage value of address at index.\nAn unsigned EIP-7702 authorization.\nAuthorization list for EIP-7702 transaction type.\nEIP-7702 Version Magic in u16 form.\nEIP-7702 magic number in array form.\nHash of EF01 bytes that is used for EXTCODEHASH when …\nEIP-7702 first version of bytecode.\nBytecode of delegated account, specified in EIP-7702\nBytecode errors.\nIndicates a failed recovery attempt where no valid address …\nInvalid length of the raw bytecode. It should be 23 bytes.\nAll Eip7702 bytecodes should start with the magic number …\nCost of creating authorized account that was previously …\nAn Ethereum ECDSA signature.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nA signed EIP-7702 authorization.\nOnly supported version is version 0x00.\nIndicates a successfully recovered authority address.\nThe address of the authorization.\nThe chain ID of the authorization.\nThe nonce for the authorization.\nAn unsigned EIP-7702 authorization.\nAuthorization list for EIP-7702 transaction type.\nIndicates a failed recovery attempt where no valid address …\nAn Ethereum ECDSA signature.\nRepresents the outcome of an attempt to recover the …\nA recovered authorization.\nA signed EIP-7702 authorization.\nIndicates a successfully recovered authority address.\nThe address of the authorization.\nThe chain ID of the authorization.\nThe nonce for the authorization.\nEIP-7702 Version Magic in u16 form.\nEIP-7702 magic number in array form.\nHash of EF01 bytes that is used for EXTCODEHASH when …\nEIP-7702 first version of bytecode.\nBytecode of delegated account, specified in EIP-7702\nBytecode errors.\nInvalid length of the raw bytecode. It should be 23 bytes.\nAll Eip7702 bytecodes should start with the magic number …\nOnly supported version is version 0x00.\nPerform bytecode analysis.\nWhat bytecode analysis to perform.\nStructure holding block blob excess gas and it calculates …\nThe block environment.\nA transaction that calls a contract or transfer.\nEVM configuration.\nConfiguration environment with the chain spec id.\nA transaction that creates a contract.\nLegacy create scheme of <code>CREATE</code>.\nCreate scheme of <code>CREATE2</code>.\nCreate scheme.\nEVM environment configuration.\nEvm environment with the chain spec id.\nHandler configuration fields. It is used to configure the …\nDo not perform bytecode analysis.\nTransaction destination\nThe transaction environment.\nA list of addresses and storage keys that the transaction …\nList of authorizations, that contains the signature that …\nThe base fee per gas, added in the London upgrade with …\nExcess blob gas and blob gasprice. See also …\nThe calculated blob gas price based on the <code>excess_blob_gas</code>…\nThe list of blob versioned hashes. Per EIP there should be …\nBlob target count. EIP-7840 Add blob schedule to EL config …\nConfiguration of the block the transaction is in.\nCaller aka Author aka transaction signer.\nConfiguration of the EVM itself.\nConfiguration environment.\nChain ID of the EVM, it will be compared to the transaction…\nThe chain ID of the transaction. If set to <code>None</code>, no checks …\nCoinbase or miner or address that created and signed the …\nThe data of the transaction.\nThe difficulty of the block.\nEvm environment.\nThe excess blob gas of the block.\nThe gas limit of the block.\nThe gas limit of the transaction.\nThe gas price of the transaction.\nThe priority fee per gas.\nHandler configuration fields.\nHandler configuration fields.\nKZG Settings for point evaluation precompile. By default, …\nIf some it will effects EIP-170: Contract code size limit. …\nThe max fee per blob gas.\nThe nonce of the transaction.\nThe number of ancestor blocks of this block (block height).\nBytecode that is created with CREATE/CREATE2 is by default …\nThe output of the randomness beacon provided by the beacon …\nSpecification identification.\nThe timestamp of the block in seconds since the UNIX epoch.\nThe destination of the transaction.\nConfiguration of the transaction that is being executed.\nThe value sent to <code>transact_to</code>.\nSalt.\nConfiguration environment with the chain spec id.\nEvm environment with the chain spec id.\nHandler configuration fields. It is used to configure the …\nConfiguration environment.\nEvm environment.\nHandler configuration fields.\nHandler configuration fields.\nSpecification identification.\nBody size is more than specified in the header.\nEOF Magic in u16 form.\nEOF magic number in array form.\nHash of EF00 bytes that is used for EXTCODEHASH when …\nEVM Object Format (EOF) container.\nEOF container body.\nEOF decode errors.\nEOF Header containing\nInvalid number for code kind\nInvalid data kind\nInvalid EOF magic number.\nInvalid initcode size.\nInvalid EOF version.\nInvalid kind after code\nInvalid terminal code\nInvalid number for types kind\nInvalid types section data.\nInvalid types section size.\nMismatch of code and types sizes.\nShort body while processing EOF.\nShort input while processing EOF.\nThere should be at least one size.\nMissing size.\nInvalid code number.\nInvalid container number.\nTypes section that contains stack information for matching …\nInvalid number of code sections.\nSize cant be zero\nSizes of EOF code section. Code size can’t be zero.\nEOF Container size. Container size can be zero.\nEOF data size.\ninputs - 1 byte - <code>0x00-0x7F</code> number of stack elements the …\nmax_stack_height - 2 bytes - <code>0x0000-0x03FF</code> maximum number …\noutputs - 1 byte - <code>0x00-0x80</code> number of stack elements the …\nsum code sizes\nsum container sizes\nSize of EOF types section. types section includes num of …\nCustom trusted setup.\nDefault mainnet trusted setup\nKZG Settings that allow us to specify a custom trusted …\nStores the setup and parameters needed for computing KZG …\nA map of valid <code>jump</code> destinations.\nLegacy analyzed\nThe input length is not exactly 192 bytes.\nThe commitment does not match the versioned hash.\nThe proof verification failed.\nSimilar to Standard but takes reference to environment.\nContains the error value\nContains the success value\nCatch-all variant for other errors.\nout of gas is the main error. Others are here just for …\nPrecompile and its handlers.\nPrecompile errors.\nPrecompile execution output\nA precompile operation result.\nStandard simple precompile that takes input and gas limit.\nStateful precompile that is Arc over <code>StatefulPrecompile</code> …\nMutable stateful precompile that is Box over …\nStateful precompile trait. It is used to create a arc …\nArc over stateful precompile.\nBox over mutable stateful precompile\nMutable stateful precompile trait. It is used to create a …\nOutput bytes.\nGas used by the precompile.\nAccess list is not supported for blocks before the Berlin …\nEIP-7702 transaction has invalid fields set.\nEIP-7702 is not enabled.\nBlob transaction can’t be a create transaction. <code>to</code> must …\nBlock <code>blob_gas_price</code> is greater than tx-specified …\nBlob transaction contains a versioned hash with an …\n<code>blob_hashes</code>/<code>blob_versioned_hashes</code> is not supported for …\nInitial gas for a Call is bigger than <code>gas_limit</code>.\n<code>gas_limit</code> in the tx is bigger than <code>block_gas_limit</code>.\nCreate init code size exceeds limit (runtime).\nError on created contract that begins with EF\nEIP-3860: Limit and meter initcode\nEIP-3860: Limit and meter initcode. Initcode size limit …\nCustom error.\nDatabase error.\nEOF Subroutine stack overflow\nMain EVM error.\nResult of EVM execution.\nGeneric result of EVM execution. Used to represent error …\nEmpty Authorization List is not allowed.\nThere should be at least one blob in Blob transaction.\nAux data overflow, new aux data is larger than u16 max …\nAud data is smaller then already present data size.\nEOF crate should have <code>to</code> address\nContains the error value\nContains the error value\n<code>excess_blob_gas</code> is not set for Cancun and above.\nResult of a transaction execution.\nGas floor calculated from EIP-7623 Increase calldata cost …\nEIP-1559: <code>gas_price</code> is less than <code>basefee</code>.\nReverted for various reasons and spend all gas.\nIndicates that the EVM has experienced an exceptional …\nHeader validation error.\nTransaction chain id does not match the config chain id.\nCheck for target address validity is only done inside …\nErrors related to misconfiguration of a …\nTransaction validation error.\nTransaction account does not have enough amount of ether …\n<code>max_fee_per_blob_gas</code> is not supported for blocks before …\nNonce overflows in transaction.\nContains the success value\nContains the success value\nOutput of a transaction execution.\nOverflow payment in transaction.\nPrecompile error.\n<code>prevrandao</code> is not set for Merge and above.\nWhen using the EIP-1559 fee model introduced in the London …\nEIP-3607 Reject transactions from senders with deployed …\nReverted by <code>REVERT</code> opcode that doesn’t spend all gas.\nReturned successfully\nReason a transaction successfully completed.\nTransaction has more then <code>max_blob_num_per_block</code> blobs.\nTransaction validation error.\nStatus of execution\nState that got updated\nHalting will spend all the gas, and will be equal to …\nThe specification ID.\nSpecification IDs and their activation block.\nReturns <code>true</code> if the given specification ID is enabled in …\nAccountInfo account information.\nEVM State is a mapping from addresses to accounts.\nAn account’s Storage is a mapping from 256-bit integer …\nThis type keeps track of the current value of a storage …\nStructure used for EIP-1153 transient storage.\nAccount balance.\ncode: if None, <code>code_by_hash</code> will be used to fetch it if …\ncode hash,\nBalance, nonce, and code.\nRepresents if the storage slot is cold.\nAccount nonce.\nOriginal value of the storage slot.\nPresent value of the storage slot.\nAccount status flags.\nStorage cache\nThe Keccak-256 hash of the empty string <code>&quot;&quot;</code>.\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nApproximates <code>factor * e ** (numerator / denominator)</code> using …\nSimple interface to the <code>Keccak-256</code> hash function.\nAn Ethereum address, 20 bytes in length.\n32-byte fixed byte-array type.\nThe input length is not exactly 192 bytes.\nThe input length is not exactly 192 bytes.\nThe commitment does not match the versioned hash.\nThe commitment does not match the versioned hash.\nThe proof verification failed.\nThe proof verification failed.\nWrapper type around <code>bytes::Bytes</code> to support “0x” …\nSimilar to Standard but takes reference to environment.\nContains the error value\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\nA log consists of an address, and some log data.\nContains the success value\nCatch-all variant for other errors.\nCatch-all variant for other errors.\nout of gas is the main error. Others are here just for …\nout of gas is the main error. Others are here just for …")