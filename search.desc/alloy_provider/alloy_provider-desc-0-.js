searchState.loadedDescShard("alloy_provider", 0, "alloy-provider\nA boxed future.\nTrait that helpes convert <code>EthCall</code> into a <code>ProviderCall</code>.\nA builder for an <code>&quot;eth_call&quot;</code> request. This type is returned …\nThe parameters for an <code>&quot;eth_call&quot;</code> RPC request.\nFailed to register pending transaction in heartbeat.\nA task that polls the provider with <code>eth_getFilterChanges</code>, …\nAn identity layer that does nothing.\nHelper struct that houses the params along with the …\nRepresents a transaction that is yet to be confirmed a …\nA builder for configuring a pending transaction watcher.\nConfiguration for watching a pending transaction.\nErrors which may occur when watching a pending transaction.\nProvider is parameterized with a network and a transport. …\nThe provider constructed by this layer.\nA builder for constructing a <code>Provider</code> from various layers.\nThe primary future type for the <code>Provider</code>.\nA layering abstraction in the vein of <code>tower::Layer</code>\nThe output, produces synchronously.\nError occured while getting response from the heartbeat.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nThe root provider manages the RPC client and the …\nAn underlying call to an RPC server.\nA struct that takes an optional <code>BlockId</code> parameter.\nA stack of two providers.\nTransaction was not confirmed after configured timeout.\nUnderlying transport error.\nErrors that may occur when watching a transaction.\nA waiter for a batched call to a remote RPC server.\nThe underlying <code>NetworkWallet</code> type contained in this stack.\nTrait for Providers, Fill stacks, etc, which contain …\nErrors which may occur in heartbeat when watching a …\nFallible cast to a boxed future.\nFallible cast to mutable <code>RpcCall</code>\nFallible cast to mutable <code>Waiter</code>\nFallible cast to a ready value.\nFallible cast to <code>RpcCall</code>\nFallible cast to <code>Waiter</code>\nReturns the block.\nSet the block to use for this call.\nSet the block id.\nThe block id to be used for the RPC call.\nBoxes the inner client.\nHelper function to directly access <code>ProviderBuilder</code> with …\nReturns the <code>ProviderBuilder</code> to build on.\nReturns the <code>ProviderBuilder</code> to build on.\nMethod that needs to be implemented to convert to a …\nExecute a smart contract call with a transaction request …\nExecute a smart contract call with a transaction request …\nReturns the RPC client used to send requests.\nReturns the RPC client used to send requests.\nConnects to a boxed transport with the given connector.\nCreates a new root provider from the provided connection …\nCreate an EIP-2930 access list.\nCreate an EIP-2930 access list.\nReturns a reference to the transaction data.\nGet the default signer address.\nGet the default signer address.\nSet the block id to “earliest”.\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nMethod that needs to be implemented for estimating gas …\nCreate an <code>EthCall</code> future to estimate the gas required for a\nCreate an <code>EthCall</code> future to estimate the gas required for a\nExtended APIs for the provider module.\nAdd a chain ID filler to the stack being built. The filler …\nAdd a transaction filler to the stack being built. …\nTransaction Fillers\nSet the block id to “finalized”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pending transaction builder from the given …\nCreate new EthCall for gas estimates.\nRetrieves account information (Account) for the given …\nRetrieves account information (Account) for the given …\nGets the accounts in the remote node. This is usually …\nGets the accounts in the remote node. This is usually …\nGets the balance of the account.\nGets the balance of the account.\nReturns the base fee per blob gas (blob gas price) in wei.\nReturns the base fee per blob gas (blob gas price) in wei.\nGets a block by either its hash, tag, or number, with full …\nGets a block by either its hash, tag, or number, with full …\nGets a block by its BlockHash, with full transactions or …\nGets a block by its BlockHash, with full transactions or …\nGet a block by its number.\nGet a block by its number.\nGet the last block number available.\nGet the last block number available.\nGets the selected block BlockId receipts.\nGets the selected block BlockId receipts.\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block matching the …\nReturns the number of transactions in a block matching the …\nGets the chain ID.\nGets the chain ID.\nGets the client version.\nGets the client version.\nGets the bytecode located at the corresponding Address.\nGets the bytecode located at the corresponding Address.\nReturns a collection of historical gas information …\nReturns a collection of historical gas information …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nRetrieves a <code>Vec&lt;Log&gt;</code> for the given filter ID.\nRetrieves a <code>Vec&lt;Log&gt;</code> for the given filter ID.\nGets the current gas price in wei.\nGets the current gas price in wei.\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nGets the network ID. Same as <code>eth_chainId</code>.\nGets the network ID. Same as <code>eth_chainId</code>.\nGet the account and storage values of the specified …\nGet the account and storage values of the specified …\nGets a raw transaction by block hash and transaction index …\nGets a raw transaction by block hash and transaction index …\nGets a raw transaction by block number and transaction …\nGets a raw transaction by block number and transaction …\nReturns the EIP-2718 encoded transaction if it exists, see …\nReturns the EIP-2718 encoded transaction if it exists, see …\nWaits for the transaction to confirm with the given number …\nGets the <code>Keccak-256</code> hash of the given data.\nGets the <code>Keccak-256</code> hash of the given data.\nGets the specified storage value from Address.\nGets the specified storage value from Address.\nGets a transaction by block hash and transaction index …\nGets a transaction by block hash and transaction index …\nGets a transaction by block number and transaction index …\nGets a transaction by block number and transaction index …\nGets a transaction by its TxHash.\nGets a transaction by its TxHash.\nGets the transaction count (AKA “nonce”) of the …\nGets the transaction count (AKA “nonce”) of the …\nGets a transaction receipt if it exists, by its TxHash.\nGets a transaction receipt if it exists, by its TxHash.\nGets an uncle block through the tag BlockId and index u64.\nGets an uncle block through the tag BlockId and index u64.\nGets the number of uncles for the block specified by the …\nGets the number of uncles for the block specified by the …\nCheck if the signer can sign for the given address.\nCheck if the signer can sign for the given address.\nSet the block id to a specific hash, without requiring the …\nSet the block id to a specific hash and require the hash …\nReturns the inner configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this builder, returning the inner configuration.\nClones the tx data and overrides into owned data.\nConvert this call into one with owned params, by cloning …\nTrue if this is a boxed future.\nTrue if this is a ready value.\nTrue if this is an RPC call.\nTrue if this is a waiter.\nSet the block id to “latest”.\nWrap the given provider in the layer’s provider.\nAdd a layer to the stack being built. This is similar to …\nUseful layer implementations for the provider. Currently …\nMap the response to a different type. This is usable for …\nSet a function to map the response into a different type. …\nChange the network.\nCreates a new root provider from the given RPC client.\nCreate a new <code>Stack</code>.\nCreate a new <code>ProviderBuilder</code>.\nCreates a new pending transaction builder.\nCreate a new watch for a transaction.\nInstantiates a new <code>EthCallParams</code> with the given data …\nCreate a new CallBuilder.\nNotify the provider that we are interested in new blocks.\nNotify the provider that we are interested in new blocks.\nNotify the provider that we are interested in logs that …\nNotify the provider that we are interested in logs that …\nCreates a new HTTP root provider from the given URL.\nNotify the provider that we are interested in new pending …\nNotify the provider that we are interested in new pending …\nCreate a new <code>RpcWithBlock</code> from a closure producing a …\nCreate a new <code>RpcWithBlock</code> from a <code>RpcCall</code>.\nSet the block id to a specific height.\nBuild this provider with anvil, using the BoxTransport.\nBuild this provider with anvil, using the BoxTransport. The\nBuild this provider with anvil, using the BoxTransport. …\nBuild this provider with anvil, using the BoxTransport. …\nFinish the layer stack by providing a connection string …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a root <code>Provider</code>, …\nReturns a reference to the state overrides if set.\nSet the state overrides for this call.\nThe params to be sent to the RPC call.\nSet the block id to “pending”.\nReturns the provider.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request with type-erased parameters …\nSends a raw JSON-RPC request with type-erased parameters …\nCreates a ready pending transaction.\nInstantiate a new <code>ProviderCall</code> from the output.\nRegisters the watching configuration with the provider.\nReturns the number of confirmations to wait for.\nReturns the number of confirmations to wait for.\nReturns the root provider.\nSet the block id to “safe”.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a transaction to the network.\nBroadcasts a transaction to the network.\nBroadcasts a transaction envelope to the network.\nBroadcasts a transaction envelope to the network.\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nGet an iterator of all signer addresses. Note that because …\nGet an iterator of all signer addresses. Note that because …\nExecutes an arbitrary number of transactions on top of the …\nExecutes an arbitrary number of transactions on top of the …\nConsumes this builder, returning the provider and the …\nGets syncing info.\nGets syncing info.\nReturns the timeout.\nReturns the timeout.\nCreates a new <code>TransactionRequest</code>.\nCreates a new <code>TransactionRequest</code>.\nBuild this provider with anvil, using the BoxTransport. The\nReturns this transaction’s hash.\nReturns the transaction hash.\nReturns the transaction hash.\nRequest provider to uninstall the filter with the given ID.\nRequest provider to uninstall the filter with the given ID.\nProvider-related utilities.\nGet a reference to the underlying wallet.\nAdd a wallet layer to the stack being built.\nGet a mutable reference to the underlying wallet.\nWaits for the transaction to confirm with the given number …\nWatch for new blocks by polling the provider with …\nWatch for new blocks by polling the provider with …\nWatch for new pending transaction bodies by polling the …\nWatch for new pending transaction bodies by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for the confirmation of a single pending transaction …\nWatch for the confirmation of a single pending transaction …\nWatch for new pending transaction by polling the provider …\nWatch for new pending transaction by polling the provider …\nReturns a <code>Weak</code> RPC client used to send requests.\nReturns a <code>Weak</code> RPC client used to send requests.\nSets the block to use for this call.\nAdd cached nonce management to the stack being built.\nAdd a chain layer to the stack being built. The layer will …\nAdd a specific chain ID to the stack being built. The …\nAdd gas estimation to the stack being built.\nAdd nonce management to the stack being built.\nSets the state overrides for this call.\nWraps this configuration with a provider to expose …\nAdd preconfigured set of layers handling gas estimation, …\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nAdd simple nonce management to the stack being built.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nAnvil namespace rpc interface that gives access to several …\nIf set to true will make every account impersonated.\nRemoves all transactions from the pool.\nRemoves transactions from the pool.\nCreate a buffer that represents all state on the chain, …\nReturns true if auto mining is enabled, and false.\nSend transactions impersonating specific account and …\nJump forward in time by the given amount of time, in …\nAppend chain state buffer to current chain. Will overwrite …\nRetrieves metadata about the Anvil instance.\nMines a series of blocks.\nMine blocks, instantly and return the mined blocks. This …\nRetrieves the Anvil node configuration params.\nUnsets the interval for the block timestamp.\nRemoves all transactions from the pool for a specific …\nReorg the chain\nReset the fork to a fresh forked state, and optionally …\nRevert the state of the blockchain to a previous snapshot. …\nEnables or disables, based on the single boolean argument, …\nModifies the balance of an account.\nSet the next block gas limit.\nSets an interval for the block timestamp.\nSets the chain ID.\nSets the code of a contract.\nSets the coinbase address.\nSets the mining behavior to interval with the given …\nEnable or disable logging.\nSet the minimum gas price for the node.\nSets the base fee of the next block.\nSimilar to <code>evm_increaseTime</code> but takes the exact timestamp …\nSets the nonce of an address.\nSets the backend rpc url.\nWrites a single slot of the account’s storage.\nSets the specific timestamp and returns the number of …\nSnapshot the state of the blockchain at the current block.\nStops impersonating an account if previously set with …\nExecute a transaction regardless of signature status.\nMine blocks, instantly. This will mine the blocks …\nFiller for the <code>max_fee_per_blob_gas</code> field in EIP-4844 …\nCached nonce manager\nA <code>TxFiller</code> that populates the chain ID of a transaction.\nA <code>Provider</code> that applies one or more <code>TxFiller</code>s.\nThe properties that this filler retrieves from the RPC. to …\nThe control flow for a filler.\nThe filler has filled in all properties that it can fill.\nA <code>TxFiller</code> that populates gas related fields in …\nA layer that can fill in a <code>TransactionRequest</code> with …\nThe filler is missing a required property.\nA <code>TxFiller</code> that fills nonces on transactions. The behavior …\nA trait that determines the behavior of filling nonces.\nThe filler is ready to fill in the transaction request.\nThe recommended filler, a preconfigured set of layers …\nA trait which may be used to configure default fillers for …\nRecommended fillers for this network.\nThis <code>NonceManager</code> implementation will fetch the …\nA layer that can fill in a <code>TransactionRequest</code> with …\nA layer that signs transactions locally.\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nReturns <code>true</code> if the filler is should continue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nPerforms any synchronous filling. This should be called …\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the next nonce for the given account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new wallet layer with the given wallet.\nCreates a new <code>NonceFiller</code> with the specified <code>NonceManager</code>.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nReturns <code>true</code> if the filler is ready to fill in the …\nReturns the recommended filler for this provider.\nGet a reference to the right filler.\nReturn a control-flow enum indicating whether the filler …\nA layer that wraps an <code>Anvil</code> config.\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nA provider layer that caches RPC responses and serves them …\nThe <code>CacheProvider</code> holds the underlying in-memory LRU cache …\nA layer that wraps a <code>NamedChain</code>. The layer will be used to …\nShareable cache.\nGet the chain’s average blocktime, if applicable.\nReturns the shared cache.\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a value from the cache, if it exists.\nGet deserialized value from the cache.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the cache from a file specified by the path. If the …\nReturns the maximum number of items that can be stored in …\nMaximum number of items that can be stored in the cache.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nInstantiate a new cache layer with the the maximum number …\nInstantiate a new cache provider.\nInstantiate a new shared cache.\nPuts a value into the cache, and returns the old value if …\nSaves the cache to a file specified by the path. If the …\nGet the instance ws endpoint.\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nThe minimum priority fee to provide.\nReturn type of EIP1155 gas fee estimator.\nAn estimator function for EIP1559 fees.\nThe default EIP-1559 fee estimator.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base fee per gas.\nThe max priority fee per gas.")