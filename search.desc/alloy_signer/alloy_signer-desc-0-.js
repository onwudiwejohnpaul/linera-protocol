searchState.loadedDescShard("alloy_signer", 0, "alloy-signer\n<code>ecdsa</code> error.\nContains the error value\nGeneric error type for <code>Signer</code> implementations.\n<code>hex</code> error.\nContains the success value\nGeneric error.\nResult type alias for <code>Error</code>.\n<code>sign_hash</code> is not supported by the signer.\n<code>sign_message</code> is not supported by the signer.\n<code>sign_transaction</code> is not supported by the signer.\n<code>sign_typed_data</code> is not supported by the signer.\nAn Ethereum ECDSA signature.\nSignature error.\nAsynchronous Ethereum signer.\nSynchronous Ethereum signer.\nMismatch between provided transaction chain ID and signer …\nThis operation is not supported by the signer.\nAn unsupported signer operation.\nReturns the signer’s Ethereum Address.\nReturns the byte-array representation of this signature.\nReturns the ERC-2098 compact representation of this …\nReturns the string representation of the operation.\nReturns the signer’s chain ID.\nReturns the signer’s chain ID.\nDecode an RLP-encoded VRS signature. Accepts <code>decode_parity</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses a signature from a byte slice, with a v value\nDecode the signature from the ERC-2098 compact …\nParses a 65-byte long raw signature.\nParses a 65-byte long raw signature.\nCreates a <code>PrimitiveSignature</code> from the serialized <code>r</code> and <code>s</code> …\nInstantiate from a signature and recovery id\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner ECDSA signature.\nReturns <code>true</code> if the error is <code>UnsupportedOperation</code>.\nInstantiate a new signature from <code>r</code>, <code>s</code>, and <code>v</code> values.\nNormalizes the signature into “low S” form as …\nNormalizes the signature into “low S” form as …\nConstructs a new <code>Other</code> error.\nReturns the <code>r</code> component of this signature.\nReturns the recovery ID.\nRecovers an <code>Address</code> from this signature and the given …\nRecovers an <code>Address</code> from this signature and the given …\nRecovers a <code>VerifyingKey</code> from this signature and the given …\nRecovers a <code>VerifyingKey</code> from this signature and the given …\nLength of RLP RS field encoding\nReturns the <code>s</code> component of this signature.\nSets the signer’s chain ID.\nSigns the given hash.\nSigns the given hash.\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nSigns the hash of the provided message after prefixing it, …\nUtility to get and set the chain ID on a transaction and …\nReturns the inner ECDSA signature.\nParses a 65-byte long raw signature.\nReturns the <code>UnsupportedSignerOperation</code> if the error is …\nUtility functions for working with Ethereum signatures.\nReturns the recovery ID as a <code>bool</code>.\nSets the signer’s chain ID and returns <code>self</code>.\nSets the signer’s chain ID and returns <code>self</code>.\nSets the recovery ID by normalizing a <code>v</code> value.\nWrite R and S to an RLP buffer in progress.\nWrite the VRS to the output.\nThe signer’s chain ID.\nThe chain ID provided by the transaction.\nConverts an ECDSA public key to its corresponding Ethereum …\nConvert a raw, uncompressed public key to its …\nConverts an ECDSA private key to its corresponding …")