searchState.loadedDescShard("alloy", 1, "Create a new byte array from the given slice <code>src</code>, …\nLength of RLP RS field encoding\nLength of RLP V field encoding\nComputes the floor of the <code>degree</code>-th root of the number.\nShifts the bits to the left by a specified amount, <code>rhs</code>, …\nShifts the bits to the right by a specified amount, <code>rhs</code>, …\nReturns the <code>s</code> component of this signature.\nSaturating absolute value. Computes <code>self.abs()</code>, returning …\nComputes <code>self + rhs</code>, saturating at the numeric bounds …\nSaturating integer addition. Computes <code>self + rhs</code>, …\nSaturating integer division. Computes <code>self / rhs</code>, …\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, saturating at the numeric bounds …\nSaturating integer multiplication. Computes <code>self * rhs</code>, …\nSaturating negation. Computes <code>-self</code>, returning <code>MAX</code> if …\nRaises self to the power of <code>exp</code>, saturating on overflow.\nSaturating integer exponentiation. Computes <code>self.pow(exp)</code>, …\nSaturating left shift by <code>rhs</code> bits.\nComputes <code>self - rhs</code>, saturating at the numeric bounds …\nSaturating integer subtraction. Computes <code>self - rhs</code>, …\nExamples\nGet the hash.\nSeal a borrowed object by calculating the hash. This may …\nSeal a borrowed object by calculating the hash. This may …\nInstantiate an unchecked seal. This should be used with …\nInstantiate an unchecked seal. This should be used with …\nSeal the object by calculating the hash. This may be slow.\nSeal the object by calculating the hash. This may be slow.\nInstantiate an unchecked seal. This should be used with …\nInstantiate an unchecked seal. This should be used with …\nSets a specific bit to a value.\nSet the topic list, truncating to 4 topics.\nSet the topic list, without length-checking. This allows …\nReturns the sign of self.\nCalculates a heuristic for the in-memory size of this …\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nConsumes the log data, returning the topic list and the …\nDecompose into parts. Alias for <code>Self::into_parts</code>.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nMontgomery squaring.\nConverts an EIP-155 V value to a non-EIP-155 V value.\nPanics\nReturns the address of the contract that will be called or …\nReturns the address and selector of the function.\nReturns an iterator over the base <code>base</code> digits of the …\nReturns an iterator over the base <code>base</code> digits of the …\nConverts the <code>Uint</code> to a big-endian byte array of size …\nConverts <code>self</code> to a big-endian byte array of size exactly …\nConverts the <code>Uint</code> to a big-endian byte vector with leading …\nConverts the <code>Uint</code> to a big-endian byte vector of size …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into a …\nEncodes an Ethereum address to its EIP-55 checksum into …\nConvert to a decimal string.\nApplies EIP-155.\nConvert to a hex string.\nReturns the inner ECDSA signature.\nConverts the <code>Uint</code> to a little-endian byte array of size …\nConverts <code>self</code> to a little-endian byte array of size exactly\nConverts the <code>Uint</code> to a little-endian byte vector with …\nConverts the <code>Uint</code> to a little-endian byte vector of size …\nConvert into a <code>LogData</code> object.\nConvert to a parity bool, dropping any V information.\nReturns the checksum of a formatted address.\nReturn the corresponding u64 V value.\nGet the topic list.\nGet the topic list, mutably. This gives access to the …\nGet a mutable reference to the topic list. This allows …\nReturns the number of trailing ones in the binary …\nReturns the number of leading ones in the binary …\nReturns the number of trailing zeros in the binary …\nReturns the number of leading zeros in the binary …\nParses a raw signature which is expected to be 65 bytes …\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a big endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nCreates a new integer from a little endian slice of bytes.\nTries to create a <code>Vec</code> containing the arguments.\nCompute the two’s complement of this number.\nShortcut for <code>val.try_into().unwrap()</code>.\nShortcut for <code>self.try_into().unwrap()</code>.\nUnseal the inner item, discarding the hash. Alias for …\nComputes the absolute value of <code>self</code> without any wrapping …\nAbsorbs additional input. Can be called multiple times.\nCommon Ethereum utilities.\nReturns the recovery ID as a <code>u8</code>.\nCalculates the complete product <code>self * rhs</code> without the …\nApplies EIP-155 with the given chain ID.\nModifies the recovery ID by applying EIP-155 to a <code>v</code> value.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nCreates a new <code>FixedBytes</code> with the last byte set to <code>x</code>.\nCreates a new byte array with the last byte set to <code>x</code>.\nSets the recovery ID by normalizing a <code>v</code> value.\nModifies the recovery ID by dropping any [EIP-155] v …\nWrap a fixed-size byte array in a newtype, delegating all …\nWrapping absolute value. Computes <code>self.abs()</code>, wrapping …\nComputes <code>self + rhs</code>, wrapping around at the boundary of …\nWrapping (modular) addition. Computes <code>self + rhs</code>, wrapping …\nComputes <code>self / rhs</code> rounding down.\nWrapping (modular) division. Computes <code>self / rhs</code>, wrapping …\nWrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nConstruct a new <code>Uint</code> from the value saturating the value …\nConstruct a new <code>Uint</code> from a little-endian slice of limbs. …\nComputes <code>self * rhs</code>, wrapping around at the boundary of …\nWrapping (modular) multiplication. Computes <code>self * rhs</code>, …\nComputes <code>-self</code>, wrapping around at the boundary of the …\nWrapping (modular) negation. Computes <code>-self</code>, wrapping …\nRaises self to the power of <code>exp</code>, wrapping around on …\nRaises self to the power of <code>exp</code>, wrapping around at the …\nComputes <code>self % rhs</code>.\nWrapping (modular) remainder. Computes <code>self % rhs</code>, …\nWrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>…\nLeft shift by <code>rhs</code> bits.\nWrapping shift left. Computes <code>self &lt;&lt; rhs</code>, returning 0 if …\nRight shift by <code>rhs</code> bits.\nWrapping shift right. Computes <code>self &gt;&gt; rhs</code>, returning 0 if …\nComputes <code>self - rhs</code>, wrapping around at the boundary of …\nWrapping (modular) subtraction. Computes <code>self - rhs</code>, …\nExamples\nWrite R and S to an RLP buffer in progress.\nWrite the V to an RLP buffer without using EIP-155.\nWrite the VRS to the output. The V will always be 27 or 28.\nReturn the y-parity as a boolean.\nReturn the y-parity as 0 or 1\nReturn the y-parity byte as 27 or 28, in the case of a …\n128-byte fixed byte-array type.\n16-byte fixed byte-array type.\n2-byte fixed byte-array type.\n24-byte fixed byte-array type.\n256-byte fixed byte-array type.\n28-byte fixed byte-array type.\n32-byte fixed byte-array type.\n4-byte fixed byte-array type.\n64-byte fixed byte-array type.\n8-byte fixed byte-array type.\n1-byte fixed byte-array type.\n12-byte fixed byte-array type.\nA block hash.\nA block number.\nA block timestamp.\nChain identifier type (introduced in EIP-155).\nThe 0-bit signed integer type, capable of representing 0.\nThe 1-bit signed integer type, capable of representing 0 …\n104-bit signed integer type, consisting of 2, 64-bit limbs.\n112-bit signed integer type, consisting of 2, 64-bit limbs.\n120-bit signed integer type, consisting of 2, 64-bit limbs.\n128-bit signed integer type, consisting of 2, 64-bit limbs.\n136-bit signed integer type, consisting of 3, 64-bit limbs.\n144-bit signed integer type, consisting of 3, 64-bit limbs.\n152-bit signed integer type, consisting of 3, 64-bit limbs.\n16-bit signed integer type, consisting of 1, 64-bit limbs.\n160-bit signed integer type, consisting of 3, 64-bit limbs.\n168-bit signed integer type, consisting of 3, 64-bit limbs.\n176-bit signed integer type, consisting of 3, 64-bit limbs.\n184-bit signed integer type, consisting of 3, 64-bit limbs.\n192-bit signed integer type, consisting of 3, 64-bit limbs.\n200-bit signed integer type, consisting of 4, 64-bit limbs.\n208-bit signed integer type, consisting of 4, 64-bit limbs.\n216-bit signed integer type, consisting of 4, 64-bit limbs.\n224-bit signed integer type, consisting of 4, 64-bit limbs.\n232-bit signed integer type, consisting of 4, 64-bit limbs.\n24-bit signed integer type, consisting of 1, 64-bit limbs.\n240-bit signed integer type, consisting of 4, 64-bit limbs.\n248-bit signed integer type, consisting of 4, 64-bit limbs.\n256-bit signed integer type, consisting of 4, 64-bit limbs.\n32-bit signed integer type, consisting of 1, 64-bit limbs.\n40-bit signed integer type, consisting of 1, 64-bit limbs.\n48-bit signed integer type, consisting of 1, 64-bit limbs.\n512-bit signed integer type, consisting of 8, 64-bit limbs.\n56-bit signed integer type, consisting of 1, 64-bit limbs.\n64-bit signed integer type, consisting of 1, 64-bit limbs.\n72-bit signed integer type, consisting of 2, 64-bit limbs.\n8-bit signed integer type, consisting of 1, 64-bit limbs.\n80-bit signed integer type, consisting of 2, 64-bit limbs.\n88-bit signed integer type, consisting of 2, 64-bit limbs.\n96-bit signed integer type, consisting of 2, 64-bit limbs.\nSolidity contract functions are addressed using the first …\nAn account storage key.\nAn account storage value.\nA transaction hash is a keccak hash of an RLP encoded …\nThe index of transaction in a block.\nThe nonce of a transaction.\nThe sequence number of all existing transactions.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n104-bit unsigned integer type, consisting of 2, 64-bit …\n112-bit unsigned integer type, consisting of 2, 64-bit …\n120-bit unsigned integer type, consisting of 2, 64-bit …\n128-bit unsigned integer type, consisting of 2, 64-bit …\n136-bit unsigned integer type, consisting of 3, 64-bit …\n144-bit unsigned integer type, consisting of 3, 64-bit …\n152-bit unsigned integer type, consisting of 3, 64-bit …\n16-bit unsigned integer type, consisting of 1, 64-bit …\n160-bit unsigned integer type, consisting of 3, 64-bit …\n168-bit unsigned integer type, consisting of 3, 64-bit …\n176-bit unsigned integer type, consisting of 3, 64-bit …\n184-bit unsigned integer type, consisting of 3, 64-bit …\n192-bit unsigned integer type, consisting of 3, 64-bit …\n200-bit unsigned integer type, consisting of 4, 64-bit …\n<code>Uint</code> for <code>2048</code> bits.\n208-bit unsigned integer type, consisting of 4, 64-bit …\n216-bit unsigned integer type, consisting of 4, 64-bit …\n224-bit unsigned integer type, consisting of 4, 64-bit …\n232-bit unsigned integer type, consisting of 4, 64-bit …\n24-bit unsigned integer type, consisting of 1, 64-bit …\n240-bit unsigned integer type, consisting of 4, 64-bit …\n248-bit unsigned integer type, consisting of 4, 64-bit …\n256-bit unsigned integer type, consisting of 4, 64-bit …\n32-bit unsigned integer type, consisting of 1, 64-bit …\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n40-bit unsigned integer type, consisting of 1, 64-bit …\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n48-bit unsigned integer type, consisting of 1, 64-bit …\n512-bit unsigned integer type, consisting of 8, 64-bit …\n56-bit unsigned integer type, consisting of 1, 64-bit …\n64-bit unsigned integer type, consisting of 1, 64-bit …\n72-bit unsigned integer type, consisting of 2, 64-bit …\n8-bit unsigned integer type, consisting of 1, 64-bit limbs.\n80-bit unsigned integer type, consisting of 2, 64-bit …\n88-bit unsigned integer type, consisting of 2, 64-bit …\n96-bit unsigned integer type, consisting of 2, 64-bit …\n<code>HashMap</code> optimized for hashing <code>Address</code>.\n<code>HashSet</code> optimized for hashing <code>Address</code>.\n<code>HashMap</code> optimized for hashing <code>B256</code>.\n<code>HashSet</code> optimized for hashing <code>B256</code>.\nThe default <code>BuildHasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nThe default <code>Hasher</code> used by <code>HashMap</code> and <code>HashSet</code>.\nA view into a single entry in a map, which may either be …\n<code>BuildHasher</code> optimized for hashing fixed-size byte arrays.\n<code>Hasher</code> optimized for hashing fixed-size byte arrays.\n<code>HashMap</code> optimized for hashing fixed-size byte arrays.\n<code>HashSet</code> optimized for hashing fixed-size byte arrays.\nA <code>HashMap</code> using the default hasher.\nA <code>HashSet</code> using the default hasher.\nAn occupied entry.\n<code>HashMap</code> optimized for hashing <code>Selector</code>.\n<code>HashSet</code> optimized for hashing <code>Selector</code>.\nA vacant entry.\nProvides in-place mutable access to an occupied entry …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA hash map implemented with quadratic probing and SIMD …\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nSets the value of the entry, and returns an <code>OccupiedEntry</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a reference to this entry’s key.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting, if empty, …\nThe default <code>Hasher</code> used by <code>RandomState</code>.\nA draining iterator over the entries of a <code>HashMap</code>.\nA view into a single entry in a map, which may either be …\nA draining, filtering iterator over the entries of a …\nA hash map implemented with quadratic probing and SIMD …\nAn owning iterator over the entries of a <code>HashMap</code>.\nAn owning iterator over the keys of a <code>HashMap</code>.\nAn owning iterator over the values of a <code>HashMap</code>.\nAn iterator over the entries of a <code>HashMap</code>.\nA mutable iterator over the entries of a <code>HashMap</code>.\nAn iterator over the keys of a <code>HashMap</code>.\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nThe error returned by <code>try_insert</code> when the key already …\n<code>RandomState</code> is the default state for <code>HashMap</code> types.\nA builder for computing where in a HashMap a key-value …\nA builder for computing where in a HashMap a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nAn iterator over the values of a <code>HashMap</code>.\nA mutable iterator over the values of a <code>HashMap</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nCreates an empty <code>HashMap&lt;K, V, S&gt;</code>, with the <code>Default</code> value …\nConstructs a new <code>RandomState</code>.\nCreates a new <code>DefaultHasher</code> using <code>new</code>. See its …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nThe entry in the map that was already occupied.\nCreates an iterator which uses a closure to determine if …\nReturns the argument unchanged.\nConverts a <code>[(K, V); N]</code> into a <code>HashMap&lt;K, V&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash.\nAccess an entry by hash.\nConstructs a <code>HashMap&lt;K, V&gt;</code> from an iterator of key-value …\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an entry by a key and its hash.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nReturns the key-value pair corresponding to the supplied …\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nAttempts to get mutable references to <code>N</code> values in the map …\nAttempts to get mutable references to <code>N</code> values in the map …\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nReturns a reference to the map’s <code>BuildHasher</code>.\nReturns a reference to the value corresponding to the …\nInserts a key-value pair into the map.\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry with the VacantEntry’s key, …\nSets the value of the entry, and returns the entry’s old …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nConverts the entry into a mutable reference to the key in …\nTake ownership of the key.\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the keys in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nCreates a consuming iterator visiting all the values in …\nReturns <code>true</code> if the map contains no elements.\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nGets a reference to the key in the entry.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a mutable reference to the key in the entry.\nAn iterator visiting all keys in arbitrary order. The …\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nConstructs a new <code>RandomState</code> that is initialized with …\nCreates a new <code>DefaultHasher</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nCreates a raw immutable entry builder for the HashMap.\nCreates a raw entry builder for the HashMap.\nRemoves a key from the map, returning the value at the key …\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it.\nRemoves a key from the map, returning the stored key and …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map.\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map with a lower limit. It …\nShrinks the capacity of the map as much as possible. It …\nTries to insert a key-value pair into the map, and returns …\nTries to reserve capacity for at least <code>additional</code> more …\nThe value which was not inserted, because the entry was …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> with at least the specified …\nCreates an empty <code>HashMap</code> which will use the given hash …\nA lazy iterator producing elements in the difference of …\nA draining iterator over the items of a <code>HashSet</code>.\nA view into a single entry in a set, which may either be …\nA draining, filtering iterator over the items of a <code>HashSet</code>.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nA lazy iterator producing elements in the intersection of …\nAn owning iterator over the items of a <code>HashSet</code>.\nAn iterator over the items of a <code>HashSet</code>.\nAn occupied entry.\nA view into an occupied entry in a <code>HashSet</code>. It is part of …\nA lazy iterator producing elements in the symmetric …\nA lazy iterator producing elements in the union of <code>HashSet</code>…\nA vacant entry.\nA view into a vacant entry in a <code>HashSet</code>. It is part of the …\nReturns the intersection of <code>self</code> and <code>rhs</code> as a new …\nReturns the union of <code>self</code> and <code>rhs</code> as a new <code>HashSet&lt;T, S&gt;</code>.\nReturns the symmetric difference of <code>self</code> and <code>rhs</code> as a new …\nReturns the number of elements the set can hold without …\nClears the set, removing all values.\nOverwrites the contents of <code>self</code> with a clone of the …\nReturns <code>true</code> if the set contains a value.\nCreates an empty <code>HashSet&lt;T, S&gt;</code> with the <code>Default</code> value for …\nVisits the values representing the difference, i.e., the …\nClears the set, returning all elements as an iterator. …\nGets the given value’s corresponding entry in the set …\nCreates an iterator which uses a closure to determine if a …\nConverts a <code>[T; N]</code> into a <code>HashSet&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value in the set, if any, that …\nReturns a reference to this entry’s value.\nGets a reference to the value in the entry.\nGets a reference to the value that would be used when …\nInserts the given <code>value</code> into the set if it is not present, …\nInserts a value computed from <code>f</code> into the set if the given …\nReturns a reference to the set’s <code>BuildHasher</code>.\nAdds a value to the set.\nSets the value of the entry, and returns an OccupiedEntry.\nSets the value of the entry with the VacantEntry’s value.\nVisits the values representing the intersection, i.e., the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a consuming iterator, that is, one that moves each …\nTake ownership of the value.\nReturns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>. …\nReturns <code>true</code> if the set contains no elements.\nReturns <code>true</code> if the set is a subset of another, i.e., <code>other</code>…\nReturns <code>true</code> if the set is a superset of another, i.e., …\nAn iterator visiting all elements in arbitrary order. The …\nReturns the number of elements in the set.\nCreates an empty <code>HashSet</code>.\nEnsures a value is in the entry by inserting if it was …\nRemoves a value from the set. Returns whether the value was\nTakes the value out of the entry, and returns it. Keeps …\nAdds a value to the set, replacing the existing value, if …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the set with a lower limit. It …\nShrinks the capacity of the set as much as possible. It …\nReturns the difference of <code>self</code> and <code>rhs</code> as a new …\nVisits the values representing the symmetric difference, …\nRemoves and returns the value in the set, if any, that is …\nTries to reserve capacity for at least <code>additional</code> more …\nVisits the values representing the union, i.e., all the …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates an empty <code>HashSet</code> with at least the specified …\nCreates a new empty hash set which will use the given …\nThe size of this integer type in bits.\nThe size of this integer type in bits.\nError for <code>from_base_le</code> and <code>from_base_be</code>.\nError from <code>Uint::from_base_be</code>.\nA newtype wrapper around <code>Uint</code> that restricts operations to …\nError for <code>TryFrom&lt;Uint&gt;</code>.\nThe requested number base <code>.0</code> is less than two.\nThe provided digit <code>.0</code> is out of range for requested base <code>.1</code>…\nInvalid digit in string.\nInvalid radix, up to base 64 is supported.\nThe size of this integer type in 64-bit limbs.\n‘Not a number’ (NaN) can not be represented as Uint\nNumber is equal or larger than the target field modulus.\nThe value is too large to fit the target type.\nThe Uint value is too large for the target type.\nError for <code>from_str_radix</code>.\nError for <code>TryFrom&lt;Uint&gt;</code> for <code>ark_ff</code> and others.\nError for <code>TryFrom&lt;T&gt;</code> for <code>Uint</code>.\nThe ring of numbers modulo $2^{\\mathtt{BITS}}$.\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\n⚠️ Workaround for Rust issue #50133. Use <code>TryFrom</code> …\nNegative values can not be represented as Uint.\nValue is too large to fit the Uint.\nThe value zero. This is the only value that exists in all …\n⚠️ Collection of bignum algorithms.\nType aliases for common bit sizes of <code>Uint</code> and <code>Bits</code>.\nSee <code>Uint::as_le_bytes</code> for documentation.\nSee <code>Uint::as_limbs</code> for documentation.\nSee <code>Uint::as_limbs_mut</code> for documentation.\nReturns a reference to the inner Uint.\nReturns a mutable reference to the inner Uint.\nSee <code>Uint::checked_shl</code> for documentation.\nSee <code>Uint::checked_shr</code> for documentation.\nCompile time for loops with a <code>const</code> variable for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>Uint::from_be_bytes</code> for documentation.\nSee <code>Uint::from_le_bytes</code> for documentation.\nSee <code>Uint::from_limbs</code> for documentation.\nSee <code>Uint::from_str_radix</code> for documentation.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner Uint.\nSee <code>Uint::leading_ones</code> for documentation.\nSee <code>Uint::leading_zeros</code> for documentation.\nMask to apply to the highest limb to get the correct …\nNumber of bytes required to represent the given number of …\nNumber of <code>u64</code> limbs required to represent the given number …\nSee <code>Uint::overflowing_shl</code> for documentation.\nSee <code>Uint::overflowing_shr</code> for documentation.\nSee <code>Uint::reverse_bits</code> for documentation.\nSee <code>Uint::rotate_left</code> for documentation.\nSee <code>Uint::rotate_right</code> for documentation.\nSupport for external crates.\nSee <code>Uint::to_be_bytes</code> for documentation.\nSee <code>Uint::to_be_bytes_vec</code> for documentation.\nSee <code>Uint::to_le_bytes</code> for documentation.\nSee <code>Uint::trailing_ones</code> for documentation.\nSee <code>Uint::trailing_zeros</code> for documentation.\nSee <code>Uint::try_from_be_slice</code> for documentation.\nSee <code>Uint::try_from_le_slice</code> for documentation.\nSee <code>Uint::wrapping_shl</code> for documentation.\nSee <code>Uint::wrapping_shr</code> for documentation.\n⚠️ Lehmer update matrix\n<code>lhs += rhs + carry</code>\nComputes <code>lhs += a</code> and returns the carry.\n⚠️ Computes <code>result += a * b</code> and checks for overflow.\nComputes wrapping <code>lhs += a * b</code> when all arguments are the …\nComputes <code>lhs += a * b</code> and returns the carry.\nApplies the matrix to a <code>Uint</code>.\nApplies the matrix to a <code>u128</code>.\nCompare two <code>u64</code> slices in reverse order.\nReturns the matrix product <code>self * other</code>.\n⚠️ Collection of division algorithms.\n⚠️ Division with remainder.\nReturns the argument unchanged.\nCompute a Lehmer update matrix from two <code>Uint</code>s.\nCompute the Lehmer update matrix in full 64 bit precision.\nCompute the Lehmer update matrix for small values.\nCompute the largest valid Lehmer update matrix for a …\n⚠️ Lehmer’s GCD algorithms.\n⚠️ Lehmer’s extended GCD.\nCalls <code>U::from(self)</code>.\n⚠️ Modular inversion using extended GCD.\nComputes <code>lhs *= a</code> and returns the carry.\nComputes a * b * 2^(-BITS) mod modulus\n<code>lhs -= rhs - borrow</code>\nComputes a^2 * 2^(-BITS) mod modulus\nComputes <code>lhs -= a * b</code> and returns the borrow.\n⚠️ Division with remainder.\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient and remainder of a <code>u128</code> …\n⚠️ Computes the quotient of a 192 bits divided by a …\n⚠️ Computes the quotient of a 192 bits divided by a …\nTODO: This implementation is off by one.\n⚠️ Compute single limb division.\n⚠️ Compute single limb normalized division.\n⚠️ Compute double limb division.\n⚠️ Compute double limb normalized division.\n⚠️ In-place Knuth long division with implicit …\n⚠️ In-place Knuth normalized long division with …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{192} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathsf{d}}} - …\n⚠️ Computes $\\floor{\\frac{2^{128} - 1}{\\mathtt{d}}} - …\n<code>Bits</code> for <code>0</code> bits.\n<code>Bits</code> for <code>1</code> bits.\n<code>Bits</code> for <code>1024</code> bits.\n<code>Bits</code> for <code>128</code> bits.\n<code>Bits</code> for <code>16</code> bits.\n<code>Bits</code> for <code>160</code> bits.\n<code>Bits</code> for <code>192</code> bits.\n<code>Bits</code> for <code>2048</code> bits.\n<code>Bits</code> for <code>256</code> bits.\n<code>Bits</code> for <code>32</code> bits.\n<code>Bits</code> for <code>320</code> bits.\n<code>Bits</code> for <code>384</code> bits.\n<code>Bits</code> for <code>4096</code> bits.\n<code>Bits</code> for <code>448</code> bits.\n<code>Bits</code> for <code>512</code> bits.\n<code>Bits</code> for <code>64</code> bits.\n<code>Bits</code> for <code>768</code> bits.\n<code>Bits</code> for <code>8</code> bits.\n<code>Uint</code> for <code>0</code> bits. Always zero. Similar to <code>()</code>.\n<code>Uint</code> for <code>1</code> bit. Similar to <code>bool</code>.\n<code>Uint</code> for <code>1024</code> bits.\n<code>Uint</code> for <code>128</code> bits. Similar to <code>u128</code>.\n<code>Uint</code> for <code>16</code> bits. Similar to <code>u16</code>.\n<code>Uint</code> for <code>160</code> bits.\n<code>Uint</code> for <code>192</code> bits.\n<code>Uint</code> for <code>2048</code> bits.\n<code>Uint</code> for <code>256</code> bits.\n<code>Uint</code> for <code>32</code> bits. Similar to <code>u32</code>.\n<code>Uint</code> for <code>320</code> bits.\n<code>Uint</code> for <code>384</code> bits.\n<code>Uint</code> for <code>4096</code> bits.\n<code>Uint</code> for <code>448</code> bits.\n<code>Uint</code> for <code>512</code> bits.\n<code>Uint</code> for <code>64</code> bits. Similar to <code>u64</code>.\n<code>Uint</code> for <code>768</code> bits.\n<code>Uint</code> for <code>8</code> bits. Similar to <code>u8</code>.\nThe prefix used for hashing messages according to EIP-191.\nEther is equivalent to 1e18 wei.\nGwei is equivalent to 1e9 wei.\nSigned 256-bit integer.\nThe provided units are not recognized.\nKwei is equivalent to 1e3 wei.\nSimple <code>Keccak-256</code> hasher.\nThe largest unit.\nThe smallest unit.\nMwei is equivalent to 1e6 wei.\nPwei is equivalent to 1e15 wei.\nOverflow when parsing a signed number.\nThis enum holds the numeric types that a possible to be …\nTwei is equivalent to 1e12 wei.\nUnsigned 256-bit integer.\nEthereum unit. Always less than <code>77</code>.\nError type for <code>Unit</code>-related operations.\nWei is equivalent to 1 wei.\nAllocates memory on the heap then places <code>x</code> into it, …\nConstructs a new box with uninitialized contents on the …\nHash a message according to EIP-191 (version <code>0x01</code>).\nConstructs a message according to EIP-191 (version <code>0x01</code>).\nFormats the given number of Wei as an Ether amount.\nFormats the given number of Wei as the given unit.\nFormats the given number of Wei as the given unit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the numeric value of the unit.\nReturns the absolute value of the number.\nReturns the signed value of the number.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the number is negative.\nReturns <code>true</code> if the number is positive.\nReturns <code>true</code> if the number is signed.\nReturns <code>true</code> if the number is unsigned.\nReturns <code>true</code> if the number is zero.\nSimple interface to the <code>Keccak-256</code> hash function.\nCreates a new <code>Unit</code> instance, checking for overflow.\nCreates a new <code>Unit</code> instance.\nConverts the input to a U256 and converts from Ether to …\nParses a decimal number and multiplies it with 10^units.\nParses a decimal number and multiplies it with 10^units.\nTries to collect the elements of an iterator into a <code>Vec</code>.\nTries to create a <code>Vec</code> with the given capacity.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nReturns <code>10^self</code>, which is the number of Wei in this unit.\nThe JSON body of a block response.\nA boxed future.\nTrait that helpes convert <code>EthCall</code> into a <code>ProviderCall</code>.\nA builder for an <code>&quot;eth_call&quot;</code> request. This type is returned …\nThe parameters for an <code>&quot;eth_call&quot;</code> RPC request.\nFailed to register pending transaction in heartbeat.\nA task that polls the provider with <code>eth_getFilterChanges</code>, …\nThe network header type.\nThe JSON body of a header response.\nAn identity layer that does nothing.\nCaptures type info for network-specific RPC …\nHelper struct that houses the params along with the …\nRepresents a transaction that is yet to be confirmed a …\nA builder for configuring a pending transaction watcher.\nConfiguration for watching a pending transaction.\nErrors which may occur when watching a pending transaction.\nProvider is parameterized with a network and a transport. …\nThe provider constructed by this layer.\nA builder for constructing a <code>Provider</code> from various layers.\nThe primary future type for the <code>Provider</code>.\nA layering abstraction in the vein of <code>tower::Layer</code>\nThe output, produces synchronously.\nThe network receipt envelope type.\nThe JSON body of a transaction receipt.\nError occured while getting response from the heartbeat.\nType alias for a <code>RootProvider</code> using the <code>Http</code> transport and …\nThe root provider manages the RPC client and the …\nAn underlying call to an RPC server.\nA struct that takes an optional <code>BlockId</code> parameter.\nA stack of two providers.\nTransaction was not confirmed after configured timeout.\nThe JSON body of a transaction request.\nThe JSON body of a transaction response.\nUnderlying transport error.\nThe network transaction envelope type.\nThe network transaction type enum.\nErrors that may occur when watching a transaction.\nAn enum over the various transaction types.\nA waiter for a batched call to a remote RPC server.\nThe underlying <code>NetworkWallet</code> type contained in this stack.\nTrait for Providers, Fill stacks, etc, which contain …\nErrors which may occur in heartbeat when watching a …\nFallible cast to a boxed future.\nFallible cast to mutable <code>RpcCall</code>\nFallible cast to mutable <code>Waiter</code>\nFallible cast to a ready value.\nFallible cast to <code>RpcCall</code>\nFallible cast to <code>Waiter</code>\nReturns the block.\nSet the block to use for this call.\nSet the block id.\nThe block id to be used for the RPC call.\nBoxes the inner client.\nHelper function to directly access <code>ProviderBuilder</code> with …\nReturns the <code>ProviderBuilder</code> to build on.\nMethod that needs to be implemented to convert to a …\nExecute a smart contract call with a transaction request …\nReturns the RPC client used to send requests.\nConnects to a boxed transport with the given connector.\nCreates a new root provider from the provided connection …\nCreate an EIP-2930 access list.\nReturns a reference to the transaction data.\nGet the default signer address.\nSet the block id to “earliest”.\nEstimates the EIP1559 <code>maxFeePerGas</code> and <code>maxPriorityFeePerGas</code>…\nMethod that needs to be implemented for estimating gas …\nCreate an <code>EthCall</code> future to estimate the gas required for a\nExtended APIs for the provider module.\nAdd a chain ID filler to the stack being built. The filler …\nAdd a transaction filler to the stack being built. …\nTransaction Fillers\nSet the block id to “finalized”.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pending transaction builder from the given …\nCreate new EthCall for gas estimates.\nRetrieves account information (Account) for the given …\nGets the accounts in the remote node. This is usually …\nGets the balance of the account.\nReturns the base fee per blob gas (blob gas price) in wei.\nGets a block by either its hash, tag, or number, with full …\nGets a block by its BlockHash, with full transactions or …\nGet a block by its number.\nGet the last block number available.\nGets the selected block BlockId receipts.\nReturns the number of transactions in a block from a block …\nReturns the number of transactions in a block matching the …\nGets the chain ID.\nGets the client version.\nGets the bytecode located at the corresponding Address.\nReturns a collection of historical gas information …\nGet a list of values that have been added since the last …\nGet a list of values that have been added since the last …\nRetrieves a <code>Vec&lt;Log&gt;</code> for the given filter ID.\nGets the current gas price in wei.\nRetrieves a <code>Vec&lt;Log&gt;</code> with the given Filter.\nReturns a suggestion for the current <code>maxPriorityFeePerGas</code> …\nGets the network ID. Same as <code>eth_chainId</code>.\nGet the account and storage values of the specified …\nGets a raw transaction by block hash and transaction index …\nGets a raw transaction by block number and transaction …\nReturns the EIP-2718 encoded transaction if it exists, see …\nWaits for the transaction to confirm with the given number …\nGets the <code>Keccak-256</code> hash of the given data.\nGets the specified storage value from Address.\nGets a transaction by block hash and transaction index …\nGets a transaction by block number and transaction index …\nGets a transaction by its TxHash.\nGets the transaction count (AKA “nonce”) of the …\nGets a transaction receipt if it exists, by its TxHash.\nGets an uncle block through the tag BlockId and index u64.\nGets the number of uncles for the block specified by the …\nCheck if the signer can sign for the given address.\nSet the block id to a specific hash, without requiring the …\nSet the block id to a specific hash and require the hash …\nReturns the inner configuration.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this builder, returning the inner configuration.\nClones the tx data and overrides into owned data.\nConvert this call into one with owned params, by cloning …\nTrue if this is a boxed future.\nTrue if this is a ready value.\nTrue if this is an RPC call.\nTrue if this is a waiter.\nSet the block id to “latest”.\nWrap the given provider in the layer’s provider.\nAdd a layer to the stack being built. This is similar to …\nUseful layer implementations for the provider. Currently …\nMap the response to a different type. This is usable for …\nSet a function to map the response into a different type. …\nChange the network.\nCreates a new root provider from the given RPC client.\nCreate a new <code>Stack</code>.\nCreate a new <code>ProviderBuilder</code>.\nCreates a new pending transaction builder.\nCreate a new watch for a transaction.\nInstantiates a new <code>EthCallParams</code> with the given data …\nCreate a new CallBuilder.\nNotify the provider that we are interested in new blocks.\nNotify the provider that we are interested in logs that …\nCreates a new HTTP root provider from the given URL.\nNotify the provider that we are interested in new pending …\nCreate a new <code>RpcWithBlock</code> from a closure producing a …\nCreate a new <code>RpcWithBlock</code> from a <code>RpcCall</code>.\nSet the block id to a specific height.\nBuild this provider with anvil, using the BoxTransport.\nBuild this provider with anvil, using the BoxTransport. The\nBuild this provider with anvil, using the BoxTransport. …\nBuild this provider with anvil, using the BoxTransport. …\nFinish the layer stack by providing a connection string …\nFinish the layer stack by providing a root <code>RpcClient</code>, …\nBuild this provider with an Reqwest HTTP transport.\nFinish the layer stack by providing a root <code>Provider</code>, …\nReturns a reference to the state overrides if set.\nSet the state overrides for this call.\nThe params to be sent to the RPC call.\nSet the block id to “pending”.\nReturns the provider.\nSends a raw JSON-RPC request.\nSends a raw JSON-RPC request with type-erased parameters …\nCreates a ready pending transaction.\nInstantiate a new <code>ProviderCall</code> from the output.\nRegisters the watching configuration with the provider.\nReturns the number of confirmations to wait for.\nReturns the number of confirmations to wait for.\nReturns the root provider.\nSet the block id to “safe”.\nBroadcasts a raw transaction RLP bytes to the network.\nBroadcasts a transaction to the network.\nBroadcasts a transaction envelope to the network.\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nGet an iterator of all signer addresses. Note that because …\nExecutes an arbitrary number of transactions on top of the …\nConsumes this builder, returning the provider and the …\nGets syncing info.\nReturns the timeout.\nReturns the timeout.\nCreates a new <code>TransactionRequest</code>.\nBuild this provider with anvil, using the BoxTransport. The\nReturns this transaction’s hash.\nReturns the transaction hash.\nReturns the transaction hash.\nRequest provider to uninstall the filter with the given ID.\nProvider-related utilities.\nGet a reference to the underlying wallet.\nAdd a wallet layer to the stack being built.\nGet a mutable reference to the underlying wallet.\nWaits for the transaction to confirm with the given number …\nWatch for new blocks by polling the provider with …\nWatch for new pending transaction bodies by polling the …\nWatch for new logs using the given filter by polling the …\nWatch for the confirmation of a single pending transaction …\nWatch for new pending transaction by polling the provider …\nReturns a <code>Weak</code> RPC client used to send requests.\nSets the block to use for this call.\nAdd cached nonce management to the stack being built.\nAdd a chain layer to the stack being built. The layer will …\nAdd a specific chain ID to the stack being built. The …\nAdd gas estimation to the stack being built.\nAdd nonce management to the stack being built.\nSets the state overrides for this call.\nWraps this configuration with a provider to expose …\nAdd preconfigured set of layers handling gas estimation, …\nSets the number of confirmations to wait for.\nSets the number of confirmations to wait for.\nAdd simple nonce management to the stack being built.\nSets the timeout.\nSets the timeout.\nSets the transaction hash.\nSets the transaction hash.\nAnvil namespace rpc interface that gives access to several …\nIf set to true will make every account impersonated.\nRemoves all transactions from the pool.\nRemoves transactions from the pool.\nCreate a buffer that represents all state on the chain, …\nReturns true if auto mining is enabled, and false.\nSend transactions impersonating specific account and …\nJump forward in time by the given amount of time, in …\nAppend chain state buffer to current chain. Will overwrite …\nRetrieves metadata about the Anvil instance.\nMines a series of blocks.\nMine blocks, instantly and return the mined blocks. This …\nRetrieves the Anvil node configuration params.\nUnsets the interval for the block timestamp.\nRemoves all transactions from the pool for a specific …\nReorg the chain\nReset the fork to a fresh forked state, and optionally …\nRevert the state of the blockchain to a previous snapshot. …\nEnables or disables, based on the single boolean argument, …\nModifies the balance of an account.\nSet the next block gas limit.\nSets an interval for the block timestamp.\nSets the chain ID.\nSets the code of a contract.\nSets the coinbase address.\nSets the mining behavior to interval with the given …\nEnable or disable logging.\nSet the minimum gas price for the node.\nSets the base fee of the next block.\nSimilar to <code>evm_increaseTime</code> but takes the exact timestamp …\nSets the nonce of an address.\nSets the backend rpc url.\nWrites a single slot of the account’s storage.\nSets the specific timestamp and returns the number of …\nSnapshot the state of the blockchain at the current block.\nStops impersonating an account if previously set with …\nExecute a transaction regardless of signature status.\nMine blocks, instantly. This will mine the blocks …\nFiller for the <code>max_fee_per_blob_gas</code> field in EIP-4844 …\nCached nonce manager\nA <code>TxFiller</code> that populates the chain ID of a transaction.\nA <code>Provider</code> that applies one or more <code>TxFiller</code>s.\nThe properties that this filler retrieves from the RPC. to …\nThe control flow for a filler.\nThe filler has filled in all properties that it can fill.\nA <code>TxFiller</code> that populates gas related fields in …\nA layer that can fill in a <code>TransactionRequest</code> with …\nThe filler is missing a required property.\nA <code>TxFiller</code> that fills nonces on transactions. The behavior …\nA trait that determines the behavior of filling nonces.\nThe filler is ready to fill in the transaction request.\nThe recommended filler, a preconfigured set of layers …\nA trait which may be used to configure default fillers for …\nRecommended fillers for this network.\nThis <code>NonceManager</code> implementation will fetch the …\nA layer that can fill in a <code>TransactionRequest</code> with …\nA layer that signs transactions locally.\nAbsorb the control flow of another filler.\nReturns true if the filler is missing a required property.\nReturns <code>true</code> if the filler is should continue filling.\nFills in the transaction request with the fillable …\nFills the transaction request, using the configured fillers\nPerforms any synchronous filling. This should be called …\nReturns <code>true</code> if the filler is finished filling in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the next nonce for the given account.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the filler is finished filling in the …\nReturns <code>true</code> if the filler is missing information required …\nReturns <code>true</code> if the filler is ready to fill in the …\nJoins this filler with another filler to compose multiple …\nJoins a filler to this provider\nGet a reference to the left filler.\nCreates a new <code>Missing</code> control flow.\nCreate a new <code>ChainIdFiller</code> with an optional chain ID.\nCreates a new wallet layer with the given wallet.\nCreates a new <code>NonceFiller</code> with the specified <code>NonceManager</code>.\nCreates a new <code>JoinFill</code> with the given layers.\nCreates a new <code>FillProvider</code> with the given filler and inner …\nPrepares fillable properties, potentially by making an RPC …\nPrepares and fills the transaction request with the …\nReturns <code>true</code> if the filler is ready to fill in the …\nReturns the recommended filler for this provider.\nGet a reference to the right filler.\nReturn a control-flow enum indicating whether the filler …\nA layer that wraps an <code>Anvil</code> config.\nA provider that wraps an <code>AnvilInstance</code>, preventing the …\nA provider layer that caches RPC responses and serves them …\nThe <code>CacheProvider</code> holds the underlying in-memory LRU cache …\nA layer that wraps a <code>NamedChain</code>. The layer will be used to …\nShareable cache.\nGet the chain’s average blocktime, if applicable.\nReturns the shared cache.\nGet the instance http endpoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a value from the cache, if it exists.\nGet deserialized value from the cache.\nStarts the anvil instance, or gets a reference to the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the cache from a file specified by the path. If the …\nReturns the maximum number of items that can be stored in …\nMaximum number of items that can be stored in the cache.\nCreates a new <code>AnvilProvider</code> with the given inner provider …\nInstantiate a new cache layer with the the maximum number …\nInstantiate a new cache provider.\nInstantiate a new shared cache.\nPuts a value into the cache, and returns the old value if …\nSaves the cache to a file specified by the path. If the …\nGet the instance ws endpoint.\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA catch-all block type for handling blocks on multiple …\nA catch-all header type for handling headers on multiple …\nA catch-all transaction type for handling transactions on …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA wallet capable of signing any transaction for the …\nHeader type\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nApply a function to the builder, returning the modified …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nEIP-7702 Authorization list.\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nBlob gas used\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nGet the default signer address. This address should be used\nDifficulty\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExcess blob gas\nExtra data\nAdditional fields.\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nGet the gas limit for the transaction.\nGas Limit\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nGas Used\nReturn true if the signer contains a credential for the …\nHash of the block\nTransaction hash.\nBlock header\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nThe inner struct.\nThe inner struct.\nTransaction type.\nGet the input data for the transaction.\nSet the <code>to</code> field to a create call.\nGet the kind of transaction.\nLogs bloom\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMemoization for deserialization.\nMix Hash\nGet the nonce for the transaction.\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nAll fields not present in the inner struct.\nAll fields not present in the inner struct.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nEIP-4788 parent beacon block root\nHash of the parent\nTrim any conflicting keys and populate any computed fields …\nTransactions receipts root hash\nThe original request that failed to build.\nEIP-7685 requests hash.\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nInteger the size of this block in bytes.\nThe post-transaction state root (pre Byzantium)\nState root hash\nStatus of the transaction.\nTimestamp\nAddress of the receiver.\nGet the recipient for the transaction.\nTotal difficulty\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nTransactions root hash\nHash of the transaction\nTransaction type.\nThe transaction type.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nEncode the transaction according to EIP-2718 rules. First …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie. This …\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.\nBlock JSON-RPC response.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nHeader type\nHeader JSON-RPC response.\nReceipt JSON-RPC response.\nTransaction type\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nTransaction JSON-RPC response. Aggregates transaction data …\nSpecial case for uncle response.\nEIP-7702 Authorization list.\nGet the EIP-7702 authorization list for the transaction.\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nEffective gas price.\nAddress of the sender.\nSender of the transaction\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nBlock hash\nBlock header\nGet the max fee per blob gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the max fee per blob gas  for the transaction.\nThe post-transaction state root (pre Byzantium)\nStatus of the transaction.\nAddress of the receiver.\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nHash of the transaction\nMultiplier for the current base fee to estimate max base …\nThe number of blocks from the past for which the fee …\nThe default percentile of gas premiums that are fetched …\nThe minimum priority fee to provide.\nReturn type of EIP1155 gas fee estimator.\nAn estimator function for EIP1559 fees.\nThe default EIP-1559 fee estimator.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe base fee per gas.\nThe max priority fee per gas.\nA batch JSON-RPC request, used to bundle requests into a …\nConnection string for built-in transports.\nA builder for the transport  <code>RpcClient</code>.\nA borrowed <code>RpcClient</code>.\nHTTP transport.\nParameter type of a JSON-RPC request with no parameters.\nA channel yielding responses from a poller task.\nA poller task builder.\nA client using a <code>reqwest</code> HTTP transport.\nA prepared, but unsent, RPC call.\nA JSON-RPC client.\nA JSON-RPC client.\nAwaits a single response for a request that has been …\nAn <code>RpcClient</code> in a <code>Weak</code> reference.\nAdd a call to the batch.\nConvert this future into a boxed, pinned future, erasing …\nBoxes the transport.\nType erase the service in the transport, allowing it to be …\nCreate a new <code>ClientBuilder</code>.\nReturns the channel size for the poller task.\nConnect a transport, producing an <code>RpcClient</code> with the …\nConnect a transport, producing an <code>RpcClient</code> with a …\nConnect with the given connection string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>RpcClient</code> with the given inner client.\nBorrow the client.\nGet a <code>Weak</code> reference to the client.\nConvenience function to create a new <code>RpcClient</code> with a …\nGet a reference to the client.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the client into its inner type.\nConvert this call into one with owned params, by cloning …\nStarts the poller and returns the stream of responses.\nConverts the poll channel into a stream.\nConverts the poll channel into a stream that also yields …\nConsumes the client and returns the underlying transport.\n<code>true</code> if the client believes the transport is local.\nReturns <code>true</code> if the request is a subscription.\nAdd a middleware layer to the stack.\nReturns the limit on the number of successful polls.\nBuild a <code>JsonRpcRequest</code> with the given method and params.\nMap the params of the request into a new type.\nMap the response to a different type. This is usable for …\nMap the response to a different type. This is usable for …\nCreate a new batch request.\nCreates a new <code>RpcClient</code> with the given transport.\nCreate a new <code>RpcClient</code> with the given transport.\nCreate a new poller task.\nCreate a new <code>BatchRequest</code> builder.\nCreate a new <code>RpcClient</code> with an HTTP transport.\nReserve a request ID u64.\nGet a mutable reference to the params of the request.\nReturns the default poll interval (milliseconds) for the …\nReturns the duration between polls.\nBuild a poller that polls a method with the given …\nReturns a reference to the request.\nPrepares an <code>RpcCall</code>.\nReturns a mutable reference to the request.\nPrepares an <code>RpcCall</code> with no parameters.\nResubscribe to the poller task.\nSend the batch future via its connection.\nSets the channel size for the poller task.\nSet the request to be a non-standard subscription (i.e. not\nSets a limit on the number of successful polls.\nSet the <code>is_local</code> flag.\nSet the poll interval for the client in milliseconds. …\nSets the duration between polls.\nSet the subscription status of the request.\nStarts the poller in a new Tokio task, returning a channel …\nCreate a new <code>RpcClient</code> with the given transport and the …\nReturns a reference to the underlying transport.\nReturns a mutable reference to the underlying transport.\nTries to parse the given string as an HTTP URL.\nSets the channel size for the poller task.\nSets the starting ID for the client.\nSets a limit on the number of successful polls.\nSets the poll interval for the client in milliseconds.\nSets the duration between polls.\nA batch of responses.\nA batch of requests.\nA batch of responses.\nA <code>ErrorPayload</code> that has been partially deserialized, …\nA <code>Response</code> that has been partially deserialized, borrowing …\nA <code>BorrowedResponsePacket</code> is a <code>ResponsePacket</code> that has been …\nA <code>ResponsePayload</code> that has been partially deserialized, …\nA partially deserialized <code>RpcResult</code>, borrowing from the …\nJSON deserialization error.\nContains the error value\nContains the error value\nA JSON-RPC 2.0 error object.\nServer returned an error response.\nAn ethereum-style notification, not to be confused with a …\nAn error response payload.\nAn error response payload.\nA JSON-RPC 2.0 ID object. This may be a number, a string, …\nReturned when a local pre-processing step fails. This …\nNull.\nAn Ethereum-style notification.\nServer returned a null response when a non-null response …\nA number.\nA number.\nContains the success value\nContains the success value\nA <code>Request</code> that has been partially serialized.\nAn item received over an Ethereum pubsub transport.\nA JSON-RPC 2.0 request object.\n<code>RequestMeta</code> contains the <code>Id</code> and method name of a request.\nA <code>RequestPacket</code> is a <code>SerializedRequest</code> or a batch of …\nA JSON-RPC 2.0 response object containing a <code>ResponsePayload</code>…\nA <code>Response</code> to a JSON-RPC request.\nA <code>ResponsePacket</code> is a <code>Response</code> or a batch of responses.\nA JSON-RPC 2.0 response payload.\nAn RPC error.\nAn object that can be used as a JSON-RPC parameter and …\nAn object that can be used as a JSON-RPC parameter.\nThe result of a JSON-RPC request.\nAn object that can be used as a JSON-RPC return value.\nJSON serialization error.\nA JSON-RPC 2.0 request object that has been serialized, …\nA single response.\nA single request.\nA single response.\nA string.\nA string.\nA subscription ID.\nA successful response payload.\nA successful response payload.\nTransport error.\nRpc server returned an unsupported feature.\nExtracts revert data and tries decoding it into given …\nReturns the ErrorPayload if the response is an error.\nFallible conversion to the error object.\nReturns the ID as a number, if it is one.\nAttempt to extract revert data from the JsonRpcError be …\nReturns the ID as a string, if it is one.\nFallible conversion to the successful payload.\nSerialize the request parameters as a boxed <code>RawValue</code>.\nThe error code.\nThe error code.\nThe error data (if any).\nThe error data (if any).\nConsumes the serialized request, returning the underlying …\nAttempt to deserialize the data field.\nAttempt to deserialize the Error payload, transforming …\nAttempt to deserialize the Success payload, transforming …\nDeserialize an Error payload, if possible, transforming …\nDeserialize a Success payload, if possible, transforming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the request ID.\nThe ID of the request that this response is responding to.\nThe request ID.\nThe ID of the request that this response is responding to.\nCreate a new error payload for an internal error.\nCreate a new error payload for an internal error.\nCreate a new response with an internal error payload.\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error payload for an internal error with a …\nCreate a new error response for an internal error with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert this borrowed response packet into an owned packet …\nConvert this borrowed error payload into an owned payload …\nConvert this borrowed response payload into an owned …\nConvert this borrowed response to an owned response by …\nClone the request, including the request parameters.\nConsume the serialized request, returning the underlying …\nCreate a new error payload for an invalid params error.\nCreate a new error payload for an invalid params error.\nCreate a new response with an invalid params error payload.\nCreate a new error payload for an invalid request.\nCreate a new error payload for an invalid request.\nCreate a new response with an invalid request error …\nCheck if the packet is empty.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response payload is an error.\nReturns <code>true</code> if the response is an error.\nReturns <code>true</code> if the ID is <code>None</code>.\nReturns <code>true</code> if the ID is a number.\nAnalyzes the ErrorPayload and decides if the request …\nReturns <code>true</code> if the ID is a string.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the request is a subscription.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response payload is a success.\nReturns <code>true</code> if the response is a success.\nReturns an iterator over the ErrorPayloads in the response.\nGet the number of requests in the packet.\nChange type of the request parameters.\nThe error message (if any).\nThe error message (if any).\nReturns the request metadata (ID and Method).\nThe request metadata (ID and method).\nThe request metadata (ID and method).\nReturns the request method.\nThe method name.\nCreate a new error payload for a method not found error.\nCreate a new error payload for a method not found error.\nCreate a new response with a method not found error …\nCreate a new <code>RequestMeta</code>.\nCreate a new <code>Request</code>.\nGet a reference to the serialized request’s params.\nThe request parameters.\nThe request parameters.\nGet the hash of the serialized request’s params.\nCreate a new error payload for a parse error.\nCreate a new error payload for a parse error.\nCreate a new response with a parsed error payload.\nThe response payload.\nThe response payload.\nPush a request into the packet.\nFind responses by a list of IDs.\nThe notification payload.\nSerialize the packet as a boxed <code>RawValue</code>.\nSerialize the request, including the request parameters.\nSerialize the inner data into a <code>RawValue</code>.\nConvert the inner types into a <code>RawValue</code> by serializing …\nSerialize the payload of this response.\nReturns the serialized request.\nIndicates that the request is a non-standard subscription …\nIndicates that the request is a non-standard subscription …\nMark the request as a non-standard subscription (i.e. not …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nSetter for <code>is_subscription</code>. Indicates to RPC clients that …\nThe subscription ID.\nGet the request IDs of all subscription requests in the …\nTake the serialized request, consuming the …\nTransform a transport response into an <code>RpcResult</code>, …\nTransform a transport outcome into an <code>RpcResult</code>, …\nAttempt to deserialize the params, borrowing from the …\nDeserialize the error’s <code>data</code> field, borrowing from the …\nAttempt to deserialize the <code>Ok(_)</code> variant of an <code>RpcResult</code>.\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the error payload, borrowing from …\nAttempt to deserialize the params.\nAttempt to deserialize the success payload, borrowing from …\nAttempt to deserialize the success payload, borrowing from …\nCreate a new empty packet with the given capacity.\nThe underlying serde_json error.\nFor deser errors, the text that failed to deserialize.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nRepresents an TrieAccount in the account trie.\nAccount information.\n-1 means all transactions\nReceipt envelope, as defined in EIP-2718.\nA vector of values\nThe hash of the block if the filter only targets a single …\nAn unsigned EIP-7702 authorization.\nBad block representation.\nThis represents a set of blobs, and its corresponding …\nBlock representation for RPC.\nError that can occur when converting other types to blocks\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nEmpty result.\nUser Operation\nPacked User Operation\nCallResponse for eth_callMany\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents errors that can occur when setting block …\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nError indicating that the <code>from_block</code> is greater than the …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nThe hash\nA block hash and an optional bool that defines if it’s …\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nRPC representation of block header, wrapping a consensus …\nA hex encoded or decimal index that’s intended to be …\nTransaction index\nInfo when syncing\nA transaction failed sender recovery\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nNot syncing\nNumeric id\nThe number\nBlock by number from canonical chain\nA block number\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nA raw block failed to decode\nA block hash which may have a boolean <code>requireCanonical</code> …\nRepresents the <code>rpc_modules</code> response, which returns the …\nSafe head block\nSend User Operation\nResponse to sending a user operation.\nThe detail of the sync stages.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC\nRepresents a transaction index where -1 means all …\nAdditional fields in the context of a (maybe) pending …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nRepresents a minimal EVM transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nA single value\nUnion type for representing a single value or a vector of …\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nThe result of an <code>eth_getWork</code> request\nReturns the EIP-2930 <code>access_list</code> for the particular …\nSets the access list for the transaction.\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nThe account proof.\nNumber of active peers\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nAdds an address to the access list and returns <code>true</code> if the …\nGet the <code>address</code> for the authorization.\nSets the address to query with this filter.\nGetter for the address field. Shortcut for …\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nAddress\nContract that emitted this log.\nReturns the BloomFilter for the given address\nValue of the withdrawal in gwei.\nReturn the withdrawal amount in wei.\nGet the array if present.\nReturns the block hash if this is a block hash filter.\nFallibly cast to a slice of hashes.\nGet the hashes if present.\nGet the logs if present.\nReturns the range (<code>from_block</code>, <code>to_block</code>) if this is a …\nFallibly cast to a slice of transactions.\nGet the transactions if present.\nGet the value if present.\nPins the block hash for the filter\nReturns the <code>SignedAuthorization</code> list of the transaction.\nThe authorization list is a list of tuples that store the …\nAuthorization list for for EIP-7702 transactions.\nThe account balance.\nThe account’s balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nAn array of block base fees per gas. This includes the …\nReturns the blob fee for <em>this</em> block according to the …\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for eip4844 transaction. For …\nBlob versioned hashes for EIP-4844 transactions.\nThe blob data.\nIndicates the progress of the sync stage.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nCreates a new instance with the given input data and sets …\nBuild a <code>TypedTransaction</code>.\nBuild a <code>TypedTransaction</code>\nReturn the tx type this request can be built as. Computed …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nCalculates the address that will be created by the …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nCapabilities\nGet <code>chain_id</code>.\nGet the <code>chain_id</code> for the authorization.\nThe chain ID of the authorization.\nThe chain ID for the transaction.\nThe hash of the code of the account.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nCheck if all necessary keys are present to build a 1559 …\nCheck if all necessary keys are present to build a 2930 …\nCheck if all necessary keys are present to build a 4844 …\nCheck if all necessary keys are present to build a 7702 …\nCheck if all necessary keys are present to build a legacy …\nNumber of connected peers\nChecks if the access list contains the specified address.\nChecks if a specific storage slot within an account is …\nContract address created, or None if not a deployment.\nConverts <code>self</code> into <code>Hashes</code>.\nGas used\nCurrent block\nGetter for the data field. Shortcut for <code>log.inner.data</code>.\nArbitrary length data.\nTransaction data\nDeserializes a boolean value into …\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nReturns the effective tip for this transaction.\nCreates a new empty block (without transactions).\nEnsures the result is OK, returning <code>AccessListWithGasUsed</code> …\nReturns the value if present, otherwise returns the error.\nEnsure block range validity\nThe entry point address for the user operation.\nOptional error message if the transaction failed.\neth_call output (if error)\nEthereum protocol information\nGiven the event signature in string form, it hashes it and …\nSets event_signature(topic0) (the event name for …\nHashes all event signatures and sets them as array to …\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nReturns the configured fee cap, if any.\nThe original filter, if any\nReturns <code>true</code> if the filter matches the given address.\nReturns <code>true</code> if the filter matches the given block hash.\nReturns true if the filter matches the given block number\nReturns <code>true</code> if the log matches the given topics\nBlock no this transaction was first seen.\nReturns an iterator over the list’s addresses and …\nConverts the list into a vec, expected by revm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>TransactionRequest</code> into a <code>Bundle</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the <code>from</code> field in the call to the provided address\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAddress of the sender\nThe address of the transaction author.\nSender\nSets the from block number\nConstructs block from a consensus block and …\nCreate a new <code>Header</code> from a sealed consensus header and …\nCreate a new <code>Header</code> from a sealed consensus header.\nInitializes the <code>TransactionRequest</code> with the provided …\nInitializes the <code>TransactionRequest</code> with the provided …\nThe gas limit for the transaction.\nGet <code>gas_limit</code>.\nSets the gas limit for the transaction.\nOverrides the gas limit of the block.\nGet <code>gas_price</code>.\nThe legacy gas price.\nEstimated gas used with access list.\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nReturns the numeric value of the <code>fromBlock</code> field\nReturns the <code>to_block</code> value, if any\nReturns the numeric value of the <code>fromBlock</code> field\nGets invalid fields for EIP-1559 transaction type\nGets invalid fields for all transaction types\nReturns the <code>from_block</code> value, if any\nReturns the numeric value of the <code>toBlock</code> field\nReturns true if at least one topic is set\nThe hash.\nThe hash.\nHash of the block\nHash of the transaction.\nReturns an iterator over references to the transaction …\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nPublic node id\nReturns the index if this is the index variant\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nReturns the <code>TransactionInfo</code> for this transaction.\nCode used to deploy the account if not yet on-chain\nThe receipt envelope.\nInner consensus header.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet <code>data</code>.\nSets the input data for the transaction.\nReturns the optional input data.\nTransaction data.\nTransaction data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the block and returns the <code>alloy_consensus::Block</code>.\nConsumes the type and returns the wrapped consensus header.\nConsumes the type and returns an iterator over the list’…\nConsumes the type and converts the list into a vec, …\nConverts a block with Tx hashes into a full block.\nConverts <code>self</code> into <code>Hashes</code>.\nConvert Self into raw vec of withdrawals.\nConsumes the type and returns the optional input data.\nConsumes self and returns the inner hashmap mapping module …\nConverts Transaction into TransactionRequest.\nConvert to a signed authorization by adding a signature.\nReturns an iterator over the transactions (if any). This …\nConsumes the type and returns the transactions as a vector.\nReturns true if this is the all variant\nCheck if the enum is an array.\nReturns true if this is a block hash filter.\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nWhether the block has no transactions.\nReturns whether the filter is empty\nCheck if the filter changes are empty.\nChecks if there is an error in the result.\nReturns true if the enum variant is used for full …\nCheck if the enum variant is used for hashes.\nCheck if the filter changes contain hashes.\nReturns true if this is the index variant\nReturns true if the transaction is a legacy or 2930 …\nCheck if the filter changes contain logs.\nReturns true if this is a range filter and has a from block\nReturn <code>true</code> if filter configured to match pending block. …\nReturn <code>true</code> if the filter configured to match pending …\nReturns true if this is a range filter.\nCheck if the filter changes contain transactions.\nReturns true if the enum variant is used for an uncle …\nIf the signature contains chain replay protection, And the …\nCheck if the enum is a single value.\nReturns an iterator over the transaction hashes.\nGet an iterator over the Withdrawals.\nReturns an iterator over the underlying HashSet. Values …\nGet a mutable iterator over the Withdrawals.\nStorage key.\nReturns the transaction kind.\nReturns the base fee of the latest block in the …\nReturns the blob fee of the latest block in the …\nReturns the number of transactions.\nLocal endpoint address\nDecode the log data into a typed log.\nLog Index in Block\nLog send from contracts.\nThe logs generated by the user operation.\nCalculate receipt logs bloom.\nThe bloom filter.\nConverts the transaction type by applying a function to …\nConverts the block’s header type by applying a function …\nMaps the inner receipt value of this receipt.\nConverts the block’s transaction type by applying a …\nReturns whether the given bloom matches the list of Blooms …\nReturns whether the given value matches the filter. It the …\nReturns <code>true</code> if the bloom contains one of the address …\nReturns <code>true</code> if the bloom matches the topics\nMax number of peers\nMax fee per blob gas for EIP-4844 transaction.\nThe max fee per blob gas for EIP-4844 blob transactions.\nReturns the EIP-1559 the maximum fee per gas the caller is …\nSets the maximum fee per gas for the transaction.\nThe max base fee per gas the sender is willing to pay.\nMaximum fee per gas\nThe maximum fee per gas.\nReturns the EIP-1559 Priority fee the caller is paying to …\nSets the maximum priority fee per gas for the transaction.\nThe max priority fee per gas the sender is willing to pay, …\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nCreates a new instance with the given input data and sets …\nCreates a new instance with the given input data.\nAccount meta JSON\nCheck if all necessary keys are present to build a …\nAccount name\nAccount name\nThe name of the sync stage.\nNode client ID\nNetwork information\nCreate a new instance of <code>RPCModules</code>\nCreate a new <code>EIP1186StorageProof</code> instance.\nCreates a new <code>Block</code> with the given header and transactions.\nCreate a new <code>Header</code> from a consensus header.\nCreate a new Withdrawals instance.\nCreates a new, empty filter\nCreates a new wrapper type for a Filter, if any with …\nCreates a new instance with the given input data.\nCreates a new <code>BlockTransactions::Hashes</code> variant from the …\nReturns the base fee of the next block.\nReturns the blob base fee of the next block.\nReturns the blob fee for the next block according to the …\nCalculate excess blob gas for the next block according to …\nGet <code>nonce</code>.\nGet the <code>nonce</code> for the authorization.\nSets the nonce for the transaction.\nThe nonce for the authorization.\nThe account nonce.\nThe account’s nonce.\nThe nonce of the transaction.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nThe number\nThe number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nDetailed information on peers\nPIP protocol information.\nPopulate the <code>blob_versioned_hashes</code> key, if a sidecar …\nThe proof-of-work hash.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nCheck this builder’s preferred type, based on the fields …\nReturn the max priority fee per gas if the transaction is …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nProtocols information\npublic key of the recovered account\nOverrides the prevrandao of the block.\nThe reason for failure, if any.\nThe receipt.\nThe transaction receipt of the user operation.\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nWhether the block must be a canonical block\nReserialize the data, returning a new <code>Log</code> object wrapping …\nReserialize the inner data, returning an …\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nThe seed hash.\nSets the inner filter object\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nSerializes the <code>PendingTransactionFilterKind</code> into a boolean …\nBlob sidecar for EIP-4844 transactions.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\nComputes the signature hash used to sign the …\nCalculates a heuristic for the in-memory size of the …\nCalculates a heuristic for the in-memory size of the …\nCalculate a heuristic for the in-memory size of the …\nInteger the size of this block in bytes.\nThe details of the sync stages as an hashmap where the key …\nStarting block\nReturns the status of the transaction.\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe hash of the storage account data.\nIndicates whether the user operation was successful.\nThe target.\nOverrides the timestamp of the block.\nSets the recipient address for the transaction.\nGet the transaction’s address of the contract that will …\nGet the transaction’s address of the contract that will …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nSets the to block number\nReturns a list of Bloom (BloomFilter) corresponding to the …\nReturns a ValueOrArray inside an Option, so that:\nSets topic0 (the event name for non-anonymous events)\nGetter for the topic0 field.\nSets the 1st indexed topic\nSets the 2nd indexed topic\nSets the 3rd indexed topic\nGetter for the topics field. Shortcut for …\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nReturns the BloomFilter for the given topics\nGet the topic list, mutably. This gives access to the …\nTotal difficulty\nCalculate the total size, including capacity, of the …\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nReturns the transaction type.\nSets the transactions type for the transactions.\nThe EIP-2718 transaction type. See EIP-2718 for more …\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nTrim field conflicts, based on the preferred type\nConsumes the type and returns the optional input data.\nConverts the transaction type by applying a fallible …\nConverts the block’s header type by applying a fallible …\nConverts the block’s transaction type by applying a …\nReturns an iterator over the transactions (if any). This …\nThe transaction type.\nReturns an instance of BlockTransactions with the Uncle …\nConstructs an “uncle block” from the provided header.\nUncles’ hashes.\nReturns the optional input data.\nThe hash of the user operation.\nThe hash of the user operation.\nAccount UUID (<code>None</code> for address book entries)\nIndex of validator associated with withdrawal.\nGet <code>value</code>.\nSets the value (amount) for the transaction.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nReturns a new <code>TransactionInfo</code> with the provided base fee.\nPins the block hash this filter should target.\nSets the block number this range filter should start at.\nSet the size of the block.\nSets the block number this range filter should end at.\nSet the total difficulty of the block.\nSets the transactions for the block.\nSets the uncles for the block.\nSets the withdrawals for the block.\nWithdrawals in the block.\nThe starting block number, which is greater than <code>to</code>.\nThe ending block number, which is less than <code>from</code>.\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nRepresents an TrieAccount in the account trie.\nAccount information.\n-1 means all transactions\nReceipt envelope, as defined in EIP-2718.\nA vector of values\nThe hash of the block if the filter only targets a single …\nAn unsigned EIP-7702 authorization.\nBad block representation.\nThis represents a set of blobs, and its corresponding …\nBlock representation for RPC.\nError that can occur when converting other types to blocks\nA block hash <em>or</em> a block number\nA Block Identifier. …\nA block number and a hash\nA block Number (or tag - “latest”, “earliest”, “…\nBlockOverrides is a set of header fields to override.\nAn iterator over the transaction hashes of a block.\nBlock Transactions depending on the boolean attribute of …\nDetermines how the <code>transactions</code> field of block should be …\nHelper type to represent a bloom filter used for matching …\nBundle of transactions\nChain status.\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nResponse for EIP-1186 account proof <code>eth_getProof</code>\nData structure with proof for one single storage-entry\nEarliest block (genesis)\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nEmpty result.\nUser Operation\nPacked User Operation\nCallResponse for eth_callMany\nExtended account information (used by <code>parity_allAccountInfo</code>…\nResponse type for <code>eth_feeHistory</code>\nFilter for logs.\nRepresents errors that can occur when setting block …\nRepresents the target range of blocks for the filter\nResponse of the <code>eth_getFilterChanges</code> RPC.\nOwned equivalent of a <code>SubscriptionId</code>\nFilterSet is a set of values that will be used to filter …\nSupport for matching Filters\nFinalized block accepted as canonical\nBlock number and hash of the forked block.\nError indicating that the <code>from_block</code> is greater than the …\nFull transactions\nInclude full transaction objects: BlockTransactions::Full\nReceive full details of the transactions.\nThe hash\nA block hash and an optional bool that defines if it’s …\nOnly hashes\nOnly include hashes: BlockTransactions::Hashes\nNew hashes (block or transactions).\nReceive only the hashes of the transactions.\nRPC representation of block header, wrapping a consensus …\nA hex encoded or decimal index that’s intended to be …\nTransaction index\nInfo when syncing\nA transaction failed sender recovery\nLatest block\nReceipt envelope with no type flag.\nEthereum Log emitted by a transaction\nNew logs.\nNot syncing\nNumeric id\nThe number\nBlock by number from canonical chain\nA block number\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nPeer Ethereum protocol information\nPeer connection information\nPeer network information\nPeer protocols information\nPeers info\nPending block (not yet part of the blockchain)\nSpecifies the kind of information you wish to receive from …\nPeer PIP protocol information\nRepresents a range of blocks with optional from and to …\nEthereum Log\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\naccount derived from a signature as well as information …\nA raw block failed to decode\nA block hash which may have a boolean <code>requireCanonical</code> …\nSafe head block\nSend User Operation\nResponse to sending a user operation.\nThe detail of the sync stages.\nState context for callMany\nString id\nSyncing info\nSync status\nA single topic\nTransaction object used in RPC\nRepresents a transaction index where -1 means all …\nAdditional fields in the context of a (maybe) pending …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nPropagation statistics for pending transaction.\nRepresents a minimal EVM transaction.\nNew transactions.\nInternal struct to calculate reward percentiles\nSpecial case for uncle response.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nA single value\nUnion type for representing a single value or a vector of …\nWithdrawal represents a validator withdrawal from the …\nRepresents a collection of Withdrawals.\nThe result of an <code>eth_getWork</code> request\nReturns the EIP-2930 <code>access_list</code> for the particular …\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nThe account proof.\nNumber of active peers\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nThe account address.\naddress of the recovered account\nTarget address for withdrawn ether.\nAddress\nContract that emitted this log.\nValue of the withdrawal in gwei.\nReturns the <code>SignedAuthorization</code> list of the transaction.\nThe authorization list is a list of tuples that store the …\nAuthorization list for for EIP-7702 transactions.\nThe account balance.\nThe account’s balance.\nOverrides the basefee of the block.\nBase fee of the block.\nAn array of block base fees per blob gas. This includes …\nAn array of block base fees per gas. This includes the …\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nAn array of block blob gas used ratios. These are …\nBlob versioned hashes for eip4844 transaction. For …\nBlob versioned hashes for EIP-4844 transactions.\nThe blob data.\nIndicates the progress of the sync stage.\nDescribes the gap in the blockchain, if there is one: …\nA block hash\nA dictionary that maps blockNumber to a user-defined hash. …\nHash of the block the transaction that emitted this log …\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nBlock Number\nNumber of the block the transaction that emitted this log …\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nFilter block options, specifying on which blocks the …\nBlock overrides to apply\nThe timestamp of the block as proposed in: …\nCalculates the blob gas price from the header’s excess …\nCalculates the <code>excess_blob_gas</code> from the parent header’s …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nCapabilities\nGet <code>chain_id</code>.\nThe chain ID of the authorization.\nThe chain ID for the transaction.\nThe hash of the code of the account.\nThe hash of the code of the account.\nOverrides the coinbase address of the block.\nThe blob commitments.\nNumber of connected peers\nContract address created, or None if not a deployment.\nGas used\nCurrent block\nArbitrary length data.\nTransaction data\nOverrides the difficulty of the block.\nPeer total difficulty if known\nPeer total difficulty\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nThe entry point address for the user operation.\nThis module provides implementations for EIP-4337.\nCommonly used errors for the <code>eth_</code> namespace.\nOptional error message if the transaction failed.\neth_call output (if error)\nEthereum protocol information\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nThe original filter, if any\nBlock no this transaction was first seen.\nAddress of the sender\nThe address of the transaction author.\nSender\nThe gas limit for the transaction.\nGet <code>gas_limit</code>.\nOverrides the gas limit of the block.\nGet <code>gas_price</code>.\nThe legacy gas price.\nEstimated gas used with access list.\nGas used by the transaction\nGas used by this transaction alone.\nAn array of block gas used ratios. These are calculated as …\nThe hash.\nThe hash.\nHash of the block\nHash of the transaction.\nSHA3 of peer best block hash\nSHA3 of peer best block hash\nHeader of the block.\nHighest block seen so far\nPublic node id\nMonotonically increasing identifier issued by consensus …\nIndex of the transaction in the block\nCode used to deploy the account if not yet on-chain\nThe receipt envelope.\nInner consensus header.\nConsensus log object\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet <code>data</code>.\nTransaction data.\nTransaction data\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nIf the signature contains chain replay protection, And the …\nStorage key.\nReturns the transaction kind.\nLocal endpoint address\nLog Index in Block\nLog send from contracts.\nThe logs generated by the user operation.\nCalculate receipt logs bloom.\nThe bloom filter.\nMax number of peers\nMax fee per blob gas for EIP-4844 transaction.\nThe max fee per blob gas for EIP-4844 blob transactions.\nReturns the EIP-1559 the maximum fee per gas the caller is …\nThe max base fee per gas the sender is willing to pay.\nMaximum fee per gas\nThe maximum fee per gas.\nReturns the EIP-1559 Priority fee the caller is paying to …\nThe max priority fee per gas the sender is willing to pay, …\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nAccount meta JSON\nAccount name\nAccount name\nThe name of the sync stage.\nNode client ID\nNetwork information\nGet <code>nonce</code>.\nThe nonce for the authorization.\nThe account nonce.\nThe account’s nonce.\nThe nonce of the transaction.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nThe number\nThe number\nOverrides the block number.\nThe block number: this isn’t always stored.\nLowest number block of the returned range.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nDetailed information on peers\nPIP protocol information.\nThe proof-of-work hash.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nReturn the max priority fee per gas if the transaction is …\nproof for the pair\nThe blob proofs.\nPeers this transaction was propagated to with count.\nProtocols information\npublic key of the recovered account\nEthereum types for pub-sub\nOverrides the prevrandao of the block.\nThe reason for failure, if any.\nThe receipt.\nThe transaction receipt of the user operation.\nRemote endpoint address\nGeth Compatibility Field: whether this log was removed\nWhether the block must be a canonical block\nThe effective gas tip by the transaction\nAn (optional) array of effective priority fee per gas data …\nThe seed hash.\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nBlob sidecar for EIP-4844 transactions.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\n‘eth_simulateV1’ Request / Response types: …\nInteger the size of this block in bytes.\nThe details of the sync stages as an hashmap where the key …\nStarting block\nbindings for state overrides in eth_call\nIf transaction is executed successfully.\nThe hash of the storage of the account.\nKeys of storage that would be loaded at the start of …\nThe storage proof.\nThe hash of the storage account data.\nIndicates whether the user operation was successful.\nThe target.\nOverrides the timestamp of the block.\nGet the transaction’s address of the contract that will …\nAddress of the receiver. None when its a contract creation …\nThe destination address of the transaction.\nTopics (maximum of 4)\nTopics of the log. The number of logs depend on what <code>LOG</code> …\nTotal difficulty\nRPC types for transactions\nTransaction Hash\nTransaction Hash.\nInclusive number of tx to replay in block. -1 means replay …\nIndex of the Transaction in the block\nIndex within the block.\nTransaction Index\nThe EIP-2718 transaction type. See EIP-2718 for more …\nBlock Transactions. In the case of an uncle block, this …\nAll transactions to execute\nThe transaction type.\nUncles’ hashes.\nThe hash of the user operation.\nThe hash of the user operation.\nAccount UUID (<code>None</code> for address book entries)\nIndex of validator associated with withdrawal.\nGet <code>value</code>.\nValue that the key holds\neth_call output (if no error)\nThe value transferred in the transaction, in wei.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nNegotiated ethereum protocol version\nNegotiated PIP protocol version\nWarp sync snapshot chunks total.\nWarp sync snapshot chunks processed.\nWithdrawals in the block.\nThe starting block number, which is greater than <code>to</code>.\nThe ending block number, which is less than <code>from</code>.\nThe block number or tag this filter should start at.\nThe block number or that this filter should end at.\nRepresents the expected state of an account for a …\nAlias for backwards compat\nUser Operation\nPacked User Operation\n<code>PackedUserOperation</code> in the spec: Entry Point V0.7\nExpected storage root hash of the account.\nSend User Operation\nResponse to sending a user operation.\nExplicit storage slots and their expected values.\nOptions for conditional raw transaction submissions.\n<code>UserOperation</code> in the spec: Entry Point V0.6\nRepresents the gas estimation for a user operation.\nRepresents the receipt of a user operation.\nThe actual gas cost incurred by the user operation.\nThe actual gas used by the user operation.\nReturns the slot values if the account storage is a slot …\nThe maximal block number at which the transaction can be …\nThe maximal block number at which the transaction can be …\nThe minimal block number at which the transaction can be …\nThe minimal block number at which the transaction can be …\nData that’s passed to the sender for execution\nThe call data.\nGas limit for execution phase\nThe gas limit for the call.\nThe gas limit for the call.\nComputes the aggregate cost of the preconditions; total …\nThe entry point address for the user operation.\nDeployer contract address: Required exclusively for …\nFactory data for the account creation process, applicable …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCode used to deploy the account if not yet on-chain\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the account storage is a root hash.\nA map of account addresses to their expected storage …\nA map of account addresses to their expected storage …\nThe logs generated by the user operation.\nReturns <code>true</code> if the transaction matches the given block …\nReturns <code>true</code> if the transaction matches the given block …\nReturns <code>true</code> if the transaction matches the given …\nMaximum fee per gas\nThe maximum fee per gas.\nMaximum priority fee per gas\nThe maximum priority fee per gas.\nAnti-replay protection; also used as the salt for …\nPrevents message replay attacks and serves as a …\nThe nonce of the user operation.\nPaymaster contract address: Needed if a third party is …\nThe address of the paymaster, if any.\nPaymaster Contract address and any extra data required for …\nThe paymaster data.\nThe gas limit for the paymaster post-operation.\nThe gas limit for the paymaster verification.\nThe gas limit for the paymaster verification.\nGas to compensate the bundler\nPrepaid gas fee: Covers the bundler’s costs for initial …\nThe gas limit for the pre-verification.\nThe reason for failure, if any.\nThe transaction receipt of the user operation.\nThe address of the smart contract account\nThe account making the operation.\nThe address of the sender of the user operation.\nUsed to validate a UserOperation along with the nonce …\nThe signature of the transaction.\nIndicates whether the user operation was successful.\nThe maximal timestamp at which the transaction can be …\nThe maximal timestamp at which the transaction can be …\nThe minimal timestamp at which the transaction can be …\nThe minimal timestamp at which the transaction can be …\nThe hash of the user operation.\nThe hash of the user operation.\nThe gas limit for the verification.\nGas limit for verification phase\nThe gas limit for the verification.\nList of JSON-RPC error codes\nCustom geth error code, …\nhttps://eips.ethereum.org/EIPS/eip-1898\nThrown when a block wasn’t found …\nFailed to send transaction, See also …\nThrown when querying for <code>finalized</code> or <code>safe</code> block before …\nReturns the error code as <code>i32</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBoolean parameter for new pending transactions.\nSyncing metadata.\nFull Transaction\nNew block header.\nLog\nLogs subscription.\nLog parameters.\nNew block headers subscription.\nNew Pending Transactions subscription.\nNo parameters passed.\nAny additional parameters for a subscription.\nResponse type for a SyncStatus subscription.\nIf not currently syncing, this should always be <code>false</code>.\nSubscription kind.\nSubscription result.\nSyncStatus\nSync status metadata.\nNode syncing status subscription.\nTransaction hash\nThe current block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe highest block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if it’s a bool parameter.\nReturns true if it’s a log parameter.\nThe starting block.\nWhether the node is currently syncing.\nThe maximum number of blocks that can be simulated in a …\nRepresents a batch of calls to be simulated sequentially …\nCaptures the outcome of a transaction simulation. It …\nThe error response returned by the <code>eth_simulateV1</code> method.\nSimulation options for executing multiple blocks and …\nRepresents the result of simulating a block.\nModifications to the default block characteristics.\nArray of block state calls to be executed at specific, …\nAdds a call to the block.\nA vector of transactions to be simulated.\nA vector of results for each call in the block.\nCode error -3200: Execution reverted -32015: VM execution …\nError in case the call failed\nAdds a block to the simulation payload.\nAdds multiple blocks to the simulation payload.\nAdds multiple calls to the block.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe amount of gas used by the transaction.\nThe simulated block.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLogs generated during the execution of the transaction.\nMessage error\nThe raw bytes returned by the transaction.\nFlag to decide if full transactions should be returned …\nState modifications to apply before executing the …\nThe final status of the transaction, typically indicating …\nFlag to determine whether to trace ERC20/ERC721 token …\nFlag to enable or disable validation of the transaction …\nEnables block overrides\nEnables returning full transactions.\nEnables state overrides\nEnables tracing of token transfers.\nEnables validation of the transaction sequence.\nCustom account override used in call\nHelper type that bundles various overrides for EVM …\nA set of account overrides\nFake balance to set for the account before executing the …\nCreates a new instance with the given block overrides.\nApplies overrides to the block before execution.\nFake EVM bytecode to inject into the account before …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>true</code> if the overrides contain block overrides.\nReturns <code>true</code> if the overrides contain state overrides.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMoves addresses precompile into the specified address. …\nCreates a new instance with the given overrides\nFake nonce to set for the account before executing the …\nCreates a new instance with the given state overrides.\nFake key-value mapping to override all slots in the …\nApplies overrides to the state before execution.\nFake key-value mapping to override individual slots in the …\nAdds block overrides to an existing instance.\nAdds state overrides to an existing instance.\nAccessList as defined in EIP-2930\nA list of addresses and storage keys that the transaction …\n<code>AccessListResult</code> for handling errors from …\nReceipt envelope, as defined in EIP-2718.\nAn unsigned EIP-7702 authorization.\nThis represents a set of blobs, and its corresponding …\nError variants when converting from crate::Transaction to …\nA custom Conversion Error that doesn’t fit other …\nReceipt envelope with type flag 2, containing a EIP-1559 …\nReceipt envelope with type flag 1, containing a EIP-2930 …\nReceipt envelope with type flag 2, containing a EIP-4844 …\nReceipt envelope with type flag 4, containing a EIP-7702 …\nReceipt envelope with no type flag.\nReceipt containing result of transaction execution.\nReceipt envelope, as defined in EIP-2718.\n<code>Receipt</code> with calculated bloom filter.\nTransaction object used in RPC\nAdditional fields in the context of a (maybe) pending …\nHelper type that supports both <code>data</code> and <code>input</code> fields that …\nTransaction receipt\nRepresents <em>all</em> transaction requests to/from RPC.\nRepresents a minimal EVM transaction.\nReturns the EIP-2930 <code>access_list</code> for the particular …\nList with accounts accessed during transaction.\nAn EIP-2930 access list, which lowers cost for accessing …\nAccount addresses that would be loaded at the start of …\nThe address of the authorization.\nReturns the <code>SignedAuthorization</code> list of the transaction.\nThe authorization list is a list of tuples that store the …\nAuthorization list for for EIP-7702 transactions.\nBase fee of the block.\nThe price paid by the eip-4844 transaction per blob gas.\nReturns the total gas for all blobs in this transaction.\nBlob gas used by the eip-4844 transaction\nBlob versioned hashes for eip4844 transaction. For …\nBlob versioned hashes for EIP-4844 transactions.\nThe blob data.\nHash of the block this transaction was included within.\nHash of block where transaction was included, <code>None</code> if …\nHash of the block.\nNumber of the block this transaction was included within.\nNumber of block where transaction was included, <code>None</code> if …\nNumber of the block.\nGet <code>chain_id</code>.\nThe chain ID of the authorization.\nThe chain ID for the transaction.\nThe blob commitments.\nContract address created, or None if not a deployment.\nGas used\nTransaction data\nReturns the effective gas price for the given base fee.\nThe price paid post-execution by the transaction (i.e. …\nDeprecated effective gas price value.\nReturns the effective tip for this transaction.\nOptional error message if the transaction failed.\nAddress of the sender\nThe address of the transaction author.\nSender\nThe gas limit for the transaction.\nGet <code>gas_limit</code>.\nGet <code>gas_price</code>.\nThe legacy gas price.\nEstimated gas used with access list.\nGas used by this transaction alone.\nHash of the transaction.\nIndex of the transaction in the block\nThe receipt envelope.\nThe receipt envelope, which contains the consensus receipt …\nThe inner transaction object\nGet <code>data</code>.\nTransaction data.\nTransaction data\nReturns true if the transaction is a contract creation. We …\nReturns <code>true</code> if the transaction supports dynamic fees.\nReturns the transaction kind.\nLog send from contracts.\nThe bloom filter.\nMax fee per blob gas for EIP-4844 transaction.")