searchState.loadedDescShard("alloy_network", 0, "alloy-networks\nBlock header representation with certain fields made …\nTypes for a catch-all network.\nReceipt envelope, as defined in EIP-2718.\nA catch-all block type for handling blocks on multiple …\nA catch-all header type for handling headers on multiple …\nA catch-all transaction type for handling transactions on …\nAlias for a catch-all receipt type.\nTransaction envelope for a catch-all network.\nTransaction type for a catch-all network.\nUnsigned transaction type for a catch-all network.\nBlock JSON-RPC response.\nThe JSON body of a block response.\nResult type for transaction builders\nA custom error.\nContains the error value\nTypes for a mainnet-like Ethereum network.\nAn Ethereum transaction.\nAn Ethereum transaction.\nA wallet capable of signing any transaction for the …\nHeader type\nThe network header type.\nThe JSON body of a header response.\nInvalid transaction request\nCaptures type info for network-specific RPC …\nA wallet capable of signing any transaction for the given …\nContains the success value\nThe network receipt envelope type.\nReceipt JSON-RPC response.\nThe JSON body of a transaction receipt.\nSigner error.\nTransaction type\nA Transaction builder for a network.\nTransaction builder type supporting EIP-4844 transaction …\nTransaction builder type supporting EIP-7702 transaction …\nError type for transaction builders.\nThe JSON body of a transaction request.\nTransaction JSON-RPC response. Aggregates transaction data …\nThe JSON body of a transaction response.\nThe network transaction envelope type.\nAsynchronous transaction signer, capable of signing any …\nSynchronous transaction signer,  capable of signing any …\nThe network transaction type enum.\nAn unbuilt transaction, along with some error.\nA transaction with unknown type.\nA transaction with unknown type.\nA transaction envelope from an unknown network.\nA typed transaction of an unknown Network\nAn enum over the various transaction types.\nSigner cannot produce signature type required for …\nGet the EIP-2930 access list for the transaction.\nGet the address of the signer.\nGet the address of the signer.\nApply a function to the builder, returning the modified …\nApply a function to the builder, returning the modified …\nReturns the <code>TxEip1559</code> variant if the transaction is an …\nReturns the <code>TxEip2930</code> variant if the transaction is an …\nReturns the <code>TxEip4844Variant</code> variant if the transaction is …\nReturns the <code>TxEip7702</code> variant if the transaction is an …\nReturns the inner Ethereum transaction envelope, if it is …\nReturns the <code>TxLegacy</code> variant if the transaction is a …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nAssert that the builder prefers a certain transaction …\nEIP-7702 Authorization list.\nGet the EIP-7702 authorization list for the transaction.\nBase fee per unit of gas (if past London)\nAlias of <code>author</code>\nBlob gas price paid by the eip-4844 transaction.\nBlob gas used by the eip-4844 transaction.\nBlob gas used\nGets the EIP-4844 blob sidecar of the transaction.\nHash of the block this transaction was included within.\nBlock hash\nNumber of the block this transaction was included within.\nBlock number\nReturn the receipt’s bloom.\nBuild a signed transaction.\nBuild an unsigned, but typed, transaction.\nCalculates the address that will be created by the …\nCalculates the address that will be created by the …\nTrue if the builder contains all necessary information to …\nTrue if the builder contains all necessary information to …\nGet the chain ID for the transaction.\nClear the kind of transaction.\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nCheck if all necessary keys are present to build the …\nAddress of the created contract, or <code>None</code> if the …\nReturns the cumulative gas used at this receipt.\nReturns the cumulative gas used at this receipt.\nInstantiate a custom error.\nGet the default signer.\nGet the default signer address. This address should be used\nDifficulty\nEffective gas price.\nEIP-2718 traits.\nThe error that occurred.\nExcess blob gas\nExtra data\nAdditional fields.\nAddress of the sender.\nSender of the transaction\nGet the sender for the transaction.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the gas limit for the transaction.\nGas Limit\nGet the legacy gas price for the transaction.\nGas Price, this is the RPC format for <code>max_fee_per_gas</code>, …\nGas used by this transaction alone.\nGas Used\nReturn true if the signer contains a credential for the …\nHash of the block\nTransaction hash.\nBlock header\nThe inner struct.\nInner consensus header.\nThe receipt envelope.\nThe inner struct.\nThe inner struct.\nTransaction type.\nGet the input data for the transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the <code>to</code> field to a create call.\nSet the <code>to</code> field to a create call.\nConverts this header into a <code>Header</code> with default values for …\nConvert the error into an unbuilt transaction error.\nReturns whether this is a legacy receipt (type 0)\nReturn true if the transaction was successful.\nGet the kind of transaction.\nReturn the receipt logs.\nLogs bloom\nGet the max fee per blob gas for the transaction.\nGet the max fee per gas for the transaction.\nMax BaseFeePerGas the user is willing to pay. For …\nGet the max priority fee per gas for the transaction.\nMemoization for deserialization.\nMix Hash\nCreate a new signer with the given signer as the default …\nGet the nonce for the transaction.\nNonce\nBlock number\nHash of the uncles\nAll fields not present in the inner struct.\nAll fields not present in the inner struct.\nAll fields not present in the inner struct.\nReturns the <code>other</code> field from <code>WithOtherFields</code> type.\nReturns the transaction type that this builder will …\nReturns the transaction type that this builder will build. …\nEIP-4788 parent beacon block root\nHash of the parent\nTrim any conflicting keys and populate any computed fields …\nTransactions receipts root hash\nRegister a new signer on this object, and set it as the …\nRegister a new signer on this object. This signer will be …\nThe original request that failed to build.\nEIP-7685 requests hash.\nCalculate the length of the rlp payload of the network …\nSets the EIP-2930 access list.\nSets the EIP-7702 authorization list.\nSets the EIP-4844 blob sidecar of the transaction.\nSet the data field to a contract call. This will clear the …\nSet the data field to a contract call. This will clear the …\nSet the chain ID for the transaction.\nSet the <code>to</code> field to a create call.\nSet the <code>to</code> field to a create call.\nDeploy the code by making a create call with data. This …\nDeploy the code by making a create call with data. This …\nSet the sender for the transaction.\nSet the gas limit for the transaction.\nSet the legacy gas price for the transaction.\nSet the input data for the transaction.\nSet the kind of transaction.\nSet the max fee per blob gas  for the transaction.\nSet the max fee per gas  for the transaction.\nSet the max priority fee per gas for the transaction.\nSet the nonce for the transaction.\nSet the recipient for the transaction.\nSet the recipient for the transaction.\nSet the value for the transaction.\nAsynchronously sign a transaction request, using the …\nAsynchronously sign a transaction request, using the …\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction.\nAsynchronously sign an unsigned transaction, with a …\nSynchronously sign an unsigned transaction.\nReturn an iterator of all signer addresses.\nGet the signer for the given address.\nInteger the size of this block in bytes.\nThe post-transaction state root (pre Byzantium)\nState root hash\nStatus of the transaction.\nReturns the success status of the receipt’s transaction.\nTimestamp\nAddress of the receiver.\nGet the recipient for the transaction.\nGet the recipient for the transaction.\nTotal difficulty\nTransaction Hash.\nIndex within the block.\nTransaction Index\nTransaction type format for RPC. This field is included …\nBlock transactions\nMutable reference to block transactions\nTransactions root hash\nReturns the inner Ethereum transaction envelope, if it is …\nAttempts to convert this header into a <code>Header</code>.\nHash of the transaction\nTransaction type.\nThe transaction type.\nGet the value for the transaction.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the access list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the authorization list.\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nBuilder-pattern method for setting the EIP-4844 blob …\nMake a contract call with data.\nMake a contract call with data.\nBuilder-pattern method for setting the chain ID.\nBuilder-pattern method for setting the chain ID.\nDeploy the code by making a create call with data. This …\nDeploy the code by making a create call with data. This …\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the sender.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the gas limit.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the legacy gas price.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the input data.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting the kind of transaction.\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per blob gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max fee per gas .\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting max priority fee per …\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the nonce.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the recipient.\nBuilder-pattern method for setting the value.\nBuilder-pattern method for setting the value.\nWithdrawals root hash added by EIP-4895 and is ignored in …\nDecoding trait for EIP-2718 envelopes. These envelopes …\nAn EIP-2718 envelope, blanket implemented for types that …\nEIP-2718 decoding errors.\nResult type for [EIP-2718] decoding.\nEncoding trait for EIP-2718 envelopes.\nContains the error value\nContains the success value\nRlp error from <code>alloy_rlp</code>.\nGot an unexpected type flag while decoding.\nEncode the transaction according to EIP-2718 rules. First …\nEncode the transaction according to EIP-2718 rules. First …\nThe length of the 2718 encoded envelope. This is the …\nEncode the transaction according to [EIP-2718] rules. …\nExtract the type byte from the buffer, if any. The type …\nDecode the default variant.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrue if the envelope is the legacy variant.\nDecode an EIP-2718 transaction in the network format. The …\nEncode in the network format. The network format is used …\nThe length of the 2718 encoded envelope in network format. …\nSeal the encodable, by encoding and hashing it.\nCompute the hash as committed to in the MPT trie. This …\nReturn the type flag (if any).\nDecode the appropriate variant, based on the type flag.")