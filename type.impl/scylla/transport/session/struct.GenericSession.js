(function() {
    var type_impls = Object.fromEntries([["scylla",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-GenericSession%3CDeserApi%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#215-234\">Source</a><a href=\"#impl-Debug-for-GenericSession%3CDeserApi%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;DeserApi&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"scylla/transport/session/struct.GenericSession.html\" title=\"struct scylla::transport::session::GenericSession\">GenericSession</a>&lt;DeserApi&gt;<div class=\"where\">where\n    DeserApi: <a class=\"trait\" href=\"scylla/transport/session/trait.DeserializationApiKind.html\" title=\"trait scylla::transport::session::DeserializationApiKind\">DeserializationApiKind</a>,</div></h3><div class=\"docblock\"><p>This implementation deliberately omits some details from Cluster in order\nto avoid cluttering the print with much information of little usability.</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#219-233\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","scylla::transport::session::Session","scylla::transport::session::LegacySession"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericSession%3CCurrentDeserializationApi%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#480-900\">Source</a><a href=\"#impl-GenericSession%3CCurrentDeserializationApi%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"scylla/transport/session/struct.GenericSession.html\" title=\"struct scylla::transport::session::GenericSession\">GenericSession</a>&lt;<a class=\"enum\" href=\"scylla/transport/session/enum.CurrentDeserializationApi.html\" title=\"enum scylla::transport::session::CurrentDeserializationApi\">CurrentDeserializationApi</a>&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_unpaged\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#538-544\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.query_unpaged\" class=\"fn\">query_unpaged</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/query_result/struct.QueryResult.html\" title=\"struct scylla::transport::query_result::QueryResult\">QueryResult</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sends a request to the database and receives a response.<br />\nPerforms an unpaged query, i.e. all results are received in a single response.</p>\n<p>This is the easiest way to make a query, but performance is worse than that of prepared queries.</p>\n<p>It is discouraged to use this method with non-empty values argument (<code>is_empty()</code> method from <code>SerializeRow</code>\ntrait returns false). In such case, query first needs to be prepared (on a single connection), so\ndriver will perform 2 round trips instead of 1. Please use <a href=\"scylla/transport/session/struct.GenericSession.html#method.execute_unpaged\" title=\"method scylla::transport::session::GenericSession::execute_unpaged\"><code>Session::execute_unpaged()</code></a> instead.</p>\n<p>As all results come in one response (no paging is done!), the memory footprint and latency may be huge\nfor statements returning rows (i.e. SELECTs)! Prefer this method for non-SELECTs, and for SELECTs\nit is best to use paged queries:</p>\n<ul>\n<li>to receive multiple pages and transparently iterate through them, use <a href=\"scylla/transport/session/struct.GenericSession.html#method.query_iter\" title=\"method scylla::transport::session::GenericSession::query_iter\">query_iter</a>.</li>\n<li>to manually receive multiple pages and iterate through them, use <a href=\"scylla/transport/session/struct.GenericSession.html#method.query_single_page\" title=\"method scylla::transport::session::GenericSession::query_single_page\">query_single_page</a>.</li>\n</ul>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/simple.html\">the book</a> for more information</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>query</code> - statement to be executed, can be just a <code>&amp;str</code> or the <a href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a> struct.</li>\n<li><code>values</code> - values bound to the query, the easiest way is to use a tuple of bound values.</li>\n</ul>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"comment\">// Insert an int and text into a table.\n</span>session\n    .query_unpaged(\n        <span class=\"string\">\"INSERT INTO ks.tab (a, b) VALUES(?, ?)\"</span>,\n        (<span class=\"number\">2_i32</span>, <span class=\"string\">\"some text\"</span>)\n    )\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::IntoTypedRows;\n\n<span class=\"comment\">// Read rows containing an int and text.\n// Keep in mind that all results come in one response (no paging is done!),\n// so the memory footprint and latency may be huge!\n// To prevent that, use `Session::query_iter` or `Session::query_single_page`.\n</span><span class=\"kw\">let </span>query_rows = session\n    .query_unpaged(<span class=\"string\">\"SELECT a, b FROM ks.tab\"</span>, <span class=\"kw-2\">&amp;</span>[])\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?\n    </span>.into_rows_result()<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">for </span>row <span class=\"kw\">in </span>query_rows.rows()<span class=\"question-mark\">? </span>{\n    <span class=\"comment\">// Parse row as int and text.\n    </span><span class=\"kw\">let </span>(int_val, text_val): (i32, <span class=\"kw-2\">&amp;</span>str) = row<span class=\"question-mark\">?</span>;\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_single_page\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#597-605\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.query_single_page\" class=\"fn\">query_single_page</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n    paging_state: <a class=\"struct\" href=\"scylla/statement/struct.PagingState.html\" title=\"struct scylla::statement::PagingState\">PagingState</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"scylla/transport/query_result/struct.QueryResult.html\" title=\"struct scylla::transport::query_result::QueryResult\">QueryResult</a>, <a class=\"enum\" href=\"scylla/statement/enum.PagingStateResponse.html\" title=\"enum scylla::statement::PagingStateResponse\">PagingStateResponse</a>), <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Queries a single page from the database, optionally continuing from a saved point.</p>\n<p>It is discouraged to use this method with non-empty values argument (<code>is_empty()</code> method from <code>SerializeRow</code>\ntrait returns false). In such case, query first needs to be prepared (on a single connection), so\ndriver will perform 2 round trips instead of 1. Please use <a href=\"scylla/transport/session/struct.GenericSession.html#method.execute_single_page\" title=\"method scylla::transport::session::GenericSession::execute_single_page\"><code>Session::execute_single_page()</code></a> instead.</p>\n<h5 id=\"arguments-1\"><a class=\"doc-anchor\" href=\"#arguments-1\">§</a>Arguments</h5>\n<ul>\n<li><code>query</code> - statement to be executed</li>\n<li><code>values</code> - values bound to the query</li>\n<li><code>paging_state</code> - previously received paging state or <a href=\"scylla/statement/struct.PagingState.html#method.start\" title=\"associated function scylla::statement::PagingState::start\">PagingState::start()</a></li>\n</ul>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::ControlFlow;\n<span class=\"kw\">use </span>scylla::statement::PagingState;\n\n<span class=\"comment\">// Manual paging in a loop, unprepared statement.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paging_state = PagingState::start();\n<span class=\"kw\">loop </span>{\n   <span class=\"kw\">let </span>(res, paging_state_response) = session\n       .query_single_page(<span class=\"string\">\"SELECT a, b, c FROM ks.tbl\"</span>, <span class=\"kw-2\">&amp;</span>[], paging_state)\n       .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n   <span class=\"comment\">// Do something with a single page of results.\n   </span><span class=\"kw\">for </span>row <span class=\"kw\">in </span>res\n       .into_rows_result()<span class=\"question-mark\">?\n       </span>.rows::&lt;(i32, <span class=\"kw-2\">&amp;</span>str)&gt;()<span class=\"question-mark\">?\n   </span>{\n       <span class=\"kw\">let </span>(a, b) = row<span class=\"question-mark\">?</span>;\n   }\n\n   <span class=\"kw\">match </span>paging_state_response.into_paging_control_flow() {\n       ControlFlow::Break(()) =&gt; {\n           <span class=\"comment\">// No more pages to be fetched.\n           </span><span class=\"kw\">break</span>;\n       }\n       ControlFlow::Continue(new_paging_state) =&gt; {\n           <span class=\"comment\">// Update paging state from the response, so that query\n           // will be resumed from where it ended the last time.\n           </span>paging_state = new_paging_state;\n       }\n   }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.query_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#644-650\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.query_iter\" class=\"fn\">query_iter</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/iterator/struct.QueryPager.html\" title=\"struct scylla::transport::iterator::QueryPager\">QueryPager</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Run an unprepared query with paging<br />\nThis method will query all pages of the result\\</p>\n<p>Returns an async iterator (stream) over all received rows<br />\nPage size can be specified in the <a href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a> passed to the function</p>\n<p>It is discouraged to use this method with non-empty values argument (<code>is_empty()</code> method from <code>SerializeRow</code>\ntrait returns false). In such case, query first needs to be prepared (on a single connection), so\ndriver will initially perform 2 round trips instead of 1. Please use <a href=\"scylla/transport/session/struct.GenericSession.html#method.execute_iter\" title=\"method scylla::transport::session::GenericSession::execute_iter\"><code>Session::execute_iter()</code></a> instead.</p>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/paged.html\">the book</a> for more information.</p>\n<h5 id=\"arguments-2\"><a class=\"doc-anchor\" href=\"#arguments-2\">§</a>Arguments</h5>\n<ul>\n<li><code>query</code> - statement to be executed, can be just a <code>&amp;str</code> or the <a href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a> struct.</li>\n<li><code>values</code> - values bound to the query, the easiest way is to use a tuple of bound values.</li>\n</ul>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::IntoTypedRows;\n<span class=\"kw\">use </span>futures::stream::StreamExt;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rows_stream = session\n   .query_iter(<span class=\"string\">\"SELECT a, b FROM ks.t\"</span>, <span class=\"kw-2\">&amp;</span>[])\n   .<span class=\"kw\">await</span><span class=\"question-mark\">?\n   </span>.rows_stream::&lt;(i32, i32)&gt;()<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(next_row_res) = rows_stream.next().<span class=\"kw\">await </span>{\n    <span class=\"kw\">let </span>(a, b): (i32, i32) = next_row_res<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"a, b: {}, {}\"</span>, a, b);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.execute_unpaged\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#695-701\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.execute_unpaged\" class=\"fn\">execute_unpaged</a>(\n    &amp;self,\n    prepared: &amp;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/query_result/struct.QueryResult.html\" title=\"struct scylla::transport::query_result::QueryResult\">QueryResult</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Execute a prepared statement. Requires a <a href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>\ngenerated using <a href=\"scylla/transport/session/struct.GenericSession.html#method.prepare\" title=\"method scylla::transport::session::GenericSession::prepare\"><code>Session::prepare</code></a>.<br />\nPerforms an unpaged query, i.e. all results are received in a single response.</p>\n<p>As all results come in one response (no paging is done!), the memory footprint and latency may be huge\nfor statements returning rows (i.e. SELECTs)! Prefer this method for non-SELECTs, and for SELECTs\nit is best to use paged queries:</p>\n<ul>\n<li>to receive multiple pages and transparently iterate through them, use <a href=\"scylla/transport/session/struct.GenericSession.html#method.execute_iter\" title=\"method scylla::transport::session::GenericSession::execute_iter\">execute_iter</a>.</li>\n<li>to manually receive multiple pages and iterate through them, use <a href=\"scylla/transport/session/struct.GenericSession.html#method.execute_single_page\" title=\"method scylla::transport::session::GenericSession::execute_single_page\">execute_single_page</a>.</li>\n</ul>\n<p>Prepared queries are much faster than simple queries:</p>\n<ul>\n<li>Database doesn’t need to parse the query</li>\n<li>They are properly load balanced using token aware routing</li>\n</ul>\n<blockquote>\n<p><em><strong>Warning</strong></em><br />\nFor token/shard aware load balancing to work properly, all partition key values\nmust be sent as bound values\n(see <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/prepared.html#performance\">performance section</a>).</p>\n</blockquote>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/prepared.html\">the book</a> for more information.</p>\n<h5 id=\"arguments-3\"><a class=\"doc-anchor\" href=\"#arguments-3\">§</a>Arguments</h5>\n<ul>\n<li><code>prepared</code> - the prepared statement to execute, generated using <a href=\"scylla/transport/session/struct.GenericSession.html#method.prepare\" title=\"method scylla::transport::session::GenericSession::prepare\"><code>Session::prepare</code></a></li>\n<li><code>values</code> - values bound to the query, the easiest way is to use a tuple of bound values</li>\n</ul>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::prepared_statement::PreparedStatement;\n\n<span class=\"comment\">// Prepare the query for later execution\n</span><span class=\"kw\">let </span>prepared: PreparedStatement = session\n    .prepare(<span class=\"string\">\"INSERT INTO ks.tab (a) VALUES(?)\"</span>)\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Run the prepared query with some values, just like a simple query.\n</span><span class=\"kw\">let </span>to_insert: i32 = <span class=\"number\">12345</span>;\nsession.execute_unpaged(<span class=\"kw-2\">&amp;</span>prepared, (to_insert,)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.execute_single_page\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#759-767\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.execute_single_page\" class=\"fn\">execute_single_page</a>(\n    &amp;self,\n    prepared: &amp;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n    paging_state: <a class=\"struct\" href=\"scylla/statement/struct.PagingState.html\" title=\"struct scylla::statement::PagingState\">PagingState</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"scylla/transport/query_result/struct.QueryResult.html\" title=\"struct scylla::transport::query_result::QueryResult\">QueryResult</a>, <a class=\"enum\" href=\"scylla/statement/enum.PagingStateResponse.html\" title=\"enum scylla::statement::PagingStateResponse\">PagingStateResponse</a>), <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Executes a prepared statement, restricting results to single page.\nOptionally continues fetching results from a saved point.</p>\n<h5 id=\"arguments-4\"><a class=\"doc-anchor\" href=\"#arguments-4\">§</a>Arguments</h5>\n<ul>\n<li><code>prepared</code> - a statement prepared with <a href=\"scylla/transport/session/struct.GenericSession.html#method.prepare\" title=\"method scylla::transport::session::GenericSession::prepare\">prepare</a></li>\n<li><code>values</code> - values bound to the query</li>\n<li><code>paging_state</code> - continuation based on a paging state received from a previous paged query or None</li>\n</ul>\n<h5 id=\"example-3\"><a class=\"doc-anchor\" href=\"#example-3\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::ops::ControlFlow;\n<span class=\"kw\">use </span>scylla::query::Query;\n<span class=\"kw\">use </span>scylla::statement::{PagingState, PagingStateResponse};\n\n<span class=\"kw\">let </span>paged_prepared = session\n    .prepare(\n        Query::new(<span class=\"string\">\"SELECT a, b FROM ks.tbl\"</span>)\n            .with_page_size(<span class=\"number\">100</span>.try_into().unwrap()),\n    )\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Manual paging in a loop, prepared statement.\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>paging_state = PagingState::start();\n<span class=\"kw\">loop </span>{\n    <span class=\"kw\">let </span>(res, paging_state_response) = session\n        .execute_single_page(<span class=\"kw-2\">&amp;</span>paged_prepared, <span class=\"kw-2\">&amp;</span>[], paging_state)\n        .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n   <span class=\"comment\">// Do something with a single page of results.\n   </span><span class=\"kw\">for </span>row <span class=\"kw\">in </span>res\n       .into_rows_result()<span class=\"question-mark\">?\n       </span>.rows::&lt;(i32, <span class=\"kw-2\">&amp;</span>str)&gt;()<span class=\"question-mark\">?\n   </span>{\n       <span class=\"kw\">let </span>(a, b) = row<span class=\"question-mark\">?</span>;\n   }\n\n    <span class=\"kw\">match </span>paging_state_response.into_paging_control_flow() {\n        ControlFlow::Break(()) =&gt; {\n            <span class=\"comment\">// No more pages to be fetched.\n            </span><span class=\"kw\">break</span>;\n        }\n        ControlFlow::Continue(new_paging_state) =&gt; {\n            <span class=\"comment\">// Update paging continuation from the paging state, so that query\n            // will be resumed from where it ended the last time.\n            </span>paging_state = new_paging_state;\n        }\n    }\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.execute_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#809-815\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.execute_iter\" class=\"fn\">execute_iter</a>(\n    &amp;self,\n    prepared: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/iterator/struct.QueryPager.html\" title=\"struct scylla::transport::iterator::QueryPager\">QueryPager</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Run a prepared query with paging.<br />\nThis method will query all pages of the result.\\</p>\n<p>Returns an async iterator (stream) over all received rows.<br />\nPage size can be specified in the <a href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a> passed to the function.</p>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/paged.html\">the book</a> for more information.</p>\n<h5 id=\"arguments-5\"><a class=\"doc-anchor\" href=\"#arguments-5\">§</a>Arguments</h5>\n<ul>\n<li><code>prepared</code> - the prepared statement to execute, generated using <a href=\"scylla/transport/session/struct.GenericSession.html#method.prepare\" title=\"method scylla::transport::session::GenericSession::prepare\"><code>Session::prepare</code></a></li>\n<li><code>values</code> - values bound to the query, the easiest way is to use a tuple of bound values</li>\n</ul>\n<h5 id=\"example-4\"><a class=\"doc-anchor\" href=\"#example-4\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::prepared_statement::PreparedStatement;\n<span class=\"kw\">use </span>scylla::IntoTypedRows;\n\n<span class=\"comment\">// Prepare the query for later execution\n</span><span class=\"kw\">let </span>prepared: PreparedStatement = session\n    .prepare(<span class=\"string\">\"SELECT a, b FROM ks.t\"</span>)\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Execute the query and receive all pages\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rows_stream = session\n   .execute_iter(prepared, <span class=\"kw-2\">&amp;</span>[])\n   .<span class=\"kw\">await</span><span class=\"question-mark\">?\n   </span>.rows_stream::&lt;(i32, i32)&gt;()<span class=\"question-mark\">?</span>;\n\n<span class=\"kw\">while let </span><span class=\"prelude-val\">Some</span>(next_row_res) = rows_stream.next().<span class=\"kw\">await </span>{\n    <span class=\"kw\">let </span>(a, b): (i32, i32) = next_row_res<span class=\"question-mark\">?</span>;\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"a, b: {}, {}\"</span>, a, b);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.batch\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#862-868\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.batch\" class=\"fn\">batch</a>(\n    &amp;self,\n    batch: &amp;<a class=\"struct\" href=\"scylla/statement/batch/struct.Batch.html\" title=\"struct scylla::statement::batch::Batch\">Batch</a>,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/batch/trait.BatchValues.html\" title=\"trait scylla::serialize::batch::BatchValues\">BatchValues</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/query_result/struct.QueryResult.html\" title=\"struct scylla::transport::query_result::QueryResult\">QueryResult</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Perform a batch query<br />\nBatch contains many <code>simple</code> or <code>prepared</code> queries which are executed at once<br />\nBatch doesn’t return any rows</p>\n<p>Batch values must contain values for each of the queries</p>\n<p>Avoid using non-empty values (<code>SerializeRow::is_empty()</code> return false) for simple queries\ninside the batch. Such queries will first need to be prepared, so the driver will need to\nsend (numer_of_unprepared_queries_with_values + 1) requests instead of 1 request, severly\naffecting performance.</p>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/batch.html\">the book</a> for more information</p>\n<h5 id=\"arguments-6\"><a class=\"doc-anchor\" href=\"#arguments-6\">§</a>Arguments</h5>\n<ul>\n<li><code>batch</code> - <a href=\"scylla/statement/batch/struct.Batch.html\" title=\"struct scylla::statement::batch::Batch\">Batch</a> to be performed</li>\n<li><code>values</code> - List of values for each query, it’s the easiest to use a tuple of tuples</li>\n</ul>\n<h5 id=\"example-5\"><a class=\"doc-anchor\" href=\"#example-5\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::batch::Batch;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>batch: Batch = Default::default();\n\n<span class=\"comment\">// A query with two bound values\n</span>batch.append_statement(<span class=\"string\">\"INSERT INTO ks.tab(a, b) VALUES(?, ?)\"</span>);\n\n<span class=\"comment\">// A query with one bound value\n</span>batch.append_statement(<span class=\"string\">\"INSERT INTO ks.tab(a, b) VALUES(3, ?)\"</span>);\n\n<span class=\"comment\">// A query with no bound values\n</span>batch.append_statement(<span class=\"string\">\"INSERT INTO ks.tab(a, b) VALUES(5, 6)\"</span>);\n\n<span class=\"comment\">// Batch values is a tuple of 3 tuples containing values for each query\n</span><span class=\"kw\">let </span>batch_values = ((<span class=\"number\">1_i32</span>, <span class=\"number\">2_i32</span>), <span class=\"comment\">// Tuple with two values for the first query\n                    </span>(<span class=\"number\">4_i32</span>,),       <span class=\"comment\">// Tuple with one value for the second query\n                    </span>());            <span class=\"comment\">// Empty tuple/unit for the third query\n\n// Run the batch\n</span>session.batch(<span class=\"kw-2\">&amp;</span>batch, batch_values).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_shared_session_with_legacy_api\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#883-899\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.make_shared_session_with_legacy_api\" class=\"fn\">make_shared_session_with_legacy_api</a>(&amp;self) -&gt; <a class=\"type\" href=\"scylla/transport/session/type.LegacySession.html\" title=\"type scylla::transport::session::LegacySession\">LegacySession</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span></summary><div class=\"docblock\"><p>Creates a new Session instance that shared resources with\nthe current Session but supports the legacy API.</p>\n<p>This method is provided in order to make migration to the new\ndeserialization API easier. For example, if your program in general uses\nthe new API but you still have some modules left that use the old one,\nyou can use this method to create an instance that supports the old API\nand pass it to the module that you intend to migrate later.</p>\n</div></details></div></details>",0,"scylla::transport::session::Session"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericSession%3CDeserApi%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1014-2244\">Source</a><a href=\"#impl-GenericSession%3CDeserApi%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;DeserApi&gt; <a class=\"struct\" href=\"scylla/transport/session/struct.GenericSession.html\" title=\"struct scylla::transport::session::GenericSession\">GenericSession</a>&lt;DeserApi&gt;<div class=\"where\">where\n    DeserApi: <a class=\"trait\" href=\"scylla/transport/session/trait.DeserializationApiKind.html\" title=\"trait scylla::transport::session::DeserializationApiKind\">DeserializationApiKind</a>,</div></h3><div class=\"docblock\"><p>Represents a CQL session, which can be used to communicate\nwith the database</p>\n</div></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.connect\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1040-1137\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.connect\" class=\"fn\">connect</a>(config: <a class=\"struct\" href=\"scylla/transport/session/struct.SessionConfig.html\" title=\"struct scylla::transport::session::SessionConfig\">SessionConfig</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"scylla/transport/errors/enum.NewSessionError.html\" title=\"enum scylla::transport::errors::NewSessionError\">NewSessionError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Estabilishes a CQL session with the database</p>\n<p>Usually it’s easier to use <a href=\"scylla/transport/session_builder/type.SessionBuilder.html\" title=\"type scylla::transport::session_builder::SessionBuilder\">SessionBuilder</a>\ninstead of calling <code>Session::connect</code> directly, because it’s more convenient.</p>\n<h5 id=\"arguments\"><a class=\"doc-anchor\" href=\"#arguments\">§</a>Arguments</h5>\n<ul>\n<li><code>config</code> - Connection configuration - known nodes, Compression, etc.\nMust contain at least one known node.</li>\n</ul>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::{Session, SessionConfig};\n<span class=\"kw\">use </span>scylla::transport::KnownNode;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>config = SessionConfig::new();\nconfig.known_nodes.push(KnownNode::Hostname(<span class=\"string\">\"127.0.0.1:9042\"</span>.to_string()));\n\n<span class=\"kw\">let </span>session: Session = Session::connect(config).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prepare\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1384-1423\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.prepare\" class=\"fn\">prepare</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Prepares a statement on the server side and returns a prepared statement,\nwhich can later be used to perform more efficient queries</p>\n<p>Prepared queries are much faster than simple queries:</p>\n<ul>\n<li>Database doesn’t need to parse the query</li>\n<li>They are properly load balanced using token aware routing</li>\n</ul>\n<blockquote>\n<p><em><strong>Warning</strong></em><br />\nFor token/shard aware load balancing to work properly, all partition key values\nmust be sent as bound values\n(see <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/prepared.html#performance\">performance section</a>)</p>\n</blockquote>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/prepared.html\">the book</a> for more information.\nSee the documentation of <a href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\"><code>PreparedStatement</code></a>.</p>\n<h5 id=\"arguments-1\"><a class=\"doc-anchor\" href=\"#arguments-1\">§</a>Arguments</h5>\n<ul>\n<li><code>query</code> - query to prepare, can be just a <code>&amp;str</code> or the <a href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a> struct.</li>\n</ul>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::prepared_statement::PreparedStatement;\n\n<span class=\"comment\">// Prepare the query for later execution\n</span><span class=\"kw\">let </span>prepared: PreparedStatement = session\n    .prepare(<span class=\"string\">\"INSERT INTO ks.tab (a) VALUES(?)\"</span>)\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Run the prepared query with some values, just like a simple query\n</span><span class=\"kw\">let </span>to_insert: i32 = <span class=\"number\">12345</span>;\nsession.execute_unpaged(<span class=\"kw-2\">&amp;</span>prepared, (to_insert,)).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.prepare_batch\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1719-1737\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.prepare_batch\" class=\"fn\">prepare_batch</a>(&amp;self, batch: &amp;<a class=\"struct\" href=\"scylla/statement/batch/struct.Batch.html\" title=\"struct scylla::statement::batch::Batch\">Batch</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/statement/batch/struct.Batch.html\" title=\"struct scylla::statement::batch::Batch\">Batch</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Prepares all statements within the batch and returns a new batch where every\nstatement is prepared.\n/// # Example</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>scylla::batch::Batch;\n\n<span class=\"comment\">// Create a batch statement with unprepared statements\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>batch: Batch = Default::default();\nbatch.append_statement(<span class=\"string\">\"INSERT INTO ks.simple_unprepared1 VALUES(?, ?)\"</span>);\nbatch.append_statement(<span class=\"string\">\"INSERT INTO ks.simple_unprepared2 VALUES(?, ?)\"</span>);\n\n<span class=\"comment\">// Prepare all statements in the batch at once\n</span><span class=\"kw\">let </span>prepared_batch: Batch = session.prepare_batch(<span class=\"kw-2\">&amp;</span>batch).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Specify bound values to use with each query\n</span><span class=\"kw\">let </span>batch_values = ((<span class=\"number\">1_i32</span>, <span class=\"number\">2_i32</span>),\n                    (<span class=\"number\">3_i32</span>, <span class=\"number\">4_i32</span>));\n\n<span class=\"comment\">// Run the prepared batch\n</span>session.batch(<span class=\"kw-2\">&amp;</span>prepared_batch, batch_values).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.use_keyspace\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1775-1792\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.use_keyspace\" class=\"fn\">use_keyspace</a>(\n    &amp;self,\n    keyspace_name: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;,\n    case_sensitive: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Sends <code>USE &lt;keyspace_name&gt;</code> request on all connections<br />\nThis allows to write <code>SELECT * FROM table</code> instead of <code>SELECT * FROM keyspace.table</code>\\</p>\n<p>Note that even failed <code>use_keyspace</code> can change currently used keyspace - the request is sent on all connections and\ncan overwrite previously used keyspace.</p>\n<p>Call only one <code>use_keyspace</code> at a time.<br />\nTrying to do two <code>use_keyspace</code> requests simultaneously with different names\ncan end with some connections using one keyspace and the rest using the other.</p>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/queries/usekeyspace.html\">the book</a> for more information</p>\n<h5 id=\"arguments-2\"><a class=\"doc-anchor\" href=\"#arguments-2\">§</a>Arguments</h5>\n<ul>\n<li><code>keyspace_name</code> - keyspace name to use,\nkeyspace names can have up to 48 alphanumeric characters and contain underscores</li>\n<li><code>case_sensitive</code> - if set to true the generated query will put keyspace name in quotes</li>\n</ul>\n<h5 id=\"example-2\"><a class=\"doc-anchor\" href=\"#example-2\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>session\n    .query_unpaged(<span class=\"string\">\"INSERT INTO my_keyspace.tab (a) VALUES ('test1')\"</span>, <span class=\"kw-2\">&amp;</span>[])\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\nsession.use_keyspace(<span class=\"string\">\"my_keyspace\"</span>, <span class=\"bool-val\">false</span>).<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;\n\n<span class=\"comment\">// Now we can omit keyspace name in the query\n</span>session\n    .query_unpaged(<span class=\"string\">\"INSERT INTO tab (a) VALUES ('test2')\"</span>, <span class=\"kw-2\">&amp;</span>[])\n    .<span class=\"kw\">await</span><span class=\"question-mark\">?</span>;</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.refresh_metadata\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1799-1801\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.refresh_metadata\" class=\"fn\">refresh_metadata</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Manually trigger a metadata refresh<br />\nThe driver will fetch current nodes in the cluster and update its metadata</p>\n<p>Normally this is not needed,\nthe driver should automatically detect all metadata changes in the cluster</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_metrics\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1806-1808\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.get_metrics\" class=\"fn\">get_metrics</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"scylla/struct.Metrics.html\" title=\"struct scylla::Metrics\">Metrics</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access metrics collected by the driver<br />\nDriver collects various metrics like number of queries or query latencies.\nThey can be read using this method</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_cluster_data\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1813-1815\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.get_cluster_data\" class=\"fn\">get_cluster_data</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"scylla/transport/struct.ClusterData.html\" title=\"struct scylla::transport::ClusterData\">ClusterData</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Access cluster data collected by the driver<br />\nDriver collects various information about network topology or schema.\nThey can be read using this method</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_tracing_info\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1821-1835\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.get_tracing_info\" class=\"fn\">get_tracing_info</a>(\n    &amp;self,\n    tracing_id: &amp;<a class=\"struct\" href=\"uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/tracing/struct.TracingInfo.html\" title=\"struct scylla::tracing::TracingInfo\">TracingInfo</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Get <a href=\"scylla/tracing/struct.TracingInfo.html\" title=\"struct scylla::tracing::TracingInfo\"><code>TracingInfo</code></a> of a traced query performed earlier</p>\n<p>See <a href=\"https://rust-driver.docs.scylladb.com/stable/tracing/tracing.html\">the book</a>\nfor more information about query tracing</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_keyspace\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#1848-1850\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.get_keyspace\" class=\"fn\">get_keyspace</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the name of the keyspace that is currently set, or <code>None</code> if no\nkeyspace was set.</p>\n<p>It will initially return the name of the keyspace that was set\nin the session configuration, but calling <code>use_keyspace</code> will update\nit.</p>\n<p>Note: the return value might be wrong if <code>use_keyspace</code> was called\nconcurrently or it previously failed. It is also unspecified\nif <code>get_keyspace</code> is called concurrently with <code>use_keyspace</code>.</p>\n</div></details><section id=\"method.await_schema_agreement\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#2216-2225\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.await_schema_agreement\" class=\"fn\">await_schema_agreement</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><section id=\"method.check_schema_agreement\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#2227-2237\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.check_schema_agreement\" class=\"fn\">check_schema_agreement</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"uuid/struct.Uuid.html\" title=\"struct uuid::Uuid\">Uuid</a>&gt;, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_default_execution_profile_handle\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#2241-2243\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.get_default_execution_profile_handle\" class=\"fn\">get_default_execution_profile_handle</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"scylla/transport/execution_profile/struct.ExecutionProfileHandle.html\" title=\"struct scylla::transport::execution_profile::ExecutionProfileHandle\">ExecutionProfileHandle</a></h4></section></summary><div class=\"docblock\"><p>Retrieves the handle to execution profile that is used by this session\nby default, i.e. when an executed statement does not define its own handle.</p>\n</div></details></div></details>",0,"scylla::transport::session::Session","scylla::transport::session::LegacySession"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-GenericSession%3CLegacyDeserializationApi%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#907-1010\">Source</a><a href=\"#impl-GenericSession%3CLegacyDeserializationApi%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"scylla/transport/session/struct.GenericSession.html\" title=\"struct scylla::transport::session::GenericSession\">GenericSession</a>&lt;<a class=\"enum\" href=\"scylla/transport/session/enum.LegacyDeserializationApi.html\" title=\"enum scylla::transport::session::LegacyDeserializationApi\">LegacyDeserializationApi</a>&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.query_unpaged\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#908-917\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.query_unpaged\" class=\"fn\">query_unpaged</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/legacy_query_result/struct.LegacyQueryResult.html\" title=\"struct scylla::transport::legacy_query_result::LegacyQueryResult\">LegacyQueryResult</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><section id=\"method.query_single_page\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#919-929\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.query_single_page\" class=\"fn\">query_single_page</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n    paging_state: <a class=\"struct\" href=\"scylla/statement/struct.PagingState.html\" title=\"struct scylla::statement::PagingState\">PagingState</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"scylla/transport/legacy_query_result/struct.LegacyQueryResult.html\" title=\"struct scylla::transport::legacy_query_result::LegacyQueryResult\">LegacyQueryResult</a>, <a class=\"enum\" href=\"scylla/statement/enum.PagingStateResponse.html\" title=\"enum scylla::statement::PagingStateResponse\">PagingStateResponse</a>), <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><section id=\"method.query_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#931-939\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.query_iter\" class=\"fn\">query_iter</a>(\n    &amp;self,\n    query: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/query/struct.Query.html\" title=\"struct scylla::statement::query::Query\">Query</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/iterator/struct.LegacyRowIterator.html\" title=\"struct scylla::transport::iterator::LegacyRowIterator\">LegacyRowIterator</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><section id=\"method.execute_unpaged\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#941-950\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.execute_unpaged\" class=\"fn\">execute_unpaged</a>(\n    &amp;self,\n    prepared: &amp;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/legacy_query_result/struct.LegacyQueryResult.html\" title=\"struct scylla::transport::legacy_query_result::LegacyQueryResult\">LegacyQueryResult</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><section id=\"method.execute_single_page\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#952-962\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.execute_single_page\" class=\"fn\">execute_single_page</a>(\n    &amp;self,\n    prepared: &amp;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n    paging_state: <a class=\"struct\" href=\"scylla/statement/struct.PagingState.html\" title=\"struct scylla::statement::PagingState\">PagingState</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"scylla/transport/legacy_query_result/struct.LegacyQueryResult.html\" title=\"struct scylla::transport::legacy_query_result::LegacyQueryResult\">LegacyQueryResult</a>, <a class=\"enum\" href=\"scylla/statement/enum.PagingStateResponse.html\" title=\"enum scylla::statement::PagingStateResponse\">PagingStateResponse</a>), <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><section id=\"method.execute_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#964-972\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.execute_iter\" class=\"fn\">execute_iter</a>(\n    &amp;self,\n    prepared: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"scylla/statement/prepared_statement/struct.PreparedStatement.html\" title=\"struct scylla::statement::prepared_statement::PreparedStatement\">PreparedStatement</a>&gt;,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/row/trait.SerializeRow.html\" title=\"trait scylla::serialize::row::SerializeRow\">SerializeRow</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/iterator/struct.LegacyRowIterator.html\" title=\"struct scylla::transport::iterator::LegacyRowIterator\">LegacyRowIterator</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><section id=\"method.batch\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#974-980\">Source</a><h4 class=\"code-header\">pub async fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.batch\" class=\"fn\">batch</a>(\n    &amp;self,\n    batch: &amp;<a class=\"struct\" href=\"scylla/statement/batch/struct.Batch.html\" title=\"struct scylla::statement::batch::Batch\">Batch</a>,\n    values: impl <a class=\"trait\" href=\"scylla/serialize/batch/trait.BatchValues.html\" title=\"trait scylla::serialize::batch::BatchValues\">BatchValues</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"scylla/transport/legacy_query_result/struct.LegacyQueryResult.html\" title=\"struct scylla::transport::legacy_query_result::LegacyQueryResult\">LegacyQueryResult</a>, <a class=\"enum\" href=\"scylla/transport/errors/enum.QueryError.html\" title=\"enum scylla::transport::errors::QueryError\">QueryError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span><details class=\"toggle method-toggle\" open><summary><section id=\"method.make_shared_session_with_new_api\" class=\"method\"><a class=\"src rightside\" href=\"src/scylla/transport/session.rs.html#993-1009\">Source</a><h4 class=\"code-header\">pub fn <a href=\"scylla/transport/session/struct.GenericSession.html#tymethod.make_shared_session_with_new_api\" class=\"fn\">make_shared_session_with_new_api</a>(&amp;self) -&gt; <a class=\"type\" href=\"scylla/transport/session/type.Session.html\" title=\"type scylla::transport::session::Session\">Session</a></h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecated since 0.15.0: Legacy deserialization API is inefficient and is going to be removed soon</span></div></span></summary><div class=\"docblock\"><p>Creates a new Session instance that shares resources with\nthe current Session but supports the new API.</p>\n<p>This method is provided in order to make migration to the new\ndeserialization API easier. For example, if your program in general uses\nthe old API but you want to migrate some modules to the new one, you\ncan use this method to create an instance that supports the new API\nand pass it to the module that you intend to migrate.</p>\n<p>The new session object will use the same connections and cluster\nmetadata.</p>\n</div></details></div></details>",0,"scylla::transport::session::LegacySession"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[67129]}